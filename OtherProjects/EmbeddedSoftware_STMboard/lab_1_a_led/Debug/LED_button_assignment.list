
LED_button_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e3c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002000  08002000  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002000  08002000  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002000  08002000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003712  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000cb3  00000000  00000000  00023791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003a8  00000000  00000000  00024448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002a0  00000000  00000000  000247f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e096  00000000  00000000  00024a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004a5d  00000000  00000000  00042b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b6cd3  00000000  00000000  00047583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ce8  00000000  00000000  000fe258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  000fef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001fb8 	.word	0x08001fb8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001fb8 	.word	0x08001fb8

080001d4 <main>:
/* USER CODE END 0 */
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	//enables port a & b clock registers.
	/* port a: input
	 * port b: output
	 * */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80001da:	4b74      	ldr	r3, [pc, #464]	; (80003ac <main+0x1d8>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a73      	ldr	r2, [pc, #460]	; (80003ac <main+0x1d8>)
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80001e6:	4b71      	ldr	r3, [pc, #452]	; (80003ac <main+0x1d8>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a70      	ldr	r2, [pc, #448]	; (80003ac <main+0x1d8>)
 80001ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001f0:	6153      	str	r3, [r2, #20]
	//button setup:
	/* PA8: button 1
	 * PA9: button 2
	 * */
	//resets both button pins' MODE to 00 as an input.
	GPIOA->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 80001f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000200:	6013      	str	r3, [r2, #0]
	//resets both button pins' SPEED.
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9);
 8000202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000210:	6093      	str	r3, [r2, #8]
	//resets both button input PUPD registers.
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);
 8000212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000220:	60d3      	str	r3, [r2, #12]
	//sets both button pins' SPEED to 01 (medium).
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR9_0);
 8000222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000230:	6093      	str	r3, [r2, #8]
	//sets both button input PUPD registers to 01 (pull-down).
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR8_1 | GPIO_PUPDR_PUPDR9_1);
 8000232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000240:	60d3      	str	r3, [r2, #12]
	 * PB3: LED 3
	 * PB4: LED 4
	 * PB5: LED 5
	 * */
	//resets all the LEDs' pin MODE.
	GPIOB->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3
 8000242:	4b5b      	ldr	r3, [pc, #364]	; (80003b0 <main+0x1dc>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a5a      	ldr	r2, [pc, #360]	; (80003b0 <main+0x1dc>)
 8000248:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800024c:	f023 030c 	bic.w	r3, r3, #12
 8000250:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
	//resets all LEDs' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_3
 8000252:	4b57      	ldr	r3, [pc, #348]	; (80003b0 <main+0x1dc>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a56      	ldr	r2, [pc, #344]	; (80003b0 <main+0x1dc>)
 8000258:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800025c:	6053      	str	r3, [r2, #4]
			| GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);
	//resets all LEDs' pin SPEED.
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR2
 800025e:	4b54      	ldr	r3, [pc, #336]	; (80003b0 <main+0x1dc>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	4a53      	ldr	r2, [pc, #332]	; (80003b0 <main+0x1dc>)
 8000264:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000268:	f023 030c 	bic.w	r3, r3, #12
 800026c:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4
			| GPIO_OSPEEDER_OSPEEDR5);
	//sets the LEDs' pin MODE to 01 as an output.
	GPIOB->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0
 800026e:	4b50      	ldr	r3, [pc, #320]	; (80003b0 <main+0x1dc>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a4f      	ldr	r2, [pc, #316]	; (80003b0 <main+0x1dc>)
 8000274:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
	//sets all LEDs' pin SPEED to medium.
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR1_0 | GPIO_OSPEEDER_OSPEEDR2_0
 800027e:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <main+0x1dc>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a4b      	ldr	r2, [pc, #300]	; (80003b0 <main+0x1dc>)
 8000284:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3_0 | GPIO_OSPEEDER_OSPEEDR4_0
			| GPIO_OSPEEDER_OSPEEDR5_0);
	//resets all LEDs' PUPD register.
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR2 | GPIO_PUPDR_PUPDR3
 800028e:	4b48      	ldr	r3, [pc, #288]	; (80003b0 <main+0x1dc>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	4a47      	ldr	r2, [pc, #284]	; (80003b0 <main+0x1dc>)
 8000294:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000298:	f023 030c 	bic.w	r3, r3, #12
 800029c:	60d3      	str	r3, [r2, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800029e:	f000 fab5 	bl	800080c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002a2:	f000 f887 	bl	80003b4 <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	//sets the button 1 toggle state.
	uint8_t btn_1_pressed = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71bb      	strb	r3, [r7, #6]

	//sets the sweep LED rows' configuration.
	uint8_t led_sweep_type = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]
	uint8_t sweep_a_to_left = 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	717b      	strb	r3, [r7, #5]
	uint8_t sweep_b_to_left = 1;
 80002b2:	2301      	movs	r3, #1
 80002b4:	713b      	strb	r3, [r7, #4]

	uint8_t sweep_a_counter = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	70fb      	strb	r3, [r7, #3]
	uint8_t sweep_b_counter = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	70bb      	strb	r3, [r7, #2]
	uint8_t sweep_b_adder = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	707b      	strb	r3, [r7, #1]
	uint8_t sweep_b_reverse = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	703b      	strb	r3, [r7, #0]

	//resets all LEDs to LOW.
	ResetLED(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2102      	movs	r1, #2
 80002ca:	4839      	ldr	r0, [pc, #228]	; (80003b0 <main+0x1dc>)
 80002cc:	f000 f8e9 	bl	80004a2 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2104      	movs	r1, #4
 80002d4:	4836      	ldr	r0, [pc, #216]	; (80003b0 <main+0x1dc>)
 80002d6:	f000 f8e4 	bl	80004a2 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	4834      	ldr	r0, [pc, #208]	; (80003b0 <main+0x1dc>)
 80002e0:	f000 f8df 	bl	80004a2 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	4831      	ldr	r0, [pc, #196]	; (80003b0 <main+0x1dc>)
 80002ea:	f000 f8da 	bl	80004a2 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2120      	movs	r1, #32
 80002f2:	482f      	ldr	r0, [pc, #188]	; (80003b0 <main+0x1dc>)
 80002f4:	f000 f8d5 	bl	80004a2 <ResetLED>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//Button 1 de-bouncing to toggle the single LED.
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 80002f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 f893 	bl	800042a <ButtonPressed>
 8000304:	4603      	mov	r3, r0
 8000306:	2b01      	cmp	r3, #1
 8000308:	d11b      	bne.n	8000342 <main+0x16e>
			HAL_Delay(100);
 800030a:	2064      	movs	r0, #100	; 0x64
 800030c:	f000 fae4 	bl	80008d8 <HAL_Delay>
			if (ButtonPressed(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8000310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 f887 	bl	800042a <ButtonPressed>
 800031c:	4603      	mov	r3, r0
 800031e:	2b01      	cmp	r3, #1
 8000320:	d105      	bne.n	800032e <main+0x15a>
				ToggleOutputMode(GPIOB, &btn_1_pressed, GPIO_PIN_1);
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	2202      	movs	r2, #2
 8000326:	4619      	mov	r1, r3
 8000328:	4821      	ldr	r0, [pc, #132]	; (80003b0 <main+0x1dc>)
 800032a:	f000 f898 	bl	800045e <ToggleOutputMode>
			}
			while (ButtonPressed(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 800032e:	bf00      	nop
 8000330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 f877 	bl	800042a <ButtonPressed>
 800033c:	4603      	mov	r3, r0
 800033e:	2b01      	cmp	r3, #1
 8000340:	d0f6      	beq.n	8000330 <main+0x15c>
				//wait 'till release.
			}
		}

		//Button 2 de-bouncing to switch the sweep mode of the LEDs' row.
		if (ButtonPressed(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8000342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f000 f86e 	bl	800042a <ButtonPressed>
 800034e:	4603      	mov	r3, r0
 8000350:	2b01      	cmp	r3, #1
 8000352:	d119      	bne.n	8000388 <main+0x1b4>
			HAL_Delay(100);
 8000354:	2064      	movs	r0, #100	; 0x64
 8000356:	f000 fabf 	bl	80008d8 <HAL_Delay>
			if (ButtonPressed(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 800035a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f000 f862 	bl	800042a <ButtonPressed>
 8000366:	4603      	mov	r3, r0
 8000368:	2b01      	cmp	r3, #1
 800036a:	d103      	bne.n	8000374 <main+0x1a0>
				led_sweep_type ^= 1;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	f083 0301 	eor.w	r3, r3, #1
 8000372:	71fb      	strb	r3, [r7, #7]
			}
			while (ButtonPressed(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8000374:	bf00      	nop
 8000376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f000 f854 	bl	800042a <ButtonPressed>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d0f6      	beq.n	8000376 <main+0x1a2>
				//wait 'till release.
			}
		}

		if (led_sweep_type == 0) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d106      	bne.n	800039c <main+0x1c8>
			SweepA(&sweep_a_counter, &sweep_a_to_left);
 800038e:	1d7a      	adds	r2, r7, #5
 8000390:	1cfb      	adds	r3, r7, #3
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f89d 	bl	80004d4 <SweepA>
 800039a:	e7ad      	b.n	80002f8 <main+0x124>
		} else {
			SweepB(&sweep_b_counter, &sweep_b_adder, &sweep_b_reverse,
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	463a      	mov	r2, r7
 80003a0:	1c79      	adds	r1, r7, #1
 80003a2:	1cb8      	adds	r0, r7, #2
 80003a4:	f000 f900 	bl	80005a8 <SweepB>
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 80003a8:	e7a6      	b.n	80002f8 <main+0x124>
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000400 	.word	0x48000400

080003b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b090      	sub	sp, #64	; 0x40
 80003b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ba:	f107 0318 	add.w	r3, r7, #24
 80003be:	2228      	movs	r2, #40	; 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fdcc 	bl	8001f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2310      	movs	r3, #16
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fb7e 	bl	8000aec <HAL_RCC_OscConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x46>
		Error_Handler();
 80003f6:	f000 f979 	bl	80006ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003fa:	230f      	movs	r3, #15
 80003fc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fbbe 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x6e>
		Error_Handler();
 800041e:	f000 f965 	bl	80006ec <Error_Handler>
	}
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	; 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <ButtonPressed>:
 *
 * @param  GPIOx is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  GPIO_Pin specifies the port bit to be written.
 * @retval 0 (pressed) or 1 (released).
 */
uint16_t ButtonPressed(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	460b      	mov	r3, r1
 8000434:	807b      	strh	r3, [r7, #2]
	uint16_t bitState = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	81fb      	strh	r3, [r7, #14]
	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	691a      	ldr	r2, [r3, #16]
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	4013      	ands	r3, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <ButtonPressed+0x22>
		bitState = GPIO_PIN_SET;
 8000446:	2301      	movs	r3, #1
 8000448:	81fb      	strh	r3, [r7, #14]
 800044a:	e001      	b.n	8000450 <ButtonPressed+0x26>
	} else {
		bitState = GPIO_PIN_RESET;
 800044c:	2300      	movs	r3, #0
 800044e:	81fb      	strh	r3, [r7, #14]
	}
	return bitState;
 8000450:	89fb      	ldrh	r3, [r7, #14]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <ToggleOutputMode>:
 * @param  btn_state specifies the state of the input button (switched to on or off).
 * @param  led_pin_pos specifies the pin register that would be used in the writing function.
 * @retval none.
 */
void ToggleOutputMode(GPIO_TypeDef *GPIOx, uint8_t *btn_state,
		uint16_t led_pin_pos) {
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	4613      	mov	r3, r2
 800046a:	80fb      	strh	r3, [r7, #6]
	if (*btn_state == 0) {
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d109      	bne.n	8000488 <ToggleOutputMode+0x2a>
		ResetLED(GPIOx, led_pin_pos, GPIO_PIN_SET);
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f000 f811 	bl	80004a2 <ResetLED>
		*btn_state = 1;
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]
	} else {
		ResetLED(GPIOx, led_pin_pos, GPIO_PIN_RESET);
		*btn_state = 0;
	}
}
 8000486:	e008      	b.n	800049a <ToggleOutputMode+0x3c>
		ResetLED(GPIOx, led_pin_pos, GPIO_PIN_RESET);
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	2200      	movs	r2, #0
 800048c:	4619      	mov	r1, r3
 800048e:	68f8      	ldr	r0, [r7, #12]
 8000490:	f000 f807 	bl	80004a2 <ResetLED>
		*btn_state = 0;
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <ResetLED>:
 * @param  led_pin_pos specifies the pin register that would be used in the writing function.
 * @param  state specifies the chosen state of the LED (HIGH or LOW (SET or RESET)).
 * @retval none.
 */
void ResetLED(GPIO_TypeDef *GPIOx, uint16_t led_pin_pos,
		GPIO_PinState state) {
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	807b      	strh	r3, [r7, #2]
 80004ae:	4613      	mov	r3, r2
 80004b0:	707b      	strb	r3, [r7, #1]
	if (state != GPIO_PIN_RESET) {
 80004b2:	787b      	ldrb	r3, [r7, #1]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d003      	beq.n	80004c0 <ResetLED+0x1e>
		GPIOx->BSRR = (uint32_t) led_pin_pos;
 80004b8:	887a      	ldrh	r2, [r7, #2]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) led_pin_pos;
	}
}
 80004be:	e002      	b.n	80004c6 <ResetLED+0x24>
		GPIOx->BRR = (uint32_t) led_pin_pos;
 80004c0:	887a      	ldrh	r2, [r7, #2]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <SweepA>:
 * @param  counter is the limit value that the sweep can go (about 1 to 4).
 * @param  sweep_to_left specifies the state of the sweep direction so it can sweep to right and
 * 		   to left in a correct manner.
 * @retval none.
 */
void SweepA(uint8_t *counter, uint8_t *sweep_to_left) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	if (*sweep_to_left == 1) {
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d12b      	bne.n	800053e <SweepA+0x6a>
		if (*counter < 4) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d81f      	bhi.n	800052e <SweepA+0x5a>
			ResetLED(GPIOB,
			GPIO_PIN_2 << *counter, GPIO_PIN_SET);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	2304      	movs	r3, #4
 80004f6:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4829      	ldr	r0, [pc, #164]	; (80005a4 <SweepA+0xd0>)
 8000500:	f7ff ffcf 	bl	80004a2 <ResetLED>
			HAL_Delay(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f000 f9e7 	bl	80008d8 <HAL_Delay>
			ResetLED(GPIOB,
			GPIO_PIN_2 << *counter, GPIO_PIN_RESET);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	2304      	movs	r3, #4
 8000512:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 8000514:	b29b      	uxth	r3, r3
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	4822      	ldr	r0, [pc, #136]	; (80005a4 <SweepA+0xd0>)
 800051c:	f7ff ffc1 	bl	80004a2 <ResetLED>
			*counter += 1;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	701a      	strb	r2, [r3, #0]
			*counter -= 1;
		} else if (*counter == 0) {
			*sweep_to_left = 1;
		}
	}
}
 800052c:	e036      	b.n	800059c <SweepA+0xc8>
		} else if (*counter == 4) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d132      	bne.n	800059c <SweepA+0xc8>
			*sweep_to_left = 0;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
}
 800053c:	e02e      	b.n	800059c <SweepA+0xc8>
	} else if (*sweep_to_left == 0) {
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d12a      	bne.n	800059c <SweepA+0xc8>
		if (*counter > 0) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d01f      	beq.n	800058e <SweepA+0xba>
			GPIO_PIN_2 << *counter, GPIO_PIN_SET);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	2304      	movs	r3, #4
 8000556:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 8000558:	b29b      	uxth	r3, r3
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <SweepA+0xd0>)
 8000560:	f7ff ff9f 	bl	80004a2 <ResetLED>
			HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f000 f9b7 	bl	80008d8 <HAL_Delay>
			GPIO_PIN_2 << *counter, GPIO_PIN_RESET);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	2304      	movs	r3, #4
 8000572:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 8000574:	b29b      	uxth	r3, r3
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	480a      	ldr	r0, [pc, #40]	; (80005a4 <SweepA+0xd0>)
 800057c:	f7ff ff91 	bl	80004a2 <ResetLED>
			*counter -= 1;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	e006      	b.n	800059c <SweepA+0xc8>
		} else if (*counter == 0) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d102      	bne.n	800059c <SweepA+0xc8>
			*sweep_to_left = 1;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	48000400 	.word	0x48000400

080005a8 <SweepB>:
 * @param  sweep_to_left specifies the state of the sweep direction so it can sweep to right and
 * 		   to left in a correct manner.
 * @retval none.
 */
void SweepB(uint8_t *counter, uint8_t *adder, uint8_t *reverse,
		uint8_t *sweep_to_left) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	if (*sweep_to_left == 1) {
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d146      	bne.n	800064c <SweepB+0xa4>
		if (*counter <= 3) {
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d817      	bhi.n	80005f6 <SweepB+0x4e>
			ResetLED(GPIOB,
			GPIO_PIN_2 << *counter, GPIO_PIN_SET);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	2304      	movs	r3, #4
 80005ce:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4844      	ldr	r0, [pc, #272]	; (80006e8 <SweepB+0x140>)
 80005d8:	f7ff ff63 	bl	80004a2 <ResetLED>
			*counter += 1;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	701a      	strb	r2, [r3, #0]
			*adder += 1;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e026      	b.n	8000644 <SweepB+0x9c>
		} else if (*adder > 3 && *adder < 8) {
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d91b      	bls.n	8000636 <SweepB+0x8e>
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b07      	cmp	r3, #7
 8000604:	d817      	bhi.n	8000636 <SweepB+0x8e>
			ResetLED(GPIOB,
			GPIO_PIN_2 << *reverse, GPIO_PIN_RESET);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	2304      	movs	r3, #4
 800060e:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 8000610:	b29b      	uxth	r3, r3
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	4834      	ldr	r0, [pc, #208]	; (80006e8 <SweepB+0x140>)
 8000618:	f7ff ff43 	bl	80004a2 <ResetLED>
			*adder += 1;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	701a      	strb	r2, [r3, #0]
			*reverse += 1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e006      	b.n	8000644 <SweepB+0x9c>
		} else if (*adder == 8) {
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b08      	cmp	r3, #8
 800063c:	d102      	bne.n	8000644 <SweepB+0x9c>
			*sweep_to_left = 0;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f000 f947 	bl	80008d8 <HAL_Delay>
		} else if (*adder == 0) {
			*sweep_to_left = 1;
		}
		HAL_Delay(100);
	}
}
 800064a:	e049      	b.n	80006e0 <SweepB+0x138>
	} else if (*sweep_to_left == 0) {
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d145      	bne.n	80006e0 <SweepB+0x138>
		if (*counter > 0) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <SweepB+0xe4>
			*counter -= 1;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	701a      	strb	r2, [r3, #0]
			*adder -= 1;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	701a      	strb	r2, [r3, #0]
			GPIO_PIN_2 << *counter, GPIO_PIN_SET);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	2304      	movs	r3, #4
 800067c:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 800067e:	b29b      	uxth	r3, r3
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <SweepB+0x140>)
 8000686:	f7ff ff0c 	bl	80004a2 <ResetLED>
 800068a:	e026      	b.n	80006da <SweepB+0x132>
		} else if (*adder <= 4 && *adder > 0) {
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d81b      	bhi.n	80006cc <SweepB+0x124>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d017      	beq.n	80006cc <SweepB+0x124>
			*adder -= 1;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	701a      	strb	r2, [r3, #0]
			*reverse -= 1;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
			GPIO_PIN_2 << *reverse, GPIO_PIN_RESET);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	2304      	movs	r3, #4
 80006bc:	4093      	lsls	r3, r2
			ResetLED(GPIOB,
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <SweepB+0x140>)
 80006c6:	f7ff feec 	bl	80004a2 <ResetLED>
 80006ca:	e006      	b.n	80006da <SweepB+0x132>
		} else if (*adder == 0) {
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <SweepB+0x132>
			*sweep_to_left = 1;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006da:	2064      	movs	r0, #100	; 0x64
 80006dc:	f000 f8fc 	bl	80008d8 <HAL_Delay>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	48000400 	.word	0x48000400

080006ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f884 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007bc:	f7ff ffea 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f001 fbc3 	bl	8001f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ea:	f7ff fcf3 	bl	80001d4 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007fc:	08002008 	.word	0x08002008
  ldr r2, =_sbss
 8000800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000804:	2000002c 	.word	0x2000002c

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f931 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	200f      	movs	r0, #15
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff ff66 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f93b 	bl	8000ad2 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f911 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000028 	.word	0x20000028

080008c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000028 	.word	0x20000028

080008d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff ffee 	bl	80008c0 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffde 	bl	80008c0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff47 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff5c 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffb0 	bl	8000a40 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000af8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000afc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f001 b83a 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 816f 	beq.w	8000e06 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b28:	4bb5      	ldr	r3, [pc, #724]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d00c      	beq.n	8000b4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b34:	4bb2      	ldr	r3, [pc, #712]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d15c      	bne.n	8000bfa <HAL_RCC_OscConfig+0x10e>
 8000b40:	4baf      	ldr	r3, [pc, #700]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4c:	d155      	bne.n	8000bfa <HAL_RCC_OscConfig+0x10e>
 8000b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b5a:	fa93 f3a3 	rbit	r3, r3
 8000b5e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b66:	fab3 f383 	clz	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <HAL_RCC_OscConfig+0x94>
 8000b7a:	4ba1      	ldr	r3, [pc, #644]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	e015      	b.n	8000bac <HAL_RCC_OscConfig+0xc0>
 8000b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b9c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ba0:	fa93 f3a3 	rbit	r3, r3
 8000ba4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ba8:	4b95      	ldr	r3, [pc, #596]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000bb4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000bb8:	fa92 f2a2 	rbit	r2, r2
 8000bbc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000bc0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	f042 0220 	orr.w	r2, r2, #32
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	f002 021f 	and.w	r2, r2, #31
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 8111 	beq.w	8000e04 <HAL_RCC_OscConfig+0x318>
 8000be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000be6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8108 	bne.w	8000e04 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f000 bfc6 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0a:	d106      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12e>
 8000c0c:	4b7c      	ldr	r3, [pc, #496]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a7b      	ldr	r2, [pc, #492]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e036      	b.n	8000c88 <HAL_RCC_OscConfig+0x19c>
 8000c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x158>
 8000c2a:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a74      	ldr	r2, [pc, #464]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b72      	ldr	r3, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e021      	b.n	8000c88 <HAL_RCC_OscConfig+0x19c>
 8000c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x184>
 8000c56:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a69      	ldr	r2, [pc, #420]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b67      	ldr	r3, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a66      	ldr	r2, [pc, #408]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e00b      	b.n	8000c88 <HAL_RCC_OscConfig+0x19c>
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a62      	ldr	r2, [pc, #392]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d059      	beq.n	8000d4c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fe12 	bl	80008c0 <HAL_GetTick>
 8000c9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca0:	e00a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fe0d 	bl	80008c0 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d902      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f000 bf67 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 8000cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cbc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ccc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <HAL_RCC_OscConfig+0x1fe>
 8000ce4:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	e015      	b.n	8000d16 <HAL_RCC_OscConfig+0x22a>
 8000cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d12:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d1a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d22:	fa92 f2a2 	rbit	r2, r2
 8000d26:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000d2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	f042 0220 	orr.w	r2, r2, #32
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	f002 021f 	and.w	r2, r2, #31
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0ab      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1b6>
 8000d4a:	e05c      	b.n	8000e06 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fdb8 	bl	80008c0 <HAL_GetTick>
 8000d50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d54:	e00a      	b.n	8000d6c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d56:	f7ff fdb3 	bl	80008c0 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d902      	bls.n	8000d6c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f000 bf0d 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 8000d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000d80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d102      	bne.n	8000d9e <HAL_RCC_OscConfig+0x2b2>
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x2de>
 8000d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_RCC_OscConfig+0x314>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000dd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000dd6:	fa92 f2a2 	rbit	r2, r2
 8000dda:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000dde:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f042 0220 	orr.w	r2, r2, #32
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f002 021f 	and.w	r2, r2, #31
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1ab      	bne.n	8000d56 <HAL_RCC_OscConfig+0x26a>
 8000dfe:	e002      	b.n	8000e06 <HAL_RCC_OscConfig+0x31a>
 8000e00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 817f 	beq.w	800111a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e1c:	4ba7      	ldr	r3, [pc, #668]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e28:	4ba4      	ldr	r3, [pc, #656]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d173      	bne.n	8000f1c <HAL_RCC_OscConfig+0x430>
 8000e34:	4ba1      	ldr	r3, [pc, #644]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e40:	d16c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x430>
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000e54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x386>
 8000e6c:	4b93      	ldr	r3, [pc, #588]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e013      	b.n	8000e9a <HAL_RCC_OscConfig+0x3ae>
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e7c:	fa93 f3a3 	rbit	r3, r3
 8000e80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e96:	4b89      	ldr	r3, [pc, #548]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000ea0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ea4:	fa92 f2a2 	rbit	r2, r2
 8000ea8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000eac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f042 0220 	orr.w	r2, r2, #32
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	f002 021f 	and.w	r2, r2, #31
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00a      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x3f6>
 8000ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d002      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	f000 be52 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b76      	ldr	r3, [pc, #472]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	21f8      	movs	r1, #248	; 0xf8
 8000ef8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f00:	fa91 f1a1 	rbit	r1, r1
 8000f04:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f08:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f0c:	fab1 f181 	clz	r1, r1
 8000f10:	b2c9      	uxtb	r1, r1
 8000f12:	408b      	lsls	r3, r1
 8000f14:	4969      	ldr	r1, [pc, #420]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e0fe      	b.n	800111a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 8088 	beq.w	800103e <HAL_RCC_OscConfig+0x552>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000f40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	461a      	mov	r2, r3
 8000f56:	2301      	movs	r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fcb1 	bl	80008c0 <HAL_GetTick>
 8000f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	e00a      	b.n	8000f7a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fcac 	bl	80008c0 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d902      	bls.n	8000f7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f000 be06 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000f8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_OscConfig+0x4be>
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e013      	b.n	8000fd2 <HAL_RCC_OscConfig+0x4e6>
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fc2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000fd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000fe4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fe8:	fab2 f282 	clz	r2, r2
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	f042 0220 	orr.w	r2, r2, #32
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f002 021f 	and.w	r2, r2, #31
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0af      	beq.n	8000f64 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001010:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	21f8      	movs	r1, #248	; 0xf8
 800101a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001022:	fa91 f1a1 	rbit	r1, r1
 8001026:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800102a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800102e:	fab1 f181 	clz	r1, r1
 8001032:	b2c9      	uxtb	r1, r1
 8001034:	408b      	lsls	r3, r1
 8001036:	4921      	ldr	r1, [pc, #132]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
 800103c:	e06d      	b.n	800111a <HAL_RCC_OscConfig+0x62e>
 800103e:	2301      	movs	r3, #1
 8001040:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001050:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800105e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	461a      	mov	r2, r3
 8001066:	2300      	movs	r3, #0
 8001068:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fc29 	bl	80008c0 <HAL_GetTick>
 800106e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e00a      	b.n	800108a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fc24 	bl	80008c0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d902      	bls.n	800108a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	f000 bd7e 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800109c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5d4>
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <HAL_RCC_OscConfig+0x5d0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	e016      	b.n	80010e8 <HAL_RCC_OscConfig+0x5fc>
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010e4:	4bbf      	ldr	r3, [pc, #764]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	2202      	movs	r2, #2
 80010ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80010ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80010fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1ac      	bne.n	8001074 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800111e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8113 	beq.w	8001356 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001134:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d07c      	beq.n	800123a <HAL_RCC_OscConfig+0x74e>
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001152:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	4ba2      	ldr	r3, [pc, #648]	; (80013e8 <HAL_RCC_OscConfig+0x8fc>)
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	461a      	mov	r2, r3
 8001166:	2301      	movs	r3, #1
 8001168:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fba9 	bl	80008c0 <HAL_GetTick>
 800116e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e00a      	b.n	800118a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fba4 	bl	80008c0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d902      	bls.n	800118a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	f000 bcfe 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001194:	fa93 f2a3 	rbit	r2, r3
 8001198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ce:	2202      	movs	r2, #2
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	fa93 f2a3 	rbit	r2, r3
 80011e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 80011ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011f6:	2102      	movs	r1, #2
 80011f8:	6019      	str	r1, [r3, #0]
 80011fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f1a3 	rbit	r1, r3
 8001208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001210:	6019      	str	r1, [r3, #0]
  return result;
 8001212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001216:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d09d      	beq.n	8001174 <HAL_RCC_OscConfig+0x688>
 8001238:	e08d      	b.n	8001356 <HAL_RCC_OscConfig+0x86a>
 800123a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f2a3 	rbit	r2, r3
 8001254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001258:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800125c:	601a      	str	r2, [r3, #0]
  return result;
 800125e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001262:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001266:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x8fc>)
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	461a      	mov	r2, r3
 8001278:	2300      	movs	r3, #0
 800127a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb20 	bl	80008c0 <HAL_GetTick>
 8001280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff fb1b 	bl	80008c0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d902      	bls.n	800129c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	f000 bc75 	b.w	8001b86 <HAL_RCC_OscConfig+0x109a>
 800129c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012c8:	2202      	movs	r2, #2
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	fa93 f2a3 	rbit	r2, r3
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012ec:	2202      	movs	r2, #2
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fa93 f2a3 	rbit	r2, r3
 80012fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001302:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001306:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001310:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001314:	2102      	movs	r1, #2
 8001316:	6019      	str	r1, [r3, #0]
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f1a3 	rbit	r1, r3
 8001326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800132e:	6019      	str	r1, [r3, #0]
  return result;
 8001330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001334:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d197      	bne.n	8001286 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 81a5 	beq.w	80016b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x8f8>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x900>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d121      	bne.n	80013fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x900>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x900>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa7c 	bl	80008c0 <HAL_GetTick>
 80013c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e010      	b.n	80013f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fa77 	bl	80008c0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d908      	bls.n	80013f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e3d1      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	10908120 	.word	0x10908120
 80013ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b8d      	ldr	r3, [pc, #564]	; (8001628 <HAL_RCC_OscConfig+0xb3c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0e8      	beq.n	80013ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x92e>
 800140c:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a86      	ldr	r2, [pc, #536]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	e035      	b.n	8001486 <HAL_RCC_OscConfig+0x99a>
 800141a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x958>
 800142a:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6213      	str	r3, [r2, #32]
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a7c      	ldr	r2, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	e020      	b.n	8001486 <HAL_RCC_OscConfig+0x99a>
 8001444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x982>
 8001454:	4b75      	ldr	r3, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a74      	ldr	r2, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x99a>
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a6b      	ldr	r2, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8081 	beq.w	800159a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fa12 	bl	80008c0 <HAL_GetTick>
 800149c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fa0d 	bl	80008c0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e365      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014e6:	2202      	movs	r2, #2
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001500:	601a      	str	r2, [r3, #0]
  return result;
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800150a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0xa3a>
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	e013      	b.n	800154e <HAL_RCC_OscConfig+0xa62>
 8001526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001552:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001556:	2102      	movs	r1, #2
 8001558:	6011      	str	r1, [r2, #0]
 800155a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800155e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	fa92 f1a2 	rbit	r1, r2
 8001568:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800156c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001570:	6011      	str	r1, [r2, #0]
  return result;
 8001572:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001576:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	fab2 f282 	clz	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f002 021f 	and.w	r2, r2, #31
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d084      	beq.n	80014a2 <HAL_RCC_OscConfig+0x9b6>
 8001598:	e083      	b.n	80016a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff f991 	bl	80008c0 <HAL_GetTick>
 800159e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff f98c 	bl	80008c0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e2e4      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015c4:	2202      	movs	r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f2a3 	rbit	r2, r3
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001602:	601a      	str	r2, [r3, #0]
  return result;
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800160c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0xb44>
 8001622:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_RCC_OscConfig+0xb40>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	e017      	b.n	8001658 <HAL_RCC_OscConfig+0xb6c>
 8001628:	40007000 	.word	0x40007000
 800162c:	40021000 	.word	0x40021000
 8001630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001634:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001638:	2202      	movs	r2, #2
 800163a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f2a3 	rbit	r2, r3
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4bb3      	ldr	r3, [pc, #716]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800165c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001660:	2102      	movs	r1, #2
 8001662:	6011      	str	r1, [r2, #0]
 8001664:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001668:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	fa92 f1a2 	rbit	r1, r2
 8001672:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001676:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800167a:	6011      	str	r1, [r2, #0]
  return result;
 800167c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001680:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	fab2 f282 	clz	r2, r2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f002 021f 	and.w	r2, r2, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d180      	bne.n	80015a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016a2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016aa:	4b9e      	ldr	r3, [pc, #632]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a9d      	ldr	r2, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 80016b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 825e 	beq.w	8001b84 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b96      	ldr	r3, [pc, #600]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	f000 821f 	beq.w	8001b14 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	f040 8170 	bne.w	80019c8 <HAL_RCC_OscConfig+0xedc>
 80016e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800170c:	601a      	str	r2, [r3, #0]
  return result;
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001716:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001722:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	461a      	mov	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f8c7 	bl	80008c0 <HAL_GetTick>
 8001732:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	e009      	b.n	800174c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff f8c2 	bl	80008c0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e21c      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001770:	601a      	str	r2, [r3, #0]
  return result;
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800177a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0xcaa>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e027      	b.n	80017e6 <HAL_RCC_OscConfig+0xcfa>
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80017c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017dc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017f2:	6011      	str	r1, [r2, #0]
 80017f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	fa92 f1a2 	rbit	r1, r2
 8001802:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001806:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800180a:	6011      	str	r1, [r2, #0]
  return result;
 800180c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001810:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f002 021f 	and.w	r2, r2, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d182      	bne.n	8001738 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f023 020f 	bic.w	r2, r3, #15
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4937      	ldr	r1, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 8001848:	4313      	orrs	r3, r2
 800184a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a19      	ldr	r1, [r3, #32]
 8001860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001864:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	430b      	orrs	r3, r1
 800186e:	492d      	ldr	r1, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001878:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800187c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001886:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001898:	601a      	str	r2, [r3, #0]
  return result;
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	461a      	mov	r2, r3
 80018b6:	2301      	movs	r3, #1
 80018b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff f801 	bl	80008c0 <HAL_GetTick>
 80018be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c2:	e009      	b.n	80018d8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7fe fffc 	bl	80008c0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e156      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018fc:	601a      	str	r2, [r3, #0]
  return result;
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0xe3c>
 800191c:	4b01      	ldr	r3, [pc, #4]	; (8001924 <HAL_RCC_OscConfig+0xe38>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e02a      	b.n	8001978 <HAL_RCC_OscConfig+0xe8c>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001960:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b86      	ldr	r3, [pc, #536]	; (8001b90 <HAL_RCC_OscConfig+0x10a4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800197c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001980:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001984:	6011      	str	r1, [r2, #0]
 8001986:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800198a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	fa92 f1a2 	rbit	r1, r2
 8001994:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001998:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800199c:	6011      	str	r1, [r2, #0]
  return result;
 800199e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f43f af7f 	beq.w	80018c4 <HAL_RCC_OscConfig+0xdd8>
 80019c6:	e0dd      	b.n	8001b84 <HAL_RCC_OscConfig+0x1098>
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7fe ff57 	bl	80008c0 <HAL_GetTick>
 8001a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	e009      	b.n	8001a2c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe ff52 	bl	80008c0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0ac      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a50:	601a      	str	r2, [r3, #0]
  return result;
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_OscConfig+0xf8a>
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x10a4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e027      	b.n	8001ac6 <HAL_RCC_OscConfig+0xfda>
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x10a4>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ace:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad2:	6011      	str	r1, [r2, #0]
 8001ad4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ad8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fa92 f1a2 	rbit	r1, r2
 8001ae2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ae6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001aea:	6011      	str	r1, [r2, #0]
  return result;
 8001aec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001af0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d182      	bne.n	8001a18 <HAL_RCC_OscConfig+0xf2c>
 8001b12:	e037      	b.n	8001b84 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e02e      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_OscConfig+0x10a4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_RCC_OscConfig+0x10a4>)
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b3c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d117      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b54:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b6c:	f003 020f 	and.w	r2, r3, #15
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b09e      	sub	sp, #120	; 0x78
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e162      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b90      	ldr	r3, [pc, #576]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d910      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	498b      	ldr	r1, [pc, #556]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e14a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	497f      	ldr	r1, [pc, #508]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80dc 	beq.w	8001dc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d13c      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xf6>
 8001c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xa6>
 8001c34:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e00f      	b.n	8001c5a <HAL_RCC_ClockConfig+0xc6>
 8001c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	667b      	str	r3, [r7, #100]	; 0x64
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d17b      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0f3      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d13c      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x178>
 8001c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x128>
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_ClockConfig+0x148>
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd8:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ce4:	fa92 f2a2 	rbit	r2, r2
 8001ce8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d13a      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b2      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x1a0>
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e00d      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1bc>
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2202      	movs	r2, #2
 8001d52:	61ba      	str	r2, [r7, #24]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	fa92 f2a2 	rbit	r2, r2
 8001d5a:	617a      	str	r2, [r7, #20]
  return result;
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	fab2 f282 	clz	r2, r2
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f042 0220 	orr.w	r2, r2, #32
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f002 021f 	and.w	r2, r2, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e079      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f023 0203 	bic.w	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	491a      	ldr	r1, [pc, #104]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7fe fd96 	bl	80008c0 <HAL_GetTick>
 8001d94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f7fe fd92 	bl	80008c0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e061      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 020c 	and.w	r2, r3, #12
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1eb      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d214      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4906      	ldr	r1, [pc, #24]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e040      	b.n	8001e72 <HAL_RCC_ClockConfig+0x2de>
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_ClockConfig+0x2e8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	491a      	ldr	r1, [pc, #104]	; (8001e7c <HAL_RCC_ClockConfig+0x2e8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_ClockConfig+0x2e8>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <HAL_RCC_ClockConfig+0x2e8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e36:	f000 f829 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_ClockConfig+0x2e8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	22f0      	movs	r2, #240	; 0xf0
 8001e46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	40d3      	lsrs	r3, r2
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x2ec>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_RCC_ClockConfig+0x2f0>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RCC_ClockConfig+0x2f4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fce4 	bl	8000838 <HAL_InitTick>
  
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3778      	adds	r7, #120	; 0x78
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08001fd0 	.word	0x08001fd0
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x30>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eba:	e03f      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	e03f      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ec8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ecc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	607a      	str	r2, [r7, #4]
  return result;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	40d3      	lsrs	r3, r2
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	220f      	movs	r2, #15
 8001ef0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	60fa      	str	r2, [r7, #12]
  return result;
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e007      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	623b      	str	r3, [r7, #32]
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f3e:	623b      	str	r3, [r7, #32]
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	372c      	adds	r7, #44	; 0x2c
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	08001fe0 	.word	0x08001fe0
 8001f5c:	08001ff0 	.word	0x08001ff0

08001f60 <memset>:
 8001f60:	4402      	add	r2, r0
 8001f62:	4603      	mov	r3, r0
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d100      	bne.n	8001f6a <memset+0xa>
 8001f68:	4770      	bx	lr
 8001f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6e:	e7f9      	b.n	8001f64 <memset+0x4>

08001f70 <__libc_init_array>:
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	4d0d      	ldr	r5, [pc, #52]	; (8001fa8 <__libc_init_array+0x38>)
 8001f74:	4c0d      	ldr	r4, [pc, #52]	; (8001fac <__libc_init_array+0x3c>)
 8001f76:	1b64      	subs	r4, r4, r5
 8001f78:	10a4      	asrs	r4, r4, #2
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	42a6      	cmp	r6, r4
 8001f7e:	d109      	bne.n	8001f94 <__libc_init_array+0x24>
 8001f80:	4d0b      	ldr	r5, [pc, #44]	; (8001fb0 <__libc_init_array+0x40>)
 8001f82:	4c0c      	ldr	r4, [pc, #48]	; (8001fb4 <__libc_init_array+0x44>)
 8001f84:	f000 f818 	bl	8001fb8 <_init>
 8001f88:	1b64      	subs	r4, r4, r5
 8001f8a:	10a4      	asrs	r4, r4, #2
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	42a6      	cmp	r6, r4
 8001f90:	d105      	bne.n	8001f9e <__libc_init_array+0x2e>
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f98:	4798      	blx	r3
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	e7ee      	b.n	8001f7c <__libc_init_array+0xc>
 8001f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fa2:	4798      	blx	r3
 8001fa4:	3601      	adds	r6, #1
 8001fa6:	e7f2      	b.n	8001f8e <__libc_init_array+0x1e>
 8001fa8:	08002000 	.word	0x08002000
 8001fac:	08002000 	.word	0x08002000
 8001fb0:	08002000 	.word	0x08002000
 8001fb4:	08002004 	.word	0x08002004

08001fb8 <_init>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	bf00      	nop
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr

08001fc4 <_fini>:
 8001fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc6:	bf00      	nop
 8001fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fca:	bc08      	pop	{r3}
 8001fcc:	469e      	mov	lr, r3
 8001fce:	4770      	bx	lr
