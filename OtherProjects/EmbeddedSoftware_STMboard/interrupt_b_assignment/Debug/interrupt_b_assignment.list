
interrupt_b_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003414  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e0  080035e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035e0  080035e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e0  080035e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000972c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015c2  00000000  00000000  000297ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e8  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000054f  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ed0c  00000000  00000000  0002b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009aa3  00000000  00000000  0004a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc49b  00000000  00000000  00054156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001af8  00000000  00000000  001105f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001120ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003590 	.word	0x08003590

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003590 	.word	0x08003590

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800026a:	f000 fdab 	bl	8000dc4 <HAL_Init>

	/* USER CODE BEGIN Init */
	LEDsetup();
 800026e:	f000 f92f 	bl	80004d0 <LEDsetup>
	ButtonSetup();
 8000272:	f000 f96d 	bl	8000550 <ButtonSetup>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000276:	f000 f837 	bl	80002e8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	SysTick_Init();
 800027a:	f000 f9a1 	bl	80005c0 <SysTick_Init>

	SysConfig_Enabler();
 800027e:	f000 f9bf 	bl	8000600 <SysConfig_Enabler>
	EXTI_Config();
 8000282:	f000 f9cd 	bl	8000620 <EXTI_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000286:	f000 f8bd 	bl	8000404 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800028a:	f000 f88b 	bl	80003a4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t sweep_a_to_left = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	717b      	strb	r3, [r7, #5]
	uint8_t sweep_b_to_left = 1;
 8000292:	2301      	movs	r3, #1
 8000294:	713b      	strb	r3, [r7, #4]

	uint8_t sweep_a_pos = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	70fb      	strb	r3, [r7, #3]

	uint8_t sweep_b_pos = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	70bb      	strb	r3, [r7, #2]
	uint8_t sweep_b_reverse = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	707b      	strb	r3, [r7, #1]
	uint8_t sweep_b_count = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	703b      	strb	r3, [r7, #0]

	uint16_t ALL_LEDS = (GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 80002a6:	233e      	movs	r3, #62	; 0x3e
 80002a8:	80fb      	strh	r3, [r7, #6]
			| GPIO_PIN_5);

	ResetLED(GPIOB, ALL_LEDS);
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	4619      	mov	r1, r3
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <main+0x7c>)
 80002b0:	f000 fb8c 	bl	80009cc <ResetLED>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (sweep_flag == 0) {
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0x80>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d106      	bne.n	80002ca <main+0x66>
			SweepA(&sweep_a_pos, &sweep_a_to_left);
 80002bc:	1d7a      	adds	r2, r7, #5
 80002be:	1cfb      	adds	r3, r7, #3
 80002c0:	4611      	mov	r1, r2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fbaa 	bl	8000a1c <SweepA>
 80002c8:	e7f4      	b.n	80002b4 <main+0x50>
		} else if (sweep_flag == 1) {
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <main+0x80>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d1f0      	bne.n	80002b4 <main+0x50>
			SweepB(&sweep_b_pos, &sweep_b_reverse, &sweep_b_count,
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	463a      	mov	r2, r7
 80002d6:	1c79      	adds	r1, r7, #1
 80002d8:	1cb8      	adds	r0, r7, #2
 80002da:	f000 fbfb 	bl	8000ad4 <SweepB>
		if (sweep_flag == 0) {
 80002de:	e7e9      	b.n	80002b4 <main+0x50>
 80002e0:	48000400 	.word	0x48000400
 80002e4:	200000d0 	.word	0x200000d0

080002e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b0a6      	sub	sp, #152	; 0x98
 80002ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 f91d 	bl	8003536 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2258      	movs	r2, #88	; 0x58
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 f90f 	bl	8003536 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	2310      	movs	r3, #16
 8000322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000340:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000344:	4618      	mov	r0, r3
 8000346:	f001 f817 	bl	8001378 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x6c>
		Error_Handler();
 8000350:	f000 fc6c 	bl	8000c2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000364:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800036a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f002 f855 	bl	8002420 <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x98>
		Error_Handler();
 800037c:	f000 fc56 	bl	8000c2c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000380:	2302      	movs	r3, #2
 8000382:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fa7e 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xb2>
		Error_Handler();
 8000396:	f000 fc49 	bl	8000c2c <Error_Handler>
	}
}
 800039a:	bf00      	nop
 800039c:	3798      	adds	r7, #152	; 0x98
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	f002 fc6e 	bl	8002cc8 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80003f2:	f000 fc1b 	bl	8000c2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2120      	movs	r1, #32
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f000 ff61 	bl	8001348 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000490:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <MX_GPIO_Init+0xc8>)
 800049e:	f000 fdc9 	bl	8001034 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80004a2:	2320      	movs	r3, #32
 80004a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f000 fdba 	bl	8001034 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000800 	.word	0x48000800

080004d0 <LEDsetup>:
 * @brief LED setup function.
 * 
 * @note This is a GPIO setup function for the LEDs.
 * 
 */
void LEDsetup() {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <LEDsetup+0x78>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <LEDsetup+0x78>)
 80004da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004de:	6153      	str	r3, [r2, #20]

	//resets all LEDs' pin MODE.
	GPIOB->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <LEDsetup+0x7c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <LEDsetup+0x7c>)
 80004e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80004ea:	f023 030c 	bic.w	r3, r3, #12
 80004ee:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
	//resets all LEDs' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_3
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <LEDsetup+0x7c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a15      	ldr	r2, [pc, #84]	; (800054c <LEDsetup+0x7c>)
 80004f6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80004fa:	6053      	str	r3, [r2, #4]
			| GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);
	//resets all LEDs' pin SPEED.
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR2
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <LEDsetup+0x7c>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <LEDsetup+0x7c>)
 8000502:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000506:	f023 030c 	bic.w	r3, r3, #12
 800050a:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4
			| GPIO_OSPEEDER_OSPEEDR5);
	//sets all LEDs' pin MODE to 01 as an output.
	GPIOB->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <LEDsetup+0x7c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <LEDsetup+0x7c>)
 8000512:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
	//sets all LEDs' pin SPEED to medium.
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR1_0 | GPIO_OSPEEDER_OSPEEDR2_0
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <LEDsetup+0x7c>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LEDsetup+0x7c>)
 8000522:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3_0 | GPIO_OSPEEDER_OSPEEDR4_0
			| GPIO_OSPEEDER_OSPEEDR5_0);
	//resets all LEDs' PUPD register.
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR2 | GPIO_PUPDR_PUPDR3
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <LEDsetup+0x7c>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <LEDsetup+0x7c>)
 8000532:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000536:	f023 030c 	bic.w	r3, r3, #12
 800053a:	60d3      	str	r3, [r2, #12]
			| GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR5);
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	48000400 	.word	0x48000400

08000550 <ButtonSetup>:
 * @brief Button setup function.
 * 
 * @note This is a GPIO setup function for the input buttons.
 * 
 */
void ButtonSetup() {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <ButtonSetup+0x6c>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a18      	ldr	r2, [pc, #96]	; (80005bc <ButtonSetup+0x6c>)
 800055a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055e:	6153      	str	r3, [r2, #20]

	//resets both button pins' MODE to 00 as an input.
	GPIOA->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 8000560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800056e:	6013      	str	r3, [r2, #0]
	//resets both button pins' SPEED.
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9);
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800057e:	6093      	str	r3, [r2, #8]
	//resets both button input PUPD registers.
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800058e:	60d3      	str	r3, [r2, #12]
	//sets both button pins' SPEED to 01 (medium).
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR9_0);
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800059e:	6093      	str	r3, [r2, #8]
	//sets both button input PUPD registers to 01 (pull-down).
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR8_1 | GPIO_PUPDR_PUPDR9_1);
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <SysTick_Init>:
 * 
 * @note This is a SysTick function to initialize the timer register of the ARM4
 * 		 controller of the Nucleo board.
 * 
 */
void SysTick_Init() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//resets SysTick control pin to 0.
	SysTick->CTRL = ~SysTick_CTRL_ENABLE_Msk;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SysTick_Init+0x3c>)
 80005c6:	f06f 0201 	mvn.w	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
	//sets up the reload register.
	SysTick->LOAD = 16000 - 1;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SysTick_Init+0x3c>)
 80005ce:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005d2:	605a      	str	r2, [r3, #4]
	//sets the interrupt priority of SysTick to the least urgent.
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 80005d4:	210f      	movs	r1, #15
 80005d6:	f04f 30ff 	mov.w	r0, #4294967295
 80005da:	f7ff fe19 	bl	8000210 <__NVIC_SetPriority>
	//resets the SysTick counter value.
	SysTick->VAL &= SysTick_VAL_CURRENT_Msk;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <SysTick_Init+0x3c>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	4a06      	ldr	r2, [pc, #24]	; (80005fc <SysTick_Init+0x3c>)
 80005e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80005e8:	6093      	str	r3, [r2, #8]
	//sets the SysTick control pin to use the clock source, the interrupt, and enables both of them.
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SysTick_Init+0x3c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <SysTick_Init+0x3c>)
 80005f0:	f043 0307 	orr.w	r3, r3, #7
 80005f4:	6013      	str	r3, [r2, #0]
			| SysTick_CTRL_ENABLE_Msk);
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	e000e010 	.word	0xe000e010

08000600 <SysConfig_Enabler>:
 * 
 * @note This is a one line function to enable the SYSCFG register for the external
 *       interrupt.
 * 
 */
void SysConfig_Enabler() {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <SysConfig_Enabler+0x1c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <SysConfig_Enabler+0x1c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6193      	str	r3, [r2, #24]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <EXTI_Config>:
 * @note This function is created to setup the eternal interrupt line register. The
 *       line number that is being used for this system is line number 8 & 9, which
 *       are included in the third EXTICR group regirter line.
 * 
 */
void EXTI_Config() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	//reset the External interrupt's configurator register group per line number.
	SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI8 | SYSCFG_EXTICR3_EXTI9);
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <EXTI_Config+0x5c>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <EXTI_Config+0x5c>)
 800062a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800062e:	6113      	str	r3, [r2, #16]
	//set the necessary EXTICR line using the GPIO port name as position.
	SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA | SYSCFG_EXTICR3_EXTI9_PA);
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <EXTI_Config+0x5c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <EXTI_Config+0x5c>)
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	6113      	str	r3, [r2, #16]

	//reset the trigger.
	EXTI->FTSR &= ~(EXTI_FTSR_TR8 | EXTI_FTSR_TR9);
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <EXTI_Config+0x60>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <EXTI_Config+0x60>)
 800063e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000642:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(EXTI_RTSR_TR8 | EXTI_RTSR_TR9);
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <EXTI_Config+0x60>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <EXTI_Config+0x60>)
 800064a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800064e:	6093      	str	r3, [r2, #8]

	//set the necessary trigger.
	EXTI->RTSR |= (EXTI_RTSR_TR8 | EXTI_RTSR_TR9);
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <EXTI_Config+0x60>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <EXTI_Config+0x60>)
 8000656:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800065a:	6093      	str	r3, [r2, #8]

	//mask the EXTI line.
	EXTI->IMR |= (EXTI_IMR_MR8 | EXTI_IMR_MR9);
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <EXTI_Config+0x60>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <EXTI_Config+0x60>)
 8000662:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000666:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 8000668:	2100      	movs	r1, #0
 800066a:	2017      	movs	r0, #23
 800066c:	f7ff fdd0 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000670:	2017      	movs	r0, #23
 8000672:	f7ff fdaf 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40010000 	.word	0x40010000
 8000680:	40010400 	.word	0x40010400

08000684 <SysTick_Handler>:
 * @brief SysTick Handler function.
 * 
 * @note This function is created to handle the interrupt tick from the SysTick.
 * 
 */
void SysTick_Handler(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	millis_counter++;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SysTick_Handler+0x18>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a03      	ldr	r2, [pc, #12]	; (800069c <SysTick_Handler+0x18>)
 8000690:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	200000b0 	.word	0x200000b0

080006a0 <millis>:
 * @note This one line function is created to get the volatile value of the SysTick
 *       interrupt.
 * 
 * @return uint32_t the millisecond value from the counter tick.
 */
uint32_t millis(void) {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	return millis_counter;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <millis+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200000b0 	.word	0x200000b0

080006b8 <ResetInterrupt1>:
 * @brief Interrupt 1 timer reset.
 * 
 * @note reset the counter timer of the duration, rising, and falling trigger to 0.
 * 
 */
void ResetInterrupt1() {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	interrupt_1_duration = 0;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <ResetInterrupt1+0x20>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
	btn_1_rising_start = 0;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <ResetInterrupt1+0x24>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
	btn_1_falling_start = 0;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <ResetInterrupt1+0x28>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	200000c0 	.word	0x200000c0
 80006e0:	200000c4 	.word	0x200000c4

080006e4 <ResetInterrupt2>:
 * @brief Interrupt 2 timer reset.
 * 
 * @note reset the counter timer of the duration, rising, and falling trigger to 0.
 * 
 */
void ResetInterrupt2() {
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	interrupt_2_duration = 0;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <ResetInterrupt2+0x20>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	btn_2_rising_start = 0;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ResetInterrupt2+0x24>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
	btn_2_falling_start = 0;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <ResetInterrupt2+0x28>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000bc 	.word	0x200000bc
 8000708:	200000c8 	.word	0x200000c8
 800070c:	200000cc 	.word	0x200000cc

08000710 <EXTI9_5_IRQHandler>:
 * @brief EXTI 5 to 9 Handler.
 * 
 * @note This function is an interrupt handler for the EXTI line pin 5 until 9.
 * 
 */
void EXTI9_5_IRQHandler(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	if ((EXTI->PR & EXTI_PR_PR8)) {
 8000714:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071c:	2b00      	cmp	r3, #0
 800071e:	d047      	beq.n	80007b0 <EXTI9_5_IRQHandler+0xa0>
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f000 f936 	bl	8000998 <ButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d111      	bne.n	8000756 <EXTI9_5_IRQHandler+0x46>
			btn_1_rising_start = millis();
 8000732:	f7ff ffb5 	bl	80006a0 <millis>
 8000736:	4603      	mov	r3, r0
 8000738:	4a46      	ldr	r2, [pc, #280]	; (8000854 <EXTI9_5_IRQHandler+0x144>)
 800073a:	6013      	str	r3, [r2, #0]
			EXTI->RTSR &= ~EXTI_RTSR_TR8;
 800073c:	4b44      	ldr	r3, [pc, #272]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	4a43      	ldr	r2, [pc, #268]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000746:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= EXTI_FTSR_TR8;
 8000748:	4b41      	ldr	r3, [pc, #260]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a40      	ldr	r2, [pc, #256]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800074e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000752:	60d3      	str	r3, [r2, #12]
 8000754:	e026      	b.n	80007a4 <EXTI9_5_IRQHandler+0x94>
		} else {
			btn_1_falling_start = millis();
 8000756:	f7ff ffa3 	bl	80006a0 <millis>
 800075a:	4603      	mov	r3, r0
 800075c:	4a3e      	ldr	r2, [pc, #248]	; (8000858 <EXTI9_5_IRQHandler+0x148>)
 800075e:	6013      	str	r3, [r2, #0]
			EXTI->FTSR &= ~EXTI_FTSR_TR8;
 8000760:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800076a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= EXTI_RTSR_TR8;
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a37      	ldr	r2, [pc, #220]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6093      	str	r3, [r2, #8]

			if (btn_1_falling_start > btn_1_rising_start) {
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <EXTI9_5_IRQHandler+0x148>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <EXTI9_5_IRQHandler+0x144>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d907      	bls.n	8000794 <EXTI9_5_IRQHandler+0x84>
				interrupt_1_duration = btn_1_falling_start - btn_1_rising_start;
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <EXTI9_5_IRQHandler+0x148>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <EXTI9_5_IRQHandler+0x144>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <EXTI9_5_IRQHandler+0x14c>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e001      	b.n	8000798 <EXTI9_5_IRQHandler+0x88>
			} else {
				ResetInterrupt1();
 8000794:	f7ff ff90 	bl	80006b8 <ResetInterrupt1>
			}

			if ((interrupt_1_duration) >= MIN_SHORT_DELAY) {
 8000798:	4b30      	ldr	r3, [pc, #192]	; (800085c <EXTI9_5_IRQHandler+0x14c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b13      	cmp	r3, #19
 800079e:	d901      	bls.n	80007a4 <EXTI9_5_IRQHandler+0x94>
				Button_1_Interrupt_Handler();
 80007a0:	f000 f864 	bl	800086c <Button_1_Interrupt_Handler>
			}
		}

		EXTI->PR |= EXTI_PR_PR8; //reset the pending register.
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a29      	ldr	r2, [pc, #164]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	6153      	str	r3, [r2, #20]
	}

	if ((EXTI->PR & EXTI_PR_PR9)) {
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d047      	beq.n	800084c <EXTI9_5_IRQHandler+0x13c>
		if (ButtonPressed(GPIOA, GPIO_PIN_9) == SET) {
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 f8e8 	bl	8000998 <ButtonPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d111      	bne.n	80007f2 <EXTI9_5_IRQHandler+0xe2>
			btn_2_rising_start = millis();
 80007ce:	f7ff ff67 	bl	80006a0 <millis>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <EXTI9_5_IRQHandler+0x150>)
 80007d6:	6013      	str	r3, [r2, #0]
			EXTI->RTSR &= ~EXTI_RTSR_TR9;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007e2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= EXTI_FTSR_TR9;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	60d3      	str	r3, [r2, #12]
 80007f0:	e026      	b.n	8000840 <EXTI9_5_IRQHandler+0x130>
		} else {
			btn_2_falling_start = millis();
 80007f2:	f7ff ff55 	bl	80006a0 <millis>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <EXTI9_5_IRQHandler+0x154>)
 80007fa:	6013      	str	r3, [r2, #0]
			EXTI->FTSR &= ~EXTI_FTSR_TR9;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000802:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000806:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= EXTI_RTSR_TR9;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6093      	str	r3, [r2, #8]

			if (btn_2_falling_start > btn_2_rising_start) {
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <EXTI9_5_IRQHandler+0x154>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <EXTI9_5_IRQHandler+0x150>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d907      	bls.n	8000830 <EXTI9_5_IRQHandler+0x120>
				interrupt_2_duration = btn_2_falling_start - btn_2_rising_start;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <EXTI9_5_IRQHandler+0x154>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <EXTI9_5_IRQHandler+0x150>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <EXTI9_5_IRQHandler+0x158>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e001      	b.n	8000834 <EXTI9_5_IRQHandler+0x124>
			} else {
				ResetInterrupt2();
 8000830:	f7ff ff58 	bl	80006e4 <ResetInterrupt2>
			}

			if ((interrupt_2_duration) >= MIN_SHORT_DELAY) {
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <EXTI9_5_IRQHandler+0x158>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b13      	cmp	r3, #19
 800083a:	d901      	bls.n	8000840 <EXTI9_5_IRQHandler+0x130>
				Button_2_Interrupt_Handler();
 800083c:	f000 f864 	bl	8000908 <Button_2_Interrupt_Handler>
			}
		}

		EXTI->PR |= EXTI_PR_PR9; //reset the pending register.
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a02      	ldr	r2, [pc, #8]	; (8000850 <EXTI9_5_IRQHandler+0x140>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084a:	6153      	str	r3, [r2, #20]
	}
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010400 	.word	0x40010400
 8000854:	200000c0 	.word	0x200000c0
 8000858:	200000c4 	.word	0x200000c4
 800085c:	200000b8 	.word	0x200000b8
 8000860:	200000c8 	.word	0x200000c8
 8000864:	200000cc 	.word	0x200000cc
 8000868:	200000bc 	.word	0x200000bc

0800086c <Button_1_Interrupt_Handler>:
 * @note This function reads the interrupt signal from the first button and switch the
 *       first LED state that was designed with an enum, based on the time length of the
 * 		 button's time length.
 * 
 */
void Button_1_Interrupt_Handler(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch (single_led_state) {
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b02      	cmp	r3, #2
 8000878:	d02a      	beq.n	80008d0 <Button_1_Interrupt_Handler+0x64>
 800087a:	2b02      	cmp	r3, #2
 800087c:	dc3a      	bgt.n	80008f4 <Button_1_Interrupt_Handler+0x88>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <Button_1_Interrupt_Handler+0x1c>
 8000882:	2b01      	cmp	r3, #1
 8000884:	d012      	beq.n	80008ac <Button_1_Interrupt_Handler+0x40>
 8000886:	e035      	b.n	80008f4 <Button_1_Interrupt_Handler+0x88>
	case LED_OFF:
		if (interrupt_1_duration <= MAX_SHORT_DELAY) {
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <Button_1_Interrupt_Handler+0x94>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000890:	d808      	bhi.n	80008a4 <Button_1_Interrupt_Handler+0x38>
			SwitchLED(GPIOB, GPIO_PIN_1, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2102      	movs	r1, #2
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <Button_1_Interrupt_Handler+0x98>)
 8000898:	f000 f8a7 	bl	80009ea <SwitchLED>
			single_led_state = LED_ON_SHORT_PRESS;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			single_led_state = LED_OFF;
		}
		break;
 80008a2:	e027      	b.n	80008f4 <Button_1_Interrupt_Handler+0x88>
			single_led_state = LED_OFF;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
		break;
 80008aa:	e023      	b.n	80008f4 <Button_1_Interrupt_Handler+0x88>
	case LED_ON_SHORT_PRESS:
		if (interrupt_1_duration > MAX_SHORT_DELAY) {
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <Button_1_Interrupt_Handler+0x94>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008b4:	d908      	bls.n	80008c8 <Button_1_Interrupt_Handler+0x5c>
			SwitchLED(GPIOB, GPIO_PIN_1, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2102      	movs	r1, #2
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <Button_1_Interrupt_Handler+0x98>)
 80008bc:	f000 f895 	bl	80009ea <SwitchLED>
			single_led_state = LED_OFF_LONG_PRESS;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			single_led_state = LED_ON_SHORT_PRESS;
		}
		break;
 80008c6:	e015      	b.n	80008f4 <Button_1_Interrupt_Handler+0x88>
			single_led_state = LED_ON_SHORT_PRESS;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
		break;
 80008ce:	e011      	b.n	80008f4 <Button_1_Interrupt_Handler+0x88>
	case LED_OFF_LONG_PRESS:
		if (interrupt_1_duration <= MAX_SHORT_DELAY) {
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <Button_1_Interrupt_Handler+0x94>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008d8:	d808      	bhi.n	80008ec <Button_1_Interrupt_Handler+0x80>
			SwitchLED(GPIOB, GPIO_PIN_1, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2102      	movs	r1, #2
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <Button_1_Interrupt_Handler+0x98>)
 80008e0:	f000 f883 	bl	80009ea <SwitchLED>
			single_led_state = LED_ON_SHORT_PRESS;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			single_led_state = LED_OFF_LONG_PRESS;
		}
		break;
 80008ea:	e002      	b.n	80008f2 <Button_1_Interrupt_Handler+0x86>
			single_led_state = LED_OFF_LONG_PRESS;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <Button_1_Interrupt_Handler+0x90>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	bf00      	nop
	}
	ResetInterrupt1();
 80008f4:	f7ff fee0 	bl	80006b8 <ResetInterrupt1>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000d4 	.word	0x200000d4
 8000900:	200000b8 	.word	0x200000b8
 8000904:	48000400 	.word	0x48000400

08000908 <Button_2_Interrupt_Handler>:
 * @note This function reads the interrupt signal from the second button and switch the
 *       second LED state that was designed with an enum, based on the time length of the
 * 		 button's time length.
 * 
 */
void Button_2_Interrupt_Handler(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	switch (sweep_state) {
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d026      	beq.n	8000964 <Button_2_Interrupt_Handler+0x5c>
 8000916:	2b02      	cmp	r3, #2
 8000918:	dc34      	bgt.n	8000984 <Button_2_Interrupt_Handler+0x7c>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <Button_2_Interrupt_Handler+0x1c>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d010      	beq.n	8000944 <Button_2_Interrupt_Handler+0x3c>
 8000922:	e02f      	b.n	8000984 <Button_2_Interrupt_Handler+0x7c>
	case LED_OFF:
		if (interrupt_2_duration > MAX_SHORT_DELAY) {
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <Button_2_Interrupt_Handler+0x88>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800092c:	d906      	bls.n	800093c <Button_2_Interrupt_Handler+0x34>
			sweep_state = SWEEP_A;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
			sweep_flag = 0;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <Button_2_Interrupt_Handler+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
		} else {
			//do not change state.
			sweep_state = LED_OFF;
		}
		break;
 800093a:	e023      	b.n	8000984 <Button_2_Interrupt_Handler+0x7c>
			sweep_state = LED_OFF;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
		break;
 8000942:	e01f      	b.n	8000984 <Button_2_Interrupt_Handler+0x7c>
	case SWEEP_A:
		if (interrupt_2_duration <= MAX_SHORT_DELAY) {
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <Button_2_Interrupt_Handler+0x88>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800094c:	d806      	bhi.n	800095c <Button_2_Interrupt_Handler+0x54>
			sweep_state = SWEEP_B;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 8000950:	2202      	movs	r2, #2
 8000952:	701a      	strb	r2, [r3, #0]
			sweep_flag = 1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <Button_2_Interrupt_Handler+0x8c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
		} else {
			//do not change state.
			sweep_state = SWEEP_A;
		}
		break;
 800095a:	e013      	b.n	8000984 <Button_2_Interrupt_Handler+0x7c>
			sweep_state = SWEEP_A;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
		break;
 8000962:	e00f      	b.n	8000984 <Button_2_Interrupt_Handler+0x7c>
	case SWEEP_B:
		if (interrupt_2_duration > MAX_SHORT_DELAY) {
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <Button_2_Interrupt_Handler+0x88>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800096c:	d906      	bls.n	800097c <Button_2_Interrupt_Handler+0x74>
			sweep_state = SWEEP_A;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
			sweep_flag = 0;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <Button_2_Interrupt_Handler+0x8c>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
		} else {
			//do not change state.
			sweep_state = SWEEP_B;
		}
		break;
 800097a:	e002      	b.n	8000982 <Button_2_Interrupt_Handler+0x7a>
			sweep_state = SWEEP_B;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <Button_2_Interrupt_Handler+0x84>)
 800097e:	2202      	movs	r2, #2
 8000980:	701a      	strb	r2, [r3, #0]
		break;
 8000982:	bf00      	nop
	}
	ResetInterrupt2();
 8000984:	f7ff feae 	bl	80006e4 <ResetInterrupt2>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000d5 	.word	0x200000d5
 8000990:	200000bc 	.word	0x200000bc
 8000994:	200000d0 	.word	0x200000d0

08000998 <ButtonPressed>:
 *
 * @param  PORT is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  PIN_POS specifies the port bit to be written.
 * @retval uint16_t 0 (pressed) or 1 (released).
 */
uint16_t ButtonPressed(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
	uint16_t bitState = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	81fb      	strh	r3, [r7, #14]
	if ((PORT->IDR & PIN_POS) != (uint32_t) RESET) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691a      	ldr	r2, [r3, #16]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <ButtonPressed+0x22>
		bitState = SET;
 80009b4:	2301      	movs	r3, #1
 80009b6:	81fb      	strh	r3, [r7, #14]
 80009b8:	e001      	b.n	80009be <ButtonPressed+0x26>
	} else {
		bitState = RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	81fb      	strh	r3, [r7, #14]
	}
	return bitState;
 80009be:	89fb      	ldrh	r3, [r7, #14]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <ResetLED>:
 * @note This function is witten to reset the chosen LED pin on a chosen port.
 * 
 * @param PORT the GPIO port address of the LED.
 * @param PIN_POS The pin number of the LED.
 */
void ResetLED(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
	PORT->BRR = (uint32_t) PIN_POS;
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <SwitchLED>:
 * 
 * @param PORT The GPIO port address of the LED.
 * @param PIN_POS The pin number of the LED.
 * @param PIN_STATE The desired state for the LED.
 */
void SwitchLED(GPIO_TypeDef *PORT, uint16_t PIN_POS, uint8_t PIN_STATE) {
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	707b      	strb	r3, [r7, #1]
	if (PIN_STATE != RESET) {
 80009fa:	787b      	ldrb	r3, [r7, #1]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <SwitchLED+0x1e>
		PORT->BSRR = (uint32_t) PIN_POS;
 8000a00:	887a      	ldrh	r2, [r7, #2]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	619a      	str	r2, [r3, #24]
	} else {
		PORT->BRR = (uint32_t) PIN_POS;
	}
}
 8000a06:	e002      	b.n	8000a0e <SwitchLED+0x24>
		PORT->BRR = (uint32_t) PIN_POS;
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <SweepA>:
 * @param position The number to indicate which sweep position that the row
 * 				   has currently.
 * @param sweep_to_left A boolean unsigned integer to tell which direction
 * 						that the sweep is going.
 */
void SweepA(uint8_t *position, uint8_t *sweep_to_left) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	uint32_t current_millis = millis();
 8000a26:	f7ff fe3b 	bl	80006a0 <millis>
 8000a2a:	60f8      	str	r0, [r7, #12]
	if (current_millis - sweep_start_millis >= SWEEP_DELAY) {
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <SweepA+0xb0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b31      	cmp	r3, #49	; 0x31
 8000a36:	d945      	bls.n	8000ac4 <SweepA+0xa8>
		sweep_start_millis = current_millis;
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <SweepA+0xb0>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6013      	str	r3, [r2, #0]
		SwitchLED(GPIOB, (GPIO_PIN_2 << *position), RESET);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2304      	movs	r3, #4
 8000a46:	4093      	lsls	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <SweepA+0xb4>)
 8000a50:	f7ff ffcb 	bl	80009ea <SwitchLED>
		if (*sweep_to_left == 1) {
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d112      	bne.n	8000a82 <SweepA+0x66>
			if (*position < 3) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d806      	bhi.n	8000a72 <SweepA+0x56>
				*position += 1;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e01d      	b.n	8000aae <SweepA+0x92>
			} else if (*position == 3) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d119      	bne.n	8000aae <SweepA+0x92>
				*sweep_to_left = 0;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e015      	b.n	8000aae <SweepA+0x92>
			}
		} else if (*sweep_to_left == 0) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d111      	bne.n	8000aae <SweepA+0x92>
			if (*position > 0) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <SweepA+0x84>
				*position -= 1;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e006      	b.n	8000aae <SweepA+0x92>
			} else if (*position == 0) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <SweepA+0x92>
				*sweep_to_left = 1;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
			}
		}
		SwitchLED(GPIOB, (GPIO_PIN_2 << *position), SET);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <SweepA+0xb4>)
 8000ac0:	f7ff ff93 	bl	80009ea <SwitchLED>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000b4 	.word	0x200000b4
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <SweepB>:
 * @param counter The value to count up and down the sweep process.
 * @param sweep_to_left A boolean unsigned integer to tell which direction
 * 						that the sweep is going.
 */
void SweepB(uint8_t *position, uint8_t *reverse, uint8_t *counter,
		uint8_t *sweep_to_left) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
	uint32_t current_millis = millis();
 8000ae2:	f7ff fddd 	bl	80006a0 <millis>
 8000ae6:	6178      	str	r0, [r7, #20]
	if (current_millis - sweep_start_millis >= SWEEP_DELAY) {
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	; (8000c24 <SweepB+0x150>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2b31      	cmp	r3, #49	; 0x31
 8000af2:	f240 8093 	bls.w	8000c1c <SweepB+0x148>
		sweep_start_millis = current_millis;
 8000af6:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <SweepB+0x150>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	6013      	str	r3, [r2, #0]
		if (*sweep_to_left == 1) {
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d143      	bne.n	8000b8c <SweepB+0xb8>
			if (*position <= 3) {
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d817      	bhi.n	8000b3c <SweepB+0x68>
				SwitchLED(GPIOB, (GPIO_PIN_2 << *position), SET);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	2304      	movs	r3, #4
 8000b14:	4093      	lsls	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4842      	ldr	r0, [pc, #264]	; (8000c28 <SweepB+0x154>)
 8000b1e:	f7ff ff64 	bl	80009ea <SwitchLED>
				*position += 1;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	701a      	strb	r2, [r3, #0]
				*counter += 1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	701a      	strb	r2, [r3, #0]
			} else if (*counter == 0) {
				*sweep_to_left = 1;
			}
		}
	}
}
 8000b3a:	e06f      	b.n	8000c1c <SweepB+0x148>
			} else if ((*counter > 3) && (*counter < 8)) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d91b      	bls.n	8000b7c <SweepB+0xa8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d817      	bhi.n	8000b7c <SweepB+0xa8>
				SwitchLED(GPIOB, (GPIO_PIN_2 << *reverse), RESET);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	2304      	movs	r3, #4
 8000b54:	4093      	lsls	r3, r2
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4832      	ldr	r0, [pc, #200]	; (8000c28 <SweepB+0x154>)
 8000b5e:	f7ff ff44 	bl	80009ea <SwitchLED>
				*counter += 1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	701a      	strb	r2, [r3, #0]
				*reverse += 1;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e04f      	b.n	8000c1c <SweepB+0x148>
			} else if (*counter == 8) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d14b      	bne.n	8000c1c <SweepB+0x148>
				*sweep_to_left = 0;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	e047      	b.n	8000c1c <SweepB+0x148>
		} else if (*sweep_to_left == 0) {
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d143      	bne.n	8000c1c <SweepB+0x148>
			if (*position > 0) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d017      	beq.n	8000bcc <SweepB+0xf8>
				*position -= 1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	701a      	strb	r2, [r3, #0]
				*counter -= 1;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	701a      	strb	r2, [r3, #0]
				SwitchLED(GPIOB, (GPIO_PIN_2 << *position), SET);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2304      	movs	r3, #4
 8000bbc:	4093      	lsls	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <SweepB+0x154>)
 8000bc6:	f7ff ff10 	bl	80009ea <SwitchLED>
}
 8000bca:	e027      	b.n	8000c1c <SweepB+0x148>
			} else if ((*counter <= 4) && (*counter > 0)) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d81b      	bhi.n	8000c0c <SweepB+0x138>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d017      	beq.n	8000c0c <SweepB+0x138>
				*counter -= 1;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	701a      	strb	r2, [r3, #0]
				*reverse -= 1;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	701a      	strb	r2, [r3, #0]
				SwitchLED(GPIOB, (GPIO_PIN_2 << *reverse), RESET);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	4093      	lsls	r3, r2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <SweepB+0x154>)
 8000c06:	f7ff fef0 	bl	80009ea <SwitchLED>
 8000c0a:	e007      	b.n	8000c1c <SweepB+0x148>
			} else if (*counter == 0) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d103      	bne.n	8000c1c <SweepB+0x148>
				*sweep_to_left = 1;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	e7ff      	b.n	8000c1c <SweepB+0x148>
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000b4 	.word	0x200000b4
 8000c28:	48000400 	.word	0x48000400

08000c2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f000 f9ac 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d128      	bne.n	8000cf4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0x80>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 f9a0 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f002 fbd3 	bl	8003548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fa5f 	bl	8000264 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db4:	080035e8 	.word	0x080035e8
  ldr r2, =_sbss
 8000db8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dbc:	200000dc 	.word	0x200000dc

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8f9 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff ff2a 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f903 	bl	800101a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f8d9 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000d8 	.word	0x200000d8

08000e68 <__NVIC_SetPriorityGrouping>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff47 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff5c 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb0 	bl	8000f88 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e160      	b.n	8001306 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8152 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0203 	and.w	r2, r3, #3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80ac 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c0:	4a59      	ldr	r2, [pc, #356]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ea:	d025      	beq.n	8001238 <HAL_GPIO_Init+0x204>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d01f      	beq.n	8001234 <HAL_GPIO_Init+0x200>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d019      	beq.n	8001230 <HAL_GPIO_Init+0x1fc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x300>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1f8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1f4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x308>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1f0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x30c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1ec>
 800121c:	2306      	movs	r3, #6
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001220:	2307      	movs	r3, #7
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x206>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x310>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x310>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_GPIO_Init+0x310>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae97 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001364:	e002      	b.n	800136c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800137e:	af00      	add	r7, sp, #0
 8001380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001384:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001388:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f001 b83a 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 816f 	beq.w	8001692 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b4:	4bb5      	ldr	r3, [pc, #724]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d00c      	beq.n	80013da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c0:	4bb2      	ldr	r3, [pc, #712]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d15c      	bne.n	8001486 <HAL_RCC_OscConfig+0x10e>
 80013cc:	4baf      	ldr	r3, [pc, #700]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d155      	bne.n	8001486 <HAL_RCC_OscConfig+0x10e>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x94>
 8001406:	4ba1      	ldr	r3, [pc, #644]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e015      	b.n	8001438 <HAL_RCC_OscConfig+0xc0>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001428:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001440:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001444:	fa92 f2a2 	rbit	r2, r2
 8001448:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800144c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8111 	beq.w	8001690 <HAL_RCC_OscConfig+0x318>
 800146e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001472:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8108 	bne.w	8001690 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bfc6 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12e>
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x314>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a7b      	ldr	r2, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x314>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e036      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x158>
 80014b6:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a74      	ldr	r2, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e021      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x184>
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a69      	ldr	r2, [pc, #420]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a66      	ldr	r2, [pc, #408]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a62      	ldr	r2, [pc, #392]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x314>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5f      	ldr	r2, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x314>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001518:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d059      	beq.n	80015d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc94 	bl	8000e50 <HAL_GetTick>
 8001528:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fc8f 	bl	8000e50 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d902      	bls.n	8001544 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	f000 bf67 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 8001544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001548:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001558:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d102      	bne.n	8001576 <HAL_RCC_OscConfig+0x1fe>
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x22a>
 8001576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800158a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001592:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_OscConfig+0x314>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ab      	beq.n	800152e <HAL_RCC_OscConfig+0x1b6>
 80015d6:	e05c      	b.n	8001692 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc3a 	bl	8000e50 <HAL_GetTick>
 80015dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e2:	f7ff fc35 	bl	8000e50 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d902      	bls.n	80015f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f000 bf0d 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 80015f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800160c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x2b2>
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x2de>
 800162a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001646:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x314>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800165e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001662:	fa92 f2a2 	rbit	r2, r2
 8001666:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800166a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800166e:	fab2 f282 	clz	r2, r2
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f042 0220 	orr.w	r2, r2, #32
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	f002 021f 	and.w	r2, r2, #31
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ab      	bne.n	80015e2 <HAL_RCC_OscConfig+0x26a>
 800168a:	e002      	b.n	8001692 <HAL_RCC_OscConfig+0x31a>
 800168c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001696:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 817f 	beq.w	80019a6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016a8:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00c      	beq.n	80016ce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016b4:	4ba4      	ldr	r3, [pc, #656]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d173      	bne.n	80017a8 <HAL_RCC_OscConfig+0x430>
 80016c0:	4ba1      	ldr	r3, [pc, #644]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016cc:	d16c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x430>
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x386>
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e013      	b.n	8001726 <HAL_RCC_OscConfig+0x3ae>
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001716:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001722:	4b89      	ldr	r3, [pc, #548]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2202      	movs	r2, #2
 8001728:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800172c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001738:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00a      	beq.n	800176e <HAL_RCC_OscConfig+0x3f6>
 8001758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d002      	beq.n	800176e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f000 be52 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	21f8      	movs	r1, #248	; 0xf8
 8001784:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800178c:	fa91 f1a1 	rbit	r1, r1
 8001790:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001794:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001798:	fab1 f181 	clz	r1, r1
 800179c:	b2c9      	uxtb	r1, r1
 800179e:	408b      	lsls	r3, r1
 80017a0:	4969      	ldr	r1, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e0fe      	b.n	80019a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8088 	beq.w	80018ca <HAL_RCC_OscConfig+0x552>
 80017ba:	2301      	movs	r3, #1
 80017bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	461a      	mov	r2, r3
 80017e2:	2301      	movs	r3, #1
 80017e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fb33 	bl	8000e50 <HAL_GetTick>
 80017ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb2e 	bl	8000e50 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d902      	bls.n	8001806 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	f000 be06 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001818:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d102      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
 8001830:	4b45      	ldr	r3, [pc, #276]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e013      	b.n	800185e <HAL_RCC_OscConfig+0x4e6>
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001848:	2302      	movs	r3, #2
 800184a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800184e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2202      	movs	r2, #2
 8001860:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001864:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001868:	fa92 f2a2 	rbit	r2, r2
 800186c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001870:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0af      	beq.n	80017f0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	21f8      	movs	r1, #248	; 0xf8
 80018a6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018ae:	fa91 f1a1 	rbit	r1, r1
 80018b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018ba:	fab1 f181 	clz	r1, r1
 80018be:	b2c9      	uxtb	r1, r1
 80018c0:	408b      	lsls	r3, r1
 80018c2:	4921      	ldr	r1, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e06d      	b.n	80019a6 <HAL_RCC_OscConfig+0x62e>
 80018ca:	2301      	movs	r3, #1
 80018cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	2300      	movs	r3, #0
 80018f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff faab 	bl	8000e50 <HAL_GetTick>
 80018fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff faa6 	bl	8000e50 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d902      	bls.n	8001916 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	f000 bd7e 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001928:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5d4>
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <HAL_RCC_OscConfig+0x5d0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e016      	b.n	8001974 <HAL_RCC_OscConfig+0x5fc>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001964:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001970:	4bbf      	ldr	r3, [pc, #764]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2202      	movs	r2, #2
 8001976:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800197a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800197e:	fa92 f2a2 	rbit	r2, r2
 8001982:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001986:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f002 021f 	and.w	r2, r2, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ac      	bne.n	8001900 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8113 	beq.w	8001be2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d07c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x74e>
 80019cc:	2301      	movs	r3, #1
 80019ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4ba2      	ldr	r3, [pc, #648]	; (8001c74 <HAL_RCC_OscConfig+0x8fc>)
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	461a      	mov	r2, r3
 80019f2:	2301      	movs	r3, #1
 80019f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa2b 	bl	8000e50 <HAL_GetTick>
 80019fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fa26 	bl	8000e50 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d902      	bls.n	8001a16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	f000 bcfe 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b7e      	ldr	r3, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a82:	2102      	movs	r1, #2
 8001a84:	6019      	str	r1, [r3, #0]
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f1a3 	rbit	r1, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a9c:	6019      	str	r1, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d09d      	beq.n	8001a00 <HAL_RCC_OscConfig+0x688>
 8001ac4:	e08d      	b.n	8001be2 <HAL_RCC_OscConfig+0x86a>
 8001ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ae8:	601a      	str	r2, [r3, #0]
  return result;
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001af2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x8fc>)
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f9a2 	bl	8000e50 <HAL_GetTick>
 8001b0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f99d 	bl	8000e50 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d902      	bls.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f000 bc75 	b.w	8002412 <HAL_RCC_OscConfig+0x109a>
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b30:	2202      	movs	r2, #2
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b54:	2202      	movs	r2, #2
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b78:	2202      	movs	r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	6019      	str	r1, [r3, #0]
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f1a3 	rbit	r1, r3
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bba:	6019      	str	r1, [r3, #0]
  return result;
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d197      	bne.n	8001b12 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 81a5 	beq.w	8001f42 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_RCC_OscConfig+0x8f8>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_RCC_OscConfig+0x900>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d121      	bne.n	8001c88 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_RCC_OscConfig+0x900>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x900>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c50:	f7ff f8fe 	bl	8000e50 <HAL_GetTick>
 8001c54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e010      	b.n	8001c7c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7ff f8f9 	bl	8000e50 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e3d1      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	10908120 	.word	0x10908120
 8001c78:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <HAL_RCC_OscConfig+0xb3c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0e8      	beq.n	8001c5a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x92e>
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a86      	ldr	r2, [pc, #536]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e035      	b.n	8001d12 <HAL_RCC_OscConfig+0x99a>
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x958>
 8001cb6:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a7f      	ldr	r2, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a7c      	ldr	r2, [pc, #496]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e020      	b.n	8001d12 <HAL_RCC_OscConfig+0x99a>
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x982>
 8001ce0:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a74      	ldr	r2, [pc, #464]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x99a>
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a6b      	ldr	r2, [pc, #428]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8081 	beq.w	8001e26 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f894 	bl	8000e50 <HAL_GetTick>
 8001d28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f88f 	bl	8000e50 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e365      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d8c:	601a      	str	r2, [r3, #0]
  return result;
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_OscConfig+0xa3a>
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	e013      	b.n	8001dda <HAL_RCC_OscConfig+0xa62>
 8001db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dba:	2202      	movs	r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001de2:	2102      	movs	r1, #2
 8001de4:	6011      	str	r1, [r2, #0]
 8001de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fa92 f1a2 	rbit	r1, r2
 8001df4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001df8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001dfc:	6011      	str	r1, [r2, #0]
  return result;
 8001dfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e02:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d084      	beq.n	8001d2e <HAL_RCC_OscConfig+0x9b6>
 8001e24:	e083      	b.n	8001f2e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f813 	bl	8000e50 <HAL_GetTick>
 8001e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff f80e 	bl	8000e50 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2e4      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e50:	2202      	movs	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0xb44>
 8001eae:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <HAL_RCC_OscConfig+0xb40>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	e017      	b.n	8001ee4 <HAL_RCC_OscConfig+0xb6c>
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eda:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	4bb3      	ldr	r3, [pc, #716]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eec:	2102      	movs	r1, #2
 8001eee:	6011      	str	r1, [r2, #0]
 8001ef0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fa92 f1a2 	rbit	r1, r2
 8001efe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f02:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f06:	6011      	str	r1, [r2, #0]
  return result;
 8001f08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f0c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d180      	bne.n	8001e30 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b9e      	ldr	r3, [pc, #632]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a9d      	ldr	r2, [pc, #628]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 825e 	beq.w	8002410 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b96      	ldr	r3, [pc, #600]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	f000 821f 	beq.w	80023a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	f040 8170 	bne.w	8002254 <HAL_RCC_OscConfig+0xedc>
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fa2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe ff49 	bl	8000e50 <HAL_GetTick>
 8001fbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ff44 	bl	8000e50 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e21c      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 8001fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ffc:	601a      	str	r2, [r3, #0]
  return result;
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002006:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_RCC_OscConfig+0xcaa>
 800201c:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e027      	b.n	8002072 <HAL_RCC_OscConfig+0xcfa>
 8002022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002026:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800202a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002068:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002076:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800207a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800207e:	6011      	str	r1, [r2, #0]
 8002080:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002084:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	fa92 f1a2 	rbit	r1, r2
 800208e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002092:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002096:	6011      	str	r1, [r2, #0]
  return result;
 8002098:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d182      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a19      	ldr	r1, [r3, #32]
 80020ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	492d      	ldr	r1, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800210c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002124:	601a      	str	r2, [r3, #0]
  return result;
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800212e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2301      	movs	r3, #1
 8002144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe fe83 	bl	8000e50 <HAL_GetTick>
 800214a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214e:	e009      	b.n	8002164 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fe7e 	bl	8000e50 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e156      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800216c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002192:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0xe3c>
 80021a8:	4b01      	ldr	r3, [pc, #4]	; (80021b0 <HAL_RCC_OscConfig+0xe38>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	e02a      	b.n	8002204 <HAL_RCC_OscConfig+0xe8c>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCC_OscConfig+0x10a4>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002208:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800220c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002210:	6011      	str	r1, [r2, #0]
 8002212:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002216:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	fa92 f1a2 	rbit	r1, r2
 8002220:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002224:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002228:	6011      	str	r1, [r2, #0]
  return result;
 800222a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800222e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f002 021f 	and.w	r2, r2, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	f43f af7f 	beq.w	8002150 <HAL_RCC_OscConfig+0xdd8>
 8002252:	e0dd      	b.n	8002410 <HAL_RCC_OscConfig+0x1098>
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800225c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002282:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800228e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fdd9 	bl	8000e50 <HAL_GetTick>
 800229e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	e009      	b.n	80022b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fdd4 	bl	8000e50 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0ac      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022dc:	601a      	str	r2, [r3, #0]
  return result;
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0xf8a>
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x10a4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e027      	b.n	8002352 <HAL_RCC_OscConfig+0xfda>
 8002302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002306:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800230a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002314:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x10a4>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002356:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800235a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800235e:	6011      	str	r1, [r2, #0]
 8002360:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002364:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	fa92 f1a2 	rbit	r1, r2
 800236e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002372:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002376:	6011      	str	r1, [r2, #0]
  return result;
 8002378:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d182      	bne.n	80022a4 <HAL_RCC_OscConfig+0xf2c>
 800239e:	e037      	b.n	8002410 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e02e      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x10a4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_RCC_OscConfig+0x10a4>)
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d117      	bne.n	800240c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b09e      	sub	sp, #120	; 0x78
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e162      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b90      	ldr	r3, [pc, #576]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b8d      	ldr	r3, [pc, #564]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	498b      	ldr	r1, [pc, #556]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e14a      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	497f      	ldr	r1, [pc, #508]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80dc 	beq.w	800264c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d13c      	bne.n	8002516 <HAL_RCC_ClockConfig+0xf6>
 800249c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xa6>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	e00f      	b.n	80024e6 <HAL_RCC_ClockConfig+0xc6>
 80024c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	667b      	str	r3, [r7, #100]	; 0x64
 80024d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d8:	663b      	str	r3, [r7, #96]	; 0x60
 80024da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80024ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024ee:	fa92 f2a2 	rbit	r2, r2
 80024f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f002 021f 	and.w	r2, r2, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d17b      	bne.n	800260a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0f3      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d13c      	bne.n	8002598 <HAL_RCC_ClockConfig+0x178>
 800251e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_RCC_ClockConfig+0x128>
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	e00f      	b.n	8002568 <HAL_RCC_ClockConfig+0x148>
 8002548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
 8002556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
 800255c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	63ba      	str	r2, [r7, #56]	; 0x38
 800256e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f042 0220 	orr.w	r2, r2, #32
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f002 021f 	and.w	r2, r2, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d13a      	bne.n	800260a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b2      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
 8002598:	2302      	movs	r3, #2
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x1a0>
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	e00d      	b.n	80025dc <HAL_RCC_ClockConfig+0x1bc>
 80025c0:	2302      	movs	r3, #2
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2202      	movs	r2, #2
 80025de:	61ba      	str	r2, [r7, #24]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	fa92 f2a2 	rbit	r2, r2
 80025e6:	617a      	str	r2, [r7, #20]
  return result;
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e079      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	491a      	ldr	r1, [pc, #104]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe fc18 	bl	8000e50 <HAL_GetTick>
 8002620:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fc14 	bl	8000e50 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e061      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_ClockConfig+0x260>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d214      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4906      	ldr	r1, [pc, #24]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <HAL_RCC_ClockConfig+0x25c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e040      	b.n	80026fe <HAL_RCC_ClockConfig+0x2de>
 800267c:	40022000 	.word	0x40022000
 8002680:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	491a      	ldr	r1, [pc, #104]	; (8002708 <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x2e8>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4912      	ldr	r1, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x2e8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c2:	f000 f829 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026c6:	4601      	mov	r1, r0
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_RCC_ClockConfig+0x2e8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d0:	22f0      	movs	r2, #240	; 0xf0
 80026d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	fa92 f2a2 	rbit	r2, r2
 80026da:	60fa      	str	r2, [r7, #12]
  return result;
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	fab2 f282 	clz	r2, r2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	40d3      	lsrs	r3, r2
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x2ec>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	fa21 f303 	lsr.w	r3, r1, r3
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <HAL_RCC_ClockConfig+0x2f0>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCC_ClockConfig+0x2f4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb7a 	bl	8000df0 <HAL_InitTick>
  
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3778      	adds	r7, #120	; 0x78
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	080035a8 	.word	0x080035a8
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b08b      	sub	sp, #44	; 0x2c
 800271c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002732:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d002      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x30>
 8002742:	2b08      	cmp	r3, #8
 8002744:	d003      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x36>
 8002746:	e03f      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800274a:	623b      	str	r3, [r7, #32]
      break;
 800274c:	e03f      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002754:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002758:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	607a      	str	r2, [r7, #4]
  return result;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	40d3      	lsrs	r3, r2
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	220f      	movs	r2, #15
 800277c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	60fa      	str	r2, [r7, #12]
  return result;
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	fab2 f282 	clz	r2, r2
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	40d3      	lsrs	r3, r2
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	e007      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	623b      	str	r3, [r7, #32]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	372c      	adds	r7, #44	; 0x2c
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000
 80027e0:	007a1200 	.word	0x007a1200
 80027e4:	080035c0 	.word	0x080035c0
 80027e8:	080035d0 	.word	0x080035d0

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800280a:	f7ff ffef 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 800280e:	4601      	mov	r1, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002818:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800281c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	603a      	str	r2, [r7, #0]
  return result;
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	40d3      	lsrs	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	080035b8 	.word	0x080035b8

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800284e:	f7ff ffcd 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002852:	4601      	mov	r1, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800285c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002860:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	603a      	str	r2, [r7, #0]
  return result;
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	40d3      	lsrs	r3, r2
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	080035b8 	.word	0x080035b8

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b092      	sub	sp, #72	; 0x48
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80d4 	beq.w	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10e      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b45      	ldr	r3, [pc, #276]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a41      	ldr	r2, [pc, #260]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7fe faad 	bl	8000e50 <HAL_GetTick>
 80028f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe faa9 	bl	8000e50 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1d6      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8084 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002934:	429a      	cmp	r2, r3
 8002936:	d07c      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	461a      	mov	r2, r3
 8002962:	2301      	movs	r3, #1
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	461a      	mov	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d04b      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fa59 	bl	8000e50 <HAL_GetTick>
 800299e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fa55 	bl	8000e50 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e180      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	61fb      	str	r3, [r7, #28]
  return result;
 80029d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d108      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029e6:	4b01      	ldr	r3, [pc, #4]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	e00d      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
 80029f4:	10908100 	.word	0x10908100
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	4b9a      	ldr	r3, [pc, #616]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	2202      	movs	r2, #2
 8002a0a:	613a      	str	r2, [r7, #16]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	60fa      	str	r2, [r7, #12]
  return result;
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0b7      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a32:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	498c      	ldr	r1, [pc, #560]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a87      	ldr	r2, [pc, #540]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a64:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f023 0203 	bic.w	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	497f      	ldr	r1, [pc, #508]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a82:	4b7b      	ldr	r3, [pc, #492]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4978      	ldr	r1, [pc, #480]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aa0:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	4970      	ldr	r1, [pc, #448]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abe:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4969      	ldr	r1, [pc, #420]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	4961      	ldr	r1, [pc, #388]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002afa:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f023 0220 	bic.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	495a      	ldr	r1, [pc, #360]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b18:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	4952      	ldr	r1, [pc, #328]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	494b      	ldr	r1, [pc, #300]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b54:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4943      	ldr	r1, [pc, #268]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	493c      	ldr	r1, [pc, #240]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b90:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	4934      	ldr	r1, [pc, #208]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bae:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	492d      	ldr	r1, [pc, #180]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	4925      	ldr	r1, [pc, #148]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	491e      	ldr	r1, [pc, #120]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	490f      	ldr	r1, [pc, #60]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c62:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	e002      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	4913      	ldr	r1, [pc, #76]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c94:	490b      	ldr	r1, [pc, #44]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3748      	adds	r7, #72	; 0x48
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e040      	b.n	8002d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd ffc8 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f82c 	bl	8002d64 <UART_SetConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e022      	b.n	8002d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9f4 	bl	800310c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa7b 	bl	8003250 <UART_CheckIdleState>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b92      	ldr	r3, [pc, #584]	; (8002fd8 <UART_SetConfig+0x274>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a80      	ldr	r2, [pc, #512]	; (8002fdc <UART_SetConfig+0x278>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d120      	bne.n	8002e22 <UART_SetConfig+0xbe>
 8002de0:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <UART_SetConfig+0x27c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d817      	bhi.n	8002e1c <UART_SetConfig+0xb8>
 8002dec:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x90>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e05 	.word	0x08002e05
 8002df8:	08002e11 	.word	0x08002e11
 8002dfc:	08002e17 	.word	0x08002e17
 8002e00:	08002e0b 	.word	0x08002e0b
 8002e04:	2301      	movs	r3, #1
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e0b5      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e0b2      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e10:	2304      	movs	r3, #4
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e0af      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e16:	2308      	movs	r3, #8
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e0ac      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e0a9      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6f      	ldr	r2, [pc, #444]	; (8002fe4 <UART_SetConfig+0x280>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d124      	bne.n	8002e76 <UART_SetConfig+0x112>
 8002e2c:	4b6c      	ldr	r3, [pc, #432]	; (8002fe0 <UART_SetConfig+0x27c>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e38:	d011      	beq.n	8002e5e <UART_SetConfig+0xfa>
 8002e3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e3e:	d817      	bhi.n	8002e70 <UART_SetConfig+0x10c>
 8002e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e44:	d011      	beq.n	8002e6a <UART_SetConfig+0x106>
 8002e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4a:	d811      	bhi.n	8002e70 <UART_SetConfig+0x10c>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <UART_SetConfig+0xf4>
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d006      	beq.n	8002e64 <UART_SetConfig+0x100>
 8002e56:	e00b      	b.n	8002e70 <UART_SetConfig+0x10c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e08b      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	77fb      	strb	r3, [r7, #31]
 8002e62:	e088      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e64:	2304      	movs	r3, #4
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e085      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e082      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e70:	2310      	movs	r3, #16
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e07f      	b.n	8002f76 <UART_SetConfig+0x212>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5b      	ldr	r2, [pc, #364]	; (8002fe8 <UART_SetConfig+0x284>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d124      	bne.n	8002eca <UART_SetConfig+0x166>
 8002e80:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <UART_SetConfig+0x27c>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e8c:	d011      	beq.n	8002eb2 <UART_SetConfig+0x14e>
 8002e8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e92:	d817      	bhi.n	8002ec4 <UART_SetConfig+0x160>
 8002e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e98:	d011      	beq.n	8002ebe <UART_SetConfig+0x15a>
 8002e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e9e:	d811      	bhi.n	8002ec4 <UART_SetConfig+0x160>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <UART_SetConfig+0x148>
 8002ea4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ea8:	d006      	beq.n	8002eb8 <UART_SetConfig+0x154>
 8002eaa:	e00b      	b.n	8002ec4 <UART_SetConfig+0x160>
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e061      	b.n	8002f76 <UART_SetConfig+0x212>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e05e      	b.n	8002f76 <UART_SetConfig+0x212>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e05b      	b.n	8002f76 <UART_SetConfig+0x212>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e058      	b.n	8002f76 <UART_SetConfig+0x212>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e055      	b.n	8002f76 <UART_SetConfig+0x212>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a47      	ldr	r2, [pc, #284]	; (8002fec <UART_SetConfig+0x288>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d124      	bne.n	8002f1e <UART_SetConfig+0x1ba>
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <UART_SetConfig+0x27c>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ee0:	d011      	beq.n	8002f06 <UART_SetConfig+0x1a2>
 8002ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ee6:	d817      	bhi.n	8002f18 <UART_SetConfig+0x1b4>
 8002ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eec:	d011      	beq.n	8002f12 <UART_SetConfig+0x1ae>
 8002eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ef2:	d811      	bhi.n	8002f18 <UART_SetConfig+0x1b4>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <UART_SetConfig+0x19c>
 8002ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efc:	d006      	beq.n	8002f0c <UART_SetConfig+0x1a8>
 8002efe:	e00b      	b.n	8002f18 <UART_SetConfig+0x1b4>
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e037      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f06:	2302      	movs	r3, #2
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e034      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e031      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f12:	2308      	movs	r3, #8
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e02e      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e02b      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <UART_SetConfig+0x28c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d124      	bne.n	8002f72 <UART_SetConfig+0x20e>
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <UART_SetConfig+0x27c>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f34:	d011      	beq.n	8002f5a <UART_SetConfig+0x1f6>
 8002f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f3a:	d817      	bhi.n	8002f6c <UART_SetConfig+0x208>
 8002f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f40:	d011      	beq.n	8002f66 <UART_SetConfig+0x202>
 8002f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f46:	d811      	bhi.n	8002f6c <UART_SetConfig+0x208>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <UART_SetConfig+0x1f0>
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f50:	d006      	beq.n	8002f60 <UART_SetConfig+0x1fc>
 8002f52:	e00b      	b.n	8002f6c <UART_SetConfig+0x208>
 8002f54:	2300      	movs	r3, #0
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e00d      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e00a      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f60:	2304      	movs	r3, #4
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e007      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f66:	2308      	movs	r3, #8
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e004      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e001      	b.n	8002f76 <UART_SetConfig+0x212>
 8002f72:	2310      	movs	r3, #16
 8002f74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7e:	d16b      	bne.n	8003058 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002f80:	7ffb      	ldrb	r3, [r7, #31]
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d838      	bhi.n	8002ff8 <UART_SetConfig+0x294>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0x228>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fb1 	.word	0x08002fb1
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	08002fc1 	.word	0x08002fc1
 8002f98:	08002ff9 	.word	0x08002ff9
 8002f9c:	08002fc7 	.word	0x08002fc7
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	08002ff9 	.word	0x08002ff9
 8002fa8:	08002ff9 	.word	0x08002ff9
 8002fac:	08002fcf 	.word	0x08002fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f7ff fc28 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	61b8      	str	r0, [r7, #24]
        break;
 8002fb6:	e024      	b.n	8003002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7ff fc46 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	61b8      	str	r0, [r7, #24]
        break;
 8002fbe:	e020      	b.n	8003002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <UART_SetConfig+0x290>)
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e01d      	b.n	8003002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc6:	f7ff fba7 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8002fca:	61b8      	str	r0, [r7, #24]
        break;
 8002fcc:	e019      	b.n	8003002 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	61bb      	str	r3, [r7, #24]
        break;
 8002fd4:	e015      	b.n	8003002 <UART_SetConfig+0x29e>
 8002fd6:	bf00      	nop
 8002fd8:	efff69f3 	.word	0xefff69f3
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40004800 	.word	0x40004800
 8002fec:	40004c00 	.word	0x40004c00
 8002ff0:	40005000 	.word	0x40005000
 8002ff4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77bb      	strb	r3, [r7, #30]
        break;
 8003000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d073      	beq.n	80030f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	005a      	lsls	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d916      	bls.n	8003052 <UART_SetConfig+0x2ee>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d212      	bcs.n	8003052 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f023 030f 	bic.w	r3, r3, #15
 8003034:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	b29a      	uxth	r2, r3
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	4313      	orrs	r3, r2
 8003046:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	89fa      	ldrh	r2, [r7, #14]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e04e      	b.n	80030f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77bb      	strb	r3, [r7, #30]
 8003056:	e04b      	b.n	80030f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d827      	bhi.n	80030ae <UART_SetConfig+0x34a>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x300>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7ff fbbc 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 800308c:	61b8      	str	r0, [r7, #24]
        break;
 800308e:	e013      	b.n	80030b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fbda 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8003094:	61b8      	str	r0, [r7, #24]
        break;
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <UART_SetConfig+0x3a4>)
 800309a:	61bb      	str	r3, [r7, #24]
        break;
 800309c:	e00c      	b.n	80030b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7ff fb3b 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80030a2:	61b8      	str	r0, [r7, #24]
        break;
 80030a4:	e008      	b.n	80030b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	61bb      	str	r3, [r7, #24]
        break;
 80030ac:	e004      	b.n	80030b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77bb      	strb	r3, [r7, #30]
        break;
 80030b6:	bf00      	nop
    }

    if (pclk != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	085a      	lsrs	r2, r3, #1
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d909      	bls.n	80030ec <UART_SetConfig+0x388>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d205      	bcs.n	80030ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e001      	b.n	80030f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	007a1200 	.word	0x007a1200

0800310c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01a      	beq.n	8003222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320a:	d10a      	bne.n	8003222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b098      	sub	sp, #96	; 0x60
 8003254:	af02      	add	r7, sp, #8
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003260:	f7fd fdf6 	bl	8000e50 <HAL_GetTick>
 8003264:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d12e      	bne.n	80032d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	2200      	movs	r2, #0
 800327e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f88c 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d021      	beq.n	80032d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e6      	bne.n	800328e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e062      	b.n	8003398 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d149      	bne.n	8003374 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f856 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03c      	beq.n	8003374 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	623b      	str	r3, [r7, #32]
   return(result);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
 800331a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800331e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e6      	bne.n	80032fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	60fb      	str	r3, [r7, #12]
   return(result);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334c:	61fa      	str	r2, [r7, #28]
 800334e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	617b      	str	r3, [r7, #20]
   return(result);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e011      	b.n	8003398 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3758      	adds	r7, #88	; 0x58
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	e049      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d045      	beq.n	8003446 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fd fd49 	bl	8000e50 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e048      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d031      	beq.n	8003446 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d110      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2208      	movs	r2, #8
 80033f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f838 	bl	800346e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2208      	movs	r2, #8
 8003402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e029      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003420:	d111      	bne.n	8003446 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f81e 	bl	800346e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e00f      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d0a6      	beq.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800346e:	b480      	push	{r7}
 8003470:	b095      	sub	sp, #84	; 0x54
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	643b      	str	r3, [r7, #64]	; 0x40
 8003496:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800349a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e6      	bne.n	8003476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d118      	bne.n	8003516 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0310 	bic.w	r3, r3, #16
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	613b      	str	r3, [r7, #16]
   return(result);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e6      	bne.n	80034e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	669a      	str	r2, [r3, #104]	; 0x68
}
 800352a:	bf00      	nop
 800352c:	3754      	adds	r7, #84	; 0x54
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <memset>:
 8003536:	4402      	add	r2, r0
 8003538:	4603      	mov	r3, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	d100      	bne.n	8003540 <memset+0xa>
 800353e:	4770      	bx	lr
 8003540:	f803 1b01 	strb.w	r1, [r3], #1
 8003544:	e7f9      	b.n	800353a <memset+0x4>
	...

08003548 <__libc_init_array>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4d0d      	ldr	r5, [pc, #52]	; (8003580 <__libc_init_array+0x38>)
 800354c:	4c0d      	ldr	r4, [pc, #52]	; (8003584 <__libc_init_array+0x3c>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	2600      	movs	r6, #0
 8003554:	42a6      	cmp	r6, r4
 8003556:	d109      	bne.n	800356c <__libc_init_array+0x24>
 8003558:	4d0b      	ldr	r5, [pc, #44]	; (8003588 <__libc_init_array+0x40>)
 800355a:	4c0c      	ldr	r4, [pc, #48]	; (800358c <__libc_init_array+0x44>)
 800355c:	f000 f818 	bl	8003590 <_init>
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	2600      	movs	r6, #0
 8003566:	42a6      	cmp	r6, r4
 8003568:	d105      	bne.n	8003576 <__libc_init_array+0x2e>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003570:	4798      	blx	r3
 8003572:	3601      	adds	r6, #1
 8003574:	e7ee      	b.n	8003554 <__libc_init_array+0xc>
 8003576:	f855 3b04 	ldr.w	r3, [r5], #4
 800357a:	4798      	blx	r3
 800357c:	3601      	adds	r6, #1
 800357e:	e7f2      	b.n	8003566 <__libc_init_array+0x1e>
 8003580:	080035e0 	.word	0x080035e0
 8003584:	080035e0 	.word	0x080035e0
 8003588:	080035e0 	.word	0x080035e0
 800358c:	080035e4 	.word	0x080035e4

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
