
timers_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004590  08004590  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004590  08004590  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000020c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b15b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c5a  00000000  00000000  0002b22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000608  00000000  00000000  0002d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fded  00000000  00000000  0002dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b823  00000000  00000000  0004da65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0210  00000000  00000000  00059288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000023d8  00000000  00000000  00119498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0011b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004500 	.word	0x08004500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004500 	.word	0x08004500

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000324:	f000 fc2a 	bl	8000b7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000328:	f000 f84a 	bl	80003c0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	SysTick_Init();
 800032c:	f000 f8ec 	bl	8000508 <SysTick_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000330:	f000 f8d2 	bl	80004d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000334:	f000 f8a0 	bl	8000478 <MX_USART2_UART_Init>
	myUARTbegin();
 8000338:	f000 f920 	bl	800057c <myUARTbegin>
	/* USER CODE BEGIN 2 */
	Timer3_Init();
 800033c:	f000 f9a0 	bl	8000680 <Timer3_Init>
	Timer4_Init();
 8000340:	f000 f9f0 	bl	8000724 <Timer4_Init>
	Channel1_Init();
 8000344:	f000 fa0c 	bl	8000760 <Channel1_Init>
	Channel2_Init();
 8000348:	f000 f9c2 	bl	80006d0 <Channel2_Init>

	EnableGPIOB();
 800034c:	f000 fa30 	bl	80007b0 <EnableGPIOB>
	Echo_Init();
 8000350:	f000 fa3e 	bl	80007d0 <Echo_Init>
	Trigger_Init();
 8000354:	f000 fa76 	bl	8000844 <Trigger_Init>

	start_millis = millis();
 8000358:	f000 f904 	bl	8000564 <millis>
 800035c:	4603      	mov	r3, r0
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <main+0x8c>)
 8000360:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (millis() - start_millis >= PRINT_DELAY) {
 8000362:	f000 f8ff 	bl	8000564 <millis>
 8000366:	4602      	mov	r2, r0
 8000368:	4b10      	ldr	r3, [pc, #64]	; (80003ac <main+0x8c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000372:	d3f6      	bcc.n	8000362 <main+0x42>
			if (read_state == 1) {
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <main+0x90>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10f      	bne.n	800039e <main+0x7e>
				distance_cm = sensor_pulse / SENSOR_SCALING_FACTOR;
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <main+0x94>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <main+0x98>)
 8000384:	fba2 2303 	umull	r2, r3, r2, r3
 8000388:	095b      	lsrs	r3, r3, #5
 800038a:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <main+0x9c>)
 800038c:	6013      	str	r3, [r2, #0]
				printValue(distance_cm);
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <main+0x9c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f952 	bl	800063c <printValue>
				read_state = 0;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <main+0x90>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			}
			start_millis = millis();
 800039e:	f000 f8e1 	bl	8000564 <millis>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a01      	ldr	r2, [pc, #4]	; (80003ac <main+0x8c>)
 80003a6:	6013      	str	r3, [r2, #0]
		if (millis() - start_millis >= PRINT_DELAY) {
 80003a8:	e7db      	b.n	8000362 <main+0x42>
 80003aa:	bf00      	nop
 80003ac:	20000110 	.word	0x20000110
 80003b0:	2000010c 	.word	0x2000010c
 80003b4:	20000104 	.word	0x20000104
 80003b8:	8d3dcb09 	.word	0x8d3dcb09
 80003bc:	20000108 	.word	0x20000108

080003c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b0a6      	sub	sp, #152	; 0x98
 80003c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fc12 	bl	8003bf8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2258      	movs	r2, #88	; 0x58
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fc04 	bl	8003bf8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f0:	2302      	movs	r3, #2
 80003f2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2310      	movs	r3, #16
 80003fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800040c:	2300      	movs	r3, #0
 800040e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000418:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800041c:	4618      	mov	r0, r3
 800041e:	f000 ff11 	bl	8001244 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x6c>
		Error_Handler();
 8000428:	f000 fa94 	bl	8000954 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2302      	movs	r3, #2
 8000432:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f001 ff50 	bl	80022ec <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x96>
		Error_Handler();
 8000452:	f000 fa7f 	bl	8000954 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000456:	2302      	movs	r3, #2
 8000458:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f002 f979 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xb0>
		Error_Handler();
 800046c:	f000 fa72 	bl	8000954 <Error_Handler>
	}
}
 8000470:	bf00      	nop
 8000472:	3798      	adds	r7, #152	; 0x98
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800047e:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <MX_USART2_UART_Init+0x5c>)
 8000480:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000488:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART2_UART_Init+0x58>)
 80004bc:	f002 fb6a 	bl	8002b94 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80004c6:	f000 fa45 	bl	8000954 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000078 	.word	0x20000078
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_GPIO_Init+0x2c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <SysTick_Init>:

/* USER CODE BEGIN 4 */
void SysTick_Init() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	//resets SysTick control pin to 0.
	SysTick->CTRL = ~SysTick_CTRL_ENABLE_Msk;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <SysTick_Init+0x3c>)
 800050e:	f06f 0201 	mvn.w	r2, #1
 8000512:	601a      	str	r2, [r3, #0]
	//sets up the reload register.
	SysTick->LOAD = 16000 - 1;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <SysTick_Init+0x3c>)
 8000516:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800051a:	605a      	str	r2, [r3, #4]
	//sets the interrupt priority of SysTick to the least urgent.
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 800051c:	210f      	movs	r1, #15
 800051e:	f04f 30ff 	mov.w	r0, #4294967295
 8000522:	f7ff fed3 	bl	80002cc <__NVIC_SetPriority>
	//resets the SysTick counter value.
	SysTick->VAL &= SysTick_VAL_CURRENT_Msk;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <SysTick_Init+0x3c>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	4a06      	ldr	r2, [pc, #24]	; (8000544 <SysTick_Init+0x3c>)
 800052c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000530:	6093      	str	r3, [r2, #8]
	//sets the SysTick control pin to use the clock source, the interrupt, and enables both of them.
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <SysTick_Init+0x3c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <SysTick_Init+0x3c>)
 8000538:	f043 0307 	orr.w	r3, r3, #7
 800053c:	6013      	str	r3, [r2, #0]
			| SysTick_CTRL_ENABLE_Msk);
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	e000e010 	.word	0xe000e010

08000548 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
	millis_counter++;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <SysTick_Handler+0x18>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a03      	ldr	r2, [pc, #12]	; (8000560 <SysTick_Handler+0x18>)
 8000554:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000114 	.word	0x20000114

08000564 <millis>:

uint32_t millis(void) {
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	return millis_counter;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <millis+0x14>)
 800056a:	681b      	ldr	r3, [r3, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000114 	.word	0x20000114

0800057c <myUARTbegin>:

void myUARTbegin(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
	// Configure GPIO for UART
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <myUARTbegin+0xb4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <myUARTbegin+0xb4>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <myUARTbegin+0xb4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80005aa:	230c      	movs	r3, #12
 80005ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ba:	2307      	movs	r3, #7
 80005bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 fcb2 	bl	8000f30 <HAL_GPIO_Init>

	// Configure USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <myUARTbegin+0xb4>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <myUARTbegin+0xb4>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	61d3      	str	r3, [r2, #28]
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <myUARTbegin+0xb4>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
	huart2.Instance = USART2;
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <myUARTbegin+0xb8>)
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <myUARTbegin+0xbc>)
 80005e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <myUARTbegin+0xb8>)
 80005ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <myUARTbegin+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <myUARTbegin+0xb8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <myUARTbegin+0xb8>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <myUARTbegin+0xb8>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <myUARTbegin+0xb8>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <myUARTbegin+0xb8>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <myUARTbegin+0xb8>)
 8000618:	f002 fabc 	bl	8002b94 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <myUARTbegin+0xaa>
		Error_Handler();
 8000622:	f000 f997 	bl	8000954 <Error_Handler>
	}
}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	20000078 	.word	0x20000078
 8000638:	40004400 	.word	0x40004400

0800063c <printValue>:

void printValue(uint32_t distance_val) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "%lu cm\r\n", distance_val);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	490b      	ldr	r1, [pc, #44]	; (8000678 <printValue+0x3c>)
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fab3 	bl	8003bb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 1000);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdc2 	bl	80001e0 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <printValue+0x40>)
 800066a:	f002 fae1 	bl	8002c30 <HAL_UART_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3740      	adds	r7, #64	; 0x40
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08004518 	.word	0x08004518
 800067c:	20000078 	.word	0x20000078

08000680 <Timer3_Init>:

void Timer3_Init(void) {
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <Timer3_Init+0x48>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <Timer3_Init+0x48>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = 16 - 1;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <Timer3_Init+0x4c>)
 8000692:	220f      	movs	r2, #15
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 0xFFFF;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <Timer3_Init+0x4c>)
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = 10;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <Timer3_Init+0x4c>)
 80006a0:	220a      	movs	r2, #10
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->EGR |= TIM_EGR_UG;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <Timer3_Init+0x4c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <Timer3_Init+0x4c>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <Timer3_Init+0x4c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a05      	ldr	r2, [pc, #20]	; (80006cc <Timer3_Init+0x4c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40000400 	.word	0x40000400

080006d0 <Channel2_Init>:

void Channel2_Init(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	TIM3->CCMR1 &= ~TIM_CCMR1_OC2M;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <Channel2_Init+0x50>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a11      	ldr	r2, [pc, #68]	; (8000720 <Channel2_Init+0x50>)
 80006da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006e2:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <Channel2_Init+0x50>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <Channel2_Init+0x50>)
 80006ea:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80006ee:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <Channel2_Init+0x50>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <Channel2_Init+0x50>)
 80006f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006fa:	6193      	str	r3, [r2, #24]
	TIM3->CCER &= ~TIM_CCER_CC2P;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <Channel2_Init+0x50>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <Channel2_Init+0x50>)
 8000702:	f023 0320 	bic.w	r3, r3, #32
 8000706:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <Channel2_Init+0x50>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <Channel2_Init+0x50>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6213      	str	r3, [r2, #32]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40000400 	.word	0x40000400

08000724 <Timer4_Init>:

void Timer4_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <Timer4_Init+0x34>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <Timer4_Init+0x34>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = 16 - 1;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <Timer4_Init+0x38>)
 8000736:	220f      	movs	r2, #15
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 0xFFFF;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <Timer4_Init+0x38>)
 800073c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM4_IRQn);
 8000742:	201e      	movs	r0, #30
 8000744:	f7ff fda4 	bl	8000290 <__NVIC_EnableIRQ>
	TIM4->CR1 |= TIM_CR1_CEN;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <Timer4_Init+0x38>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <Timer4_Init+0x38>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	40000800 	.word	0x40000800

08000760 <Channel1_Init>:

void Channel1_Init(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <Channel1_Init+0x4c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <Channel1_Init+0x4c>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~TIM_CCER_CC1P;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <Channel1_Init+0x4c>)
 8000772:	6a1b      	ldr	r3, [r3, #32]
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <Channel1_Init+0x4c>)
 8000776:	f023 0302 	bic.w	r3, r3, #2
 800077a:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~TIM_CCER_CC1NP;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <Channel1_Init+0x4c>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <Channel1_Init+0x4c>)
 8000782:	f023 0308 	bic.w	r3, r3, #8
 8000786:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC1E;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <Channel1_Init+0x4c>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <Channel1_Init+0x4c>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6213      	str	r3, [r2, #32]
	TIM4->DIER |= TIM_DIER_CC1IE;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <Channel1_Init+0x4c>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <Channel1_Init+0x4c>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40000800 	.word	0x40000800

080007b0 <EnableGPIOB>:

void EnableGPIOB(void) {
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <EnableGPIOB+0x1c>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <EnableGPIOB+0x1c>)
 80007ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007be:	6153      	str	r3, [r2, #20]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <Echo_Init>:

void Echo_Init(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	//resets the sensor's pin MODE. (PB6)
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <Echo_Init+0x70>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <Echo_Init+0x70>)
 80007da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007de:	6013      	str	r3, [r2, #0]
	//resets the sensor's pin SPEED.
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <Echo_Init+0x70>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <Echo_Init+0x70>)
 80007e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ea:	6093      	str	r3, [r2, #8]
	//resets the sensor's PUPD register.
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR6;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <Echo_Init+0x70>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <Echo_Init+0x70>)
 80007f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f6:	60d3      	str	r3, [r2, #12]

	//sets the sensor's pin MODE to 0b10 as an alternated input.
	GPIOB->MODER |= GPIO_MODER_MODER6_1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <Echo_Init+0x70>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <Echo_Init+0x70>)
 80007fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000802:	6013      	str	r3, [r2, #0]
	//sets the sensor's pin SPEED to medium.
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <Echo_Init+0x70>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <Echo_Init+0x70>)
 800080a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080e:	6093      	str	r3, [r2, #8]
	//set PUPD to pull-down.
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR6_0;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <Echo_Init+0x70>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <Echo_Init+0x70>)
 8000816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081a:	60d3      	str	r3, [r2, #12]

	//resets the high alternate function for pin PB6.
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL6;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <Echo_Init+0x70>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <Echo_Init+0x70>)
 8000822:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000826:	6213      	str	r3, [r2, #32]
	//activate alternate function 2 (AF2) to use timer 4 on channel 1 PB6
	GPIOB->AFR[0] |= 0b0010 << GPIO_AFRL_AFRL6_Pos;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <Echo_Init+0x70>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <Echo_Init+0x70>)
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000832:	6213      	str	r3, [r2, #32]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	48000400 	.word	0x48000400

08000844 <Trigger_Init>:

void Trigger_Init(void) {
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	//resets the sensor's pin MODE. (PB5)
	GPIOB->MODER &= ~GPIO_MODER_MODER5;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <Trigger_Init+0x70>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <Trigger_Init+0x70>)
 800084e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000852:	6013      	str	r3, [r2, #0]
	//resets the sensor's pin SPEED.
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Trigger_Init+0x70>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <Trigger_Init+0x70>)
 800085a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800085e:	6093      	str	r3, [r2, #8]
	//resets the sensor's PUPD register.
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR5;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Trigger_Init+0x70>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <Trigger_Init+0x70>)
 8000866:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800086a:	60d3      	str	r3, [r2, #12]

	//sets the sensor's pin MODE to 0b10 as an alternated output.
	GPIOB->MODER |= GPIO_MODER_MODER5_1;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <Trigger_Init+0x70>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <Trigger_Init+0x70>)
 8000872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000876:	6013      	str	r3, [r2, #0]
	//sets the sensor's pin SPEED to medium.
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_0;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <Trigger_Init+0x70>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <Trigger_Init+0x70>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6093      	str	r3, [r2, #8]
	//resets the PUPD register
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR5;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <Trigger_Init+0x70>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <Trigger_Init+0x70>)
 800088a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800088e:	60d3      	str	r3, [r2, #12]

	//resets the high alternate function for pin PB5
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL5;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <Trigger_Init+0x70>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <Trigger_Init+0x70>)
 8000896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800089a:	6213      	str	r3, [r2, #32]
	//activate alternate function 2 (AF2) to use timer 4 on channel 1 PB5
	GPIOB->AFR[0] |= 0b0010 << GPIO_AFRL_AFRL5_Pos;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <Trigger_Init+0x70>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <Trigger_Init+0x70>)
 80008a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a6:	6213      	str	r3, [r2, #32]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	48000400 	.word	0x48000400

080008b8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_CC1IF) {
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <TIM4_IRQHandler+0x8c>)
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d035      	beq.n	8000936 <TIM4_IRQHandler+0x7e>
		uint32_t pulse_val = TIM4->CCR1;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <TIM4_IRQHandler+0x8c>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ce:	607b      	str	r3, [r7, #4]

		if ((TIM4->CCER & TIM_CCER_CC1P) == 0) {
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <TIM4_IRQHandler+0x8c>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	f003 0302 	and.w	r3, r3, #2
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d109      	bne.n	80008f0 <TIM4_IRQHandler+0x38>
			edge_val = pulse_val;
 80008dc:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <TIM4_IRQHandler+0x90>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
			TIM4->CCER |= TIM_CCER_CC1P;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <TIM4_IRQHandler+0x8c>)
 80008e4:	6a1b      	ldr	r3, [r3, #32]
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <TIM4_IRQHandler+0x8c>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6213      	str	r3, [r2, #32]
 80008ee:	e01c      	b.n	800092a <TIM4_IRQHandler+0x72>
		}
		else {
			if (pulse_val < edge_val) {
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <TIM4_IRQHandler+0x90>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d208      	bcs.n	800090c <TIM4_IRQHandler+0x54>
				sensor_pulse = (0xFFFF - edge_val) + pulse_val + 1;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <TIM4_IRQHandler+0x90>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <TIM4_IRQHandler+0x94>)
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e005      	b.n	8000918 <TIM4_IRQHandler+0x60>
			} else {
				sensor_pulse = pulse_val - edge_val;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <TIM4_IRQHandler+0x90>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <TIM4_IRQHandler+0x94>)
 8000916:	6013      	str	r3, [r2, #0]
			}
			read_state = 1;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <TIM4_IRQHandler+0x98>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
			TIM4->CCER &= ~TIM_CCER_CC1P;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <TIM4_IRQHandler+0x8c>)
 8000920:	6a1b      	ldr	r3, [r3, #32]
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <TIM4_IRQHandler+0x8c>)
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	6213      	str	r3, [r2, #32]
		}
		TIM4->SR &= ~TIM_SR_CC1IF;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <TIM4_IRQHandler+0x8c>)
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <TIM4_IRQHandler+0x8c>)
 8000930:	f023 0302 	bic.w	r3, r3, #2
 8000934:	6113      	str	r3, [r2, #16]
	}
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40000800 	.word	0x40000800
 8000948:	20000100 	.word	0x20000100
 800094c:	20000104 	.word	0x20000104
 8000950:	2000010c 	.word	0x2000010c

08000954 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d130      	bne.n	8000a2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fa8a 	bl	8000f30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2026      	movs	r0, #38	; 0x26
 8000a22:	f000 f9d8 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a26:	2026      	movs	r0, #38	; 0x26
 8000a28:	f000 f9f1 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <USART2_IRQHandler+0x10>)
 8000a8a:	f002 f95b 	bl	8002d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000078 	.word	0x20000078

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f003 f89e 	bl	8003c08 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20010000 	.word	0x20010000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000118 	.word	0x20000118
 8000b00:	20000268 	.word	0x20000268

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f003 f85d 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fbe1 	bl	8000320 <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b6c:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 8000b70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b74:	20000268 	.word	0x20000268

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_Init+0x28>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_Init+0x28>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f917 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b92:	200f      	movs	r0, #15
 8000b94:	f000 f808 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b98:	f7ff fee2 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x54>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f92f 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00e      	b.n	8000bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d80a      	bhi.n	8000bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 f8f7 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_InitTick+0x5c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000011c 	.word	0x2000011c

08000c20 <__NVIC_SetPriorityGrouping>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d008      	beq.n	8000e66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2204      	movs	r2, #4
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e020      	b.n	8000ea8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020e 	bic.w	r2, r2, #14
 8000e74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d005      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2204      	movs	r2, #4
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e027      	b.n	8000f26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 020e 	bic.w	r2, r2, #14
 8000ee4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	4798      	blx	r3
    } 
  }
  return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e160      	b.n	8001202 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8152 	beq.w	80011fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0203 	and.w	r2, r3, #3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80ac 	beq.w	80011fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <HAL_GPIO_Init+0x2f0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a5d      	ldr	r2, [pc, #372]	; (8001220 <HAL_GPIO_Init+0x2f0>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <HAL_GPIO_Init+0x2f0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010bc:	4a59      	ldr	r2, [pc, #356]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010e6:	d025      	beq.n	8001134 <HAL_GPIO_Init+0x204>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <HAL_GPIO_Init+0x2f8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x200>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a4e      	ldr	r2, [pc, #312]	; (800122c <HAL_GPIO_Init+0x2fc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_GPIO_Init+0x1fc>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4d      	ldr	r2, [pc, #308]	; (8001230 <HAL_GPIO_Init+0x300>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1f8>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_GPIO_Init+0x304>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1f4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4b      	ldr	r2, [pc, #300]	; (8001238 <HAL_GPIO_Init+0x308>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1f0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_GPIO_Init+0x30c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1ec>
 8001118:	2306      	movs	r3, #6
 800111a:	e00c      	b.n	8001136 <HAL_GPIO_Init+0x206>
 800111c:	2307      	movs	r3, #7
 800111e:	e00a      	b.n	8001136 <HAL_GPIO_Init+0x206>
 8001120:	2305      	movs	r3, #5
 8001122:	e008      	b.n	8001136 <HAL_GPIO_Init+0x206>
 8001124:	2304      	movs	r3, #4
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x206>
 8001128:	2303      	movs	r3, #3
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x206>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x206>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x206>
 8001134:	2300      	movs	r3, #0
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001146:	4937      	ldr	r1, [pc, #220]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_GPIO_Init+0x310>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001178:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x310>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_GPIO_Init+0x310>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_GPIO_Init+0x310>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x310>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_GPIO_Init+0x310>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_GPIO_Init+0x310>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_GPIO_Init+0x310>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f47f ae97 	bne.w	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	48000400 	.word	0x48000400
 800122c:	48000800 	.word	0x48000800
 8001230:	48000c00 	.word	0x48000c00
 8001234:	48001000 	.word	0x48001000
 8001238:	48001400 	.word	0x48001400
 800123c:	48001800 	.word	0x48001800
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800124a:	af00      	add	r7, sp, #0
 800124c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001250:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001254:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800125a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	f001 b83a 	b.w	80022de <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800126e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 816f 	beq.w	800155e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001280:	4bb5      	ldr	r3, [pc, #724]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b04      	cmp	r3, #4
 800128a:	d00c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128c:	4bb2      	ldr	r3, [pc, #712]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d15c      	bne.n	8001352 <HAL_RCC_OscConfig+0x10e>
 8001298:	4baf      	ldr	r3, [pc, #700]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d155      	bne.n	8001352 <HAL_RCC_OscConfig+0x10e>
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	095b      	lsrs	r3, r3, #5
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d102      	bne.n	80012d8 <HAL_RCC_OscConfig+0x94>
 80012d2:	4ba1      	ldr	r3, [pc, #644]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	e015      	b.n	8001304 <HAL_RCC_OscConfig+0xc0>
 80012d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001300:	4b95      	ldr	r3, [pc, #596]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001308:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800130c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001310:	fa92 f2a2 	rbit	r2, r2
 8001314:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001318:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800131c:	fab2 f282 	clz	r2, r2
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	f002 021f 	and.w	r2, r2, #31
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8111 	beq.w	800155c <HAL_RCC_OscConfig+0x318>
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 8108 	bne.w	800155c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f000 bfc6 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001356:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x12e>
 8001364:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a7b      	ldr	r2, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e036      	b.n	80013e0 <HAL_RCC_OscConfig+0x19c>
 8001372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001376:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x158>
 8001382:	4b75      	ldr	r3, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a74      	ldr	r2, [pc, #464]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a71      	ldr	r2, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e021      	b.n	80013e0 <HAL_RCC_OscConfig+0x19c>
 800139c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x184>
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0x19c>
 80013c8:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a62      	ldr	r2, [pc, #392]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a5f      	ldr	r2, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d059      	beq.n	80014a4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc0a 	bl	8000c08 <HAL_GetTick>
 80013f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fa:	f7ff fc05 	bl	8000c08 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d902      	bls.n	8001410 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	f000 bf67 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 8001410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001414:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001424:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <HAL_RCC_OscConfig+0x1fe>
 800143c:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x22a>
 8001442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001446:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800145e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001472:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001476:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800147a:	fa92 f2a2 	rbit	r2, r2
 800147e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001482:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f042 0220 	orr.w	r2, r2, #32
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ab      	beq.n	80013fa <HAL_RCC_OscConfig+0x1b6>
 80014a2:	e05c      	b.n	800155e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbb0 	bl	8000c08 <HAL_GetTick>
 80014a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ae:	f7ff fbab 	bl	8000c08 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d902      	bls.n	80014c4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	f000 bf0d 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 80014c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80014d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d102      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2b2>
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x2de>
 80014f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800150a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001512:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001526:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800152a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800152e:	fa92 f2a2 	rbit	r2, r2
 8001532:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001536:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800153a:	fab2 f282 	clz	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f042 0220 	orr.w	r2, r2, #32
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f002 021f 	and.w	r2, r2, #31
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ab      	bne.n	80014ae <HAL_RCC_OscConfig+0x26a>
 8001556:	e002      	b.n	800155e <HAL_RCC_OscConfig+0x31a>
 8001558:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 817f 	beq.w	8001872 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001574:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001580:	4ba4      	ldr	r3, [pc, #656]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d173      	bne.n	8001674 <HAL_RCC_OscConfig+0x430>
 800158c:	4ba1      	ldr	r3, [pc, #644]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001598:	d16c      	bne.n	8001674 <HAL_RCC_OscConfig+0x430>
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80015ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <HAL_RCC_OscConfig+0x386>
 80015c4:	4b93      	ldr	r3, [pc, #588]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e013      	b.n	80015f2 <HAL_RCC_OscConfig+0x3ae>
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2202      	movs	r2, #2
 80015f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80015f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80015fc:	fa92 f2a2 	rbit	r2, r2
 8001600:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001604:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001608:	fab2 f282 	clz	r2, r2
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	f042 0220 	orr.w	r2, r2, #32
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f002 021f 	and.w	r2, r2, #31
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <HAL_RCC_OscConfig+0x3f6>
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d002      	beq.n	800163a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	f000 be52 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	21f8      	movs	r1, #248	; 0xf8
 8001650:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001658:	fa91 f1a1 	rbit	r1, r1
 800165c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001660:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001664:	fab1 f181 	clz	r1, r1
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	408b      	lsls	r3, r1
 800166c:	4969      	ldr	r1, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e0fe      	b.n	8001872 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001678:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8088 	beq.w	8001796 <HAL_RCC_OscConfig+0x552>
 8001686:	2301      	movs	r3, #1
 8001688:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff faa9 	bl	8000c08 <HAL_GetTick>
 80016b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff faa4 	bl	8000c08 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 be06 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80016e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x4be>
 80016fc:	4b45      	ldr	r3, [pc, #276]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0x4e6>
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800171a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2202      	movs	r2, #2
 800172c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001730:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800173c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0af      	beq.n	80016bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	21f8      	movs	r1, #248	; 0xf8
 8001772:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800177a:	fa91 f1a1 	rbit	r1, r1
 800177e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001782:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001786:	fab1 f181 	clz	r1, r1
 800178a:	b2c9      	uxtb	r1, r1
 800178c:	408b      	lsls	r3, r1
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e06d      	b.n	8001872 <HAL_RCC_OscConfig+0x62e>
 8001796:	2301      	movs	r3, #1
 8001798:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80017a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	461a      	mov	r2, r3
 80017be:	2300      	movs	r3, #0
 80017c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa21 	bl	8000c08 <HAL_GetTick>
 80017c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fa1c 	bl	8000c08 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d902      	bls.n	80017e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	f000 bd7e 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80017f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x5d4>
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_RCC_OscConfig+0x5d0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e016      	b.n	8001840 <HAL_RCC_OscConfig+0x5fc>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800183c:	4bbf      	ldr	r3, [pc, #764]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2202      	movs	r2, #2
 8001842:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001846:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001852:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 021f 	and.w	r2, r2, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ac      	bne.n	80017cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8113 	beq.w	8001aae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d07c      	beq.n	8001992 <HAL_RCC_OscConfig+0x74e>
 8001898:	2301      	movs	r3, #1
 800189a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80018aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4ba2      	ldr	r3, [pc, #648]	; (8001b40 <HAL_RCC_OscConfig+0x8fc>)
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	461a      	mov	r2, r3
 80018be:	2301      	movs	r3, #1
 80018c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f9a1 	bl	8000c08 <HAL_GetTick>
 80018c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f99c 	bl	8000c08 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d902      	bls.n	80018e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	f000 bcfe 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001940:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800194e:	2102      	movs	r1, #2
 8001950:	6019      	str	r1, [r3, #0]
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f1a3 	rbit	r1, r3
 8001960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001964:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001968:	6019      	str	r1, [r3, #0]
  return result;
 800196a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d09d      	beq.n	80018cc <HAL_RCC_OscConfig+0x688>
 8001990:	e08d      	b.n	8001aae <HAL_RCC_OscConfig+0x86a>
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019b4:	601a      	str	r2, [r3, #0]
  return result;
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_OscConfig+0x8fc>)
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	461a      	mov	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff f918 	bl	8000c08 <HAL_GetTick>
 80019d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f913 	bl	8000c08 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d902      	bls.n	80019f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f000 bc75 	b.w	80022de <HAL_RCC_OscConfig+0x109a>
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a44:	2202      	movs	r2, #2
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	6019      	str	r1, [r3, #0]
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f1a3 	rbit	r1, r3
 8001a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a82:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a86:	6019      	str	r1, [r3, #0]
  return result;
 8001a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d197      	bne.n	80019de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 81a5 	beq.w	8001e0e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_RCC_OscConfig+0x8f8>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_OscConfig+0x900>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d121      	bne.n	8001b54 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x900>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x900>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f874 	bl	8000c08 <HAL_GetTick>
 8001b20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	e010      	b.n	8001b48 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff f86f 	bl	8000c08 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d908      	bls.n	8001b48 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e3d1      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	10908120 	.word	0x10908120
 8001b44:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b8d      	ldr	r3, [pc, #564]	; (8001d80 <HAL_RCC_OscConfig+0xb3c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0e8      	beq.n	8001b26 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x92e>
 8001b64:	4b87      	ldr	r3, [pc, #540]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a86      	ldr	r2, [pc, #536]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e035      	b.n	8001bde <HAL_RCC_OscConfig+0x99a>
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x958>
 8001b82:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e020      	b.n	8001bde <HAL_RCC_OscConfig+0x99a>
 8001b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x982>
 8001bac:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a74      	ldr	r2, [pc, #464]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x99a>
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a6b      	ldr	r2, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8081 	beq.w	8001cf2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f80a 	bl	8000c08 <HAL_GetTick>
 8001bf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f805 	bl	8000c08 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e365      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c58:	601a      	str	r2, [r3, #0]
  return result;
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0xa3a>
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	e013      	b.n	8001ca6 <HAL_RCC_OscConfig+0xa62>
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001caa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cae:	2102      	movs	r1, #2
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cc8:	6011      	str	r1, [r2, #0]
  return result;
 8001cca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d084      	beq.n	8001bfa <HAL_RCC_OscConfig+0x9b6>
 8001cf0:	e083      	b.n	8001dfa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe ff89 	bl	8000c08 <HAL_GetTick>
 8001cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe ff84 	bl	8000c08 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e2e4      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d5a:	601a      	str	r2, [r3, #0]
  return result;
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0xb44>
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_OscConfig+0xb40>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	e017      	b.n	8001db0 <HAL_RCC_OscConfig+0xb6c>
 8001d80:	40007000 	.word	0x40007000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d90:	2202      	movs	r2, #2
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4bb3      	ldr	r3, [pc, #716]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001db8:	2102      	movs	r1, #2
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dce:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001dd2:	6011      	str	r1, [r2, #0]
  return result;
 8001dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dd8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d180      	bne.n	8001cfc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b9e      	ldr	r3, [pc, #632]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a9d      	ldr	r2, [pc, #628]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 825e 	beq.w	80022dc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e20:	4b96      	ldr	r3, [pc, #600]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	f000 821f 	beq.w	800226c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	f040 8170 	bne.w	8002120 <HAL_RCC_OscConfig+0xedc>
 8001e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e64:	601a      	str	r2, [r3, #0]
  return result;
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e6e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	461a      	mov	r2, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe febf 	bl	8000c08 <HAL_GetTick>
 8001e8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe feba 	bl	8000c08 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e21c      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ec8:	601a      	str	r2, [r3, #0]
  return result;
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ed2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_OscConfig+0xcaa>
 8001ee8:	4b64      	ldr	r3, [pc, #400]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e027      	b.n	8001f3e <HAL_RCC_OscConfig+0xcfa>
 8001eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f4a:	6011      	str	r1, [r2, #0]
 8001f4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	fa92 f1a2 	rbit	r1, r2
 8001f5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f5e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f62:	6011      	str	r1, [r2, #0]
  return result;
 8001f64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f68:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	fab2 f282 	clz	r2, r2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d182      	bne.n	8001e90 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8a:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	4937      	ldr	r1, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a19      	ldr	r1, [r3, #32]
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	492d      	ldr	r1, [pc, #180]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	fa93 f2a3 	rbit	r2, r3
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ff0:	601a      	str	r2, [r3, #0]
  return result;
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ffa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002006:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	461a      	mov	r2, r3
 800200e:	2301      	movs	r3, #1
 8002010:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe fdf9 	bl	8000c08 <HAL_GetTick>
 8002016:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201a:	e009      	b.n	8002030 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe fdf4 	bl	8000c08 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e156      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	fa93 f2a3 	rbit	r2, r3
 800204c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002050:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002054:	601a      	str	r2, [r3, #0]
  return result;
 8002056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800205e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_RCC_OscConfig+0xe3c>
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <HAL_RCC_OscConfig+0xe38>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e02a      	b.n	80020d0 <HAL_RCC_OscConfig+0xe8c>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002084:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4b86      	ldr	r3, [pc, #536]	; (80022e8 <HAL_RCC_OscConfig+0x10a4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fa92 f1a2 	rbit	r1, r2
 80020ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020f4:	6011      	str	r1, [r2, #0]
  return result;
 80020f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020fa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	f43f af7f 	beq.w	800201c <HAL_RCC_OscConfig+0xdd8>
 800211e:	e0dd      	b.n	80022dc <HAL_RCC_OscConfig+0x1098>
 8002120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002124:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002132:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002140:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002144:	601a      	str	r2, [r3, #0]
  return result;
 8002146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800214e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800215a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	461a      	mov	r2, r3
 8002162:	2300      	movs	r3, #0
 8002164:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe fd4f 	bl	8000c08 <HAL_GetTick>
 800216a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	e009      	b.n	8002184 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe fd4a 	bl	8000c08 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0ac      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800218c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021a8:	601a      	str	r2, [r3, #0]
  return result;
 80021aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0xf8a>
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x10a4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e027      	b.n	800221e <HAL_RCC_OscConfig+0xfda>
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x10a4>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002222:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002226:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800222a:	6011      	str	r1, [r2, #0]
 800222c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002230:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fa92 f1a2 	rbit	r1, r2
 800223a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800223e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002242:	6011      	str	r1, [r2, #0]
  return result;
 8002244:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002248:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	fab2 f282 	clz	r2, r2
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d182      	bne.n	8002170 <HAL_RCC_OscConfig+0xf2c>
 800226a:	e037      	b.n	80022dc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e02e      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x10a4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_RCC_OscConfig+0x10a4>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002290:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002294:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d117      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80022c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b09e      	sub	sp, #120	; 0x78
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e162      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b90      	ldr	r3, [pc, #576]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d910      	bls.n	8002334 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	498b      	ldr	r1, [pc, #556]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b89      	ldr	r3, [pc, #548]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e14a      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b82      	ldr	r3, [pc, #520]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	497f      	ldr	r1, [pc, #508]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80dc 	beq.w	8002518 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d13c      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xf6>
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_RCC_ClockConfig+0xa6>
 800238c:	4b6f      	ldr	r3, [pc, #444]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e00f      	b.n	80023b2 <HAL_RCC_ClockConfig+0xc6>
 8002392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	667b      	str	r3, [r7, #100]	; 0x64
 80023a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a4:	663b      	str	r3, [r7, #96]	; 0x60
 80023a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80023b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d17b      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0f3      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d13c      	bne.n	8002464 <HAL_RCC_ClockConfig+0x178>
 80023ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_ClockConfig+0x128>
 800240e:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e00f      	b.n	8002434 <HAL_RCC_ClockConfig+0x148>
 8002414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	643b      	str	r3, [r7, #64]	; 0x40
 8002428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002438:	63ba      	str	r2, [r7, #56]	; 0x38
 800243a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f002 021f 	and.w	r2, r2, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f202 	lsl.w	r2, r1, r2
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d13a      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b2      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
 8002464:	2302      	movs	r3, #2
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e00d      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1bc>
 800248c:	2302      	movs	r3, #2
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
 8002498:	2302      	movs	r3, #2
 800249a:	623b      	str	r3, [r7, #32]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2202      	movs	r2, #2
 80024aa:	61ba      	str	r2, [r7, #24]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	617a      	str	r2, [r7, #20]
  return result;
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e079      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	491a      	ldr	r1, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb8e 	bl	8000c08 <HAL_GetTick>
 80024ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fb8a 	bl	8000c08 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e061      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCC_ClockConfig+0x260>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d214      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4906      	ldr	r1, [pc, #24]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_RCC_ClockConfig+0x25c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e040      	b.n	80025ca <HAL_RCC_ClockConfig+0x2de>
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_ClockConfig+0x2e8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	491a      	ldr	r1, [pc, #104]	; (80025d4 <HAL_RCC_ClockConfig+0x2e8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_RCC_ClockConfig+0x2e8>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4912      	ldr	r1, [pc, #72]	; (80025d4 <HAL_RCC_ClockConfig+0x2e8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800258e:	f000 f829 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_RCC_ClockConfig+0x2e8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	22f0      	movs	r2, #240	; 0xf0
 800259e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	fa92 f2a2 	rbit	r2, r2
 80025a6:	60fa      	str	r2, [r7, #12]
  return result;
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	40d3      	lsrs	r3, r2
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x2ec>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	fa21 f303 	lsr.w	r3, r1, r3
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_RCC_ClockConfig+0x2f0>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCC_ClockConfig+0x2f4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe faf0 	bl	8000ba8 <HAL_InitTick>
  
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3778      	adds	r7, #120	; 0x78
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08004524 	.word	0x08004524
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b08b      	sub	sp, #44	; 0x2c
 80025e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x30>
 800260e:	2b08      	cmp	r3, #8
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x36>
 8002612:	e03f      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002616:	623b      	str	r3, [r7, #32]
      break;
 8002618:	e03f      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002620:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002624:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	fa92 f2a2 	rbit	r2, r2
 800262c:	607a      	str	r2, [r7, #4]
  return result;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	40d3      	lsrs	r3, r2
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	220f      	movs	r2, #15
 8002648:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	60fa      	str	r2, [r7, #12]
  return result;
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	40d3      	lsrs	r3, r2
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e007      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fbb2 f2f3 	udiv	r2, r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	623b      	str	r3, [r7, #32]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002696:	623b      	str	r3, [r7, #32]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	6a3b      	ldr	r3, [r7, #32]
}
 800269c:	4618      	mov	r0, r3
 800269e:	372c      	adds	r7, #44	; 0x2c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	0800453c 	.word	0x0800453c
 80026b4:	0800454c 	.word	0x0800454c

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026d6:	f7ff ffef 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	603a      	str	r2, [r7, #0]
  return result;
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	40d3      	lsrs	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08004534 	.word	0x08004534

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800271a:	f7ff ffcd 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 800271e:	4601      	mov	r1, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002728:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800272c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	fa92 f2a2 	rbit	r2, r2
 8002734:	603a      	str	r2, [r7, #0]
  return result;
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	40d3      	lsrs	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	08004534 	.word	0x08004534

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b092      	sub	sp, #72	; 0x48
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80d4 	beq.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277c:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
 8002794:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a41      	ldr	r2, [pc, #260]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe fa23 	bl	8000c08 <HAL_GetTick>
 80027c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe fa1f 	bl	8000c08 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1d6      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8084 	beq.w	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002800:	429a      	cmp	r2, r3
 8002802:	d07c      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	461a      	mov	r2, r3
 800282e:	2301      	movs	r3, #1
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	461a      	mov	r2, r3
 8002852:	2300      	movs	r3, #0
 8002854:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d04b      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe f9cf 	bl	8000c08 <HAL_GetTick>
 800286a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe f9cb 	bl	8000c08 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e180      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002884:	2302      	movs	r3, #2
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
  return result;
 800289c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d108      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028b2:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	e00d      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	10908100 	.word	0x10908100
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	4b9a      	ldr	r3, [pc, #616]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	613a      	str	r2, [r7, #16]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	60fa      	str	r2, [r7, #12]
  return result;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0b7      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028fe:	4b8f      	ldr	r3, [pc, #572]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	498c      	ldr	r1, [pc, #560]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a87      	ldr	r2, [pc, #540]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002930:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f023 0203 	bic.w	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	497f      	ldr	r1, [pc, #508]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800294e:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4978      	ldr	r1, [pc, #480]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296c:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4970      	ldr	r1, [pc, #448]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298a:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f023 0210 	bic.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4969      	ldr	r1, [pc, #420]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	4961      	ldr	r1, [pc, #388]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c6:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f023 0220 	bic.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	495a      	ldr	r1, [pc, #360]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029e4:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	4952      	ldr	r1, [pc, #328]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a02:	4b4e      	ldr	r3, [pc, #312]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	494b      	ldr	r1, [pc, #300]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a20:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4943      	ldr	r1, [pc, #268]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	493c      	ldr	r1, [pc, #240]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	4934      	ldr	r1, [pc, #208]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	492d      	ldr	r1, [pc, #180]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	4925      	ldr	r1, [pc, #148]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	491e      	ldr	r1, [pc, #120]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	4916      	ldr	r1, [pc, #88]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	490f      	ldr	r1, [pc, #60]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b2e:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	e002      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b42:	4913      	ldr	r1, [pc, #76]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	490b      	ldr	r1, [pc, #44]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7e:	4904      	ldr	r1, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3748      	adds	r7, #72	; 0x48
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e040      	b.n	8002c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fef6 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fbbc 	bl	8003350 <UART_SetConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fd84 	bl	80036f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fe0b 	bl	800383c <UART_CheckIdleState>
 8002c26:	4603      	mov	r3, r0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d178      	bne.n	8002d3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_UART_Transmit+0x24>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e071      	b.n	8002d3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2221      	movs	r2, #33	; 0x21
 8002c64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c66:	f7fd ffcf 	bl	8000c08 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	d108      	bne.n	8002c98 <HAL_UART_Transmit+0x68>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e003      	b.n	8002ca0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca0:	e030      	b.n	8002d04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fe6d 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e03c      	b.n	8002d3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	3302      	adds	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e008      	b.n	8002cf2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1c8      	bne.n	8002ca2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fe36 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e005      	b.n	8002d3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0ba      	sub	sp, #232	; 0xe8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d72:	4013      	ands	r3, r2
 8002d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d115      	bne.n	8002dac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00f      	beq.n	8002dac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 82ab 	beq.w	80032f8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
      }
      return;
 8002daa:	e2a5      	b.n	80032f8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8117 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_UART_IRQHandler+0x298>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 810a 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_UART_IRQHandler+0xbc>
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <HAL_UART_IRQHandler+0xec>
 8002e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d011      	beq.n	8002e60 <HAL_UART_IRQHandler+0x11c>
 8002e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e56:	f043 0202 	orr.w	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	f043 0208 	orr.w	r2, r3, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_UART_IRQHandler+0x18a>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8211 	beq.w	80032fc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04f      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fd97 	bl	8003a5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d141      	bne.n	8002fbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1d9      	bne.n	8002f3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d013      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_UART_IRQHandler+0x29c>)
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ff8a 	bl	8000eb4 <HAL_DMA_Abort_IT>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d017      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	e00f      	b.n	8002fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9b4 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	e00b      	b.n	8002fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9b0 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	e007      	b.n	8002fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9ac 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002fd4:	e192      	b.n	80032fc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd6:	bf00      	nop
    return;
 8002fd8:	e190      	b.n	80032fc <HAL_UART_IRQHandler+0x5b8>
 8002fda:	bf00      	nop
 8002fdc:	04000120 	.word	0x04000120
 8002fe0:	08003b23 	.word	0x08003b23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 814b 	bne.w	8003284 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8144 	beq.w	8003284 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 813d 	beq.w	8003284 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	f040 80b5 	bne.w	800318c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800302e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8164 	beq.w	8003300 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800303e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003042:	429a      	cmp	r2, r3
 8003044:	f080 815c 	bcs.w	8003300 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800304e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b20      	cmp	r3, #32
 800305a:	f000 8086 	beq.w	800316a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800308c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003094:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1da      	bne.n	800305e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3308      	adds	r3, #8
 80030ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e1      	bne.n	80030a8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003108:	66fa      	str	r2, [r7, #108]	; 0x6c
 800310a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800310e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e3      	bne.n	80030e4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	f023 0310 	bic.w	r3, r3, #16
 800313e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314c:	65bb      	str	r3, [r7, #88]	; 0x58
 800314e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800315a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e4      	bne.n	800312a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fe6c 	bl	8000e42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800317c:	b29b      	uxth	r3, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	b29b      	uxth	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f8d7 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800318a:	e0b9      	b.n	8003300 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ab 	beq.w	8003304 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80031ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a6 	beq.w	8003304 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
 80031dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e4      	bne.n	80031b8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3308      	adds	r3, #8
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	623b      	str	r3, [r7, #32]
   return(result);
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003212:	633a      	str	r2, [r7, #48]	; 0x30
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	60fb      	str	r3, [r7, #12]
   return(result);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	e841 2300 	strex	r3, r2, [r1]
 8003268:	617b      	str	r3, [r7, #20]
   return(result);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e4      	bne.n	800323a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f85b 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003282:	e03f      	b.n	8003304 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <HAL_UART_IRQHandler+0x56a>
 8003290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fc7b 	bl	8003ba2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032ac:	e02d      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01c      	beq.n	8003308 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
    }
    return;
 80032d6:	e017      	b.n	8003308 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d012      	beq.n	800330a <HAL_UART_IRQHandler+0x5c6>
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00c      	beq.n	800330a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fc2c 	bl	8003b4e <UART_EndTransmit_IT>
    return;
 80032f6:	e008      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
      return;
 80032f8:	bf00      	nop
 80032fa:	e006      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
    return;
 80032fc:	bf00      	nop
 80032fe:	e004      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003300:	bf00      	nop
 8003302:	e002      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003308:	bf00      	nop
  }

}
 800330a:	37e8      	adds	r7, #232	; 0xe8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <UART_SetConfig+0x274>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	430b      	orrs	r3, r1
 8003386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <UART_SetConfig+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d120      	bne.n	800340e <UART_SetConfig+0xbe>
 80033cc:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <UART_SetConfig+0x27c>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d817      	bhi.n	8003408 <UART_SetConfig+0xb8>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x90>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033fd 	.word	0x080033fd
 80033e8:	08003403 	.word	0x08003403
 80033ec:	080033f7 	.word	0x080033f7
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e0b5      	b.n	8003562 <UART_SetConfig+0x212>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e0b2      	b.n	8003562 <UART_SetConfig+0x212>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0af      	b.n	8003562 <UART_SetConfig+0x212>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e0ac      	b.n	8003562 <UART_SetConfig+0x212>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0a9      	b.n	8003562 <UART_SetConfig+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6f      	ldr	r2, [pc, #444]	; (80035d0 <UART_SetConfig+0x280>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d124      	bne.n	8003462 <UART_SetConfig+0x112>
 8003418:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <UART_SetConfig+0x27c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003420:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003424:	d011      	beq.n	800344a <UART_SetConfig+0xfa>
 8003426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800342a:	d817      	bhi.n	800345c <UART_SetConfig+0x10c>
 800342c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003430:	d011      	beq.n	8003456 <UART_SetConfig+0x106>
 8003432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003436:	d811      	bhi.n	800345c <UART_SetConfig+0x10c>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <UART_SetConfig+0xf4>
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d006      	beq.n	8003450 <UART_SetConfig+0x100>
 8003442:	e00b      	b.n	800345c <UART_SetConfig+0x10c>
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e08b      	b.n	8003562 <UART_SetConfig+0x212>
 800344a:	2302      	movs	r3, #2
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e088      	b.n	8003562 <UART_SetConfig+0x212>
 8003450:	2304      	movs	r3, #4
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e085      	b.n	8003562 <UART_SetConfig+0x212>
 8003456:	2308      	movs	r3, #8
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e082      	b.n	8003562 <UART_SetConfig+0x212>
 800345c:	2310      	movs	r3, #16
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e07f      	b.n	8003562 <UART_SetConfig+0x212>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <UART_SetConfig+0x284>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d124      	bne.n	80034b6 <UART_SetConfig+0x166>
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <UART_SetConfig+0x27c>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003474:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003478:	d011      	beq.n	800349e <UART_SetConfig+0x14e>
 800347a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800347e:	d817      	bhi.n	80034b0 <UART_SetConfig+0x160>
 8003480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003484:	d011      	beq.n	80034aa <UART_SetConfig+0x15a>
 8003486:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800348a:	d811      	bhi.n	80034b0 <UART_SetConfig+0x160>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <UART_SetConfig+0x148>
 8003490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x154>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x160>
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e061      	b.n	8003562 <UART_SetConfig+0x212>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e05e      	b.n	8003562 <UART_SetConfig+0x212>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e05b      	b.n	8003562 <UART_SetConfig+0x212>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e058      	b.n	8003562 <UART_SetConfig+0x212>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e055      	b.n	8003562 <UART_SetConfig+0x212>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <UART_SetConfig+0x288>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d124      	bne.n	800350a <UART_SetConfig+0x1ba>
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <UART_SetConfig+0x27c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034cc:	d011      	beq.n	80034f2 <UART_SetConfig+0x1a2>
 80034ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d2:	d817      	bhi.n	8003504 <UART_SetConfig+0x1b4>
 80034d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d8:	d011      	beq.n	80034fe <UART_SetConfig+0x1ae>
 80034da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034de:	d811      	bhi.n	8003504 <UART_SetConfig+0x1b4>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <UART_SetConfig+0x19c>
 80034e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e8:	d006      	beq.n	80034f8 <UART_SetConfig+0x1a8>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x1b4>
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e037      	b.n	8003562 <UART_SetConfig+0x212>
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e034      	b.n	8003562 <UART_SetConfig+0x212>
 80034f8:	2304      	movs	r3, #4
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e031      	b.n	8003562 <UART_SetConfig+0x212>
 80034fe:	2308      	movs	r3, #8
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e02e      	b.n	8003562 <UART_SetConfig+0x212>
 8003504:	2310      	movs	r3, #16
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e02b      	b.n	8003562 <UART_SetConfig+0x212>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a33      	ldr	r2, [pc, #204]	; (80035dc <UART_SetConfig+0x28c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d124      	bne.n	800355e <UART_SetConfig+0x20e>
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <UART_SetConfig+0x27c>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800351c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003520:	d011      	beq.n	8003546 <UART_SetConfig+0x1f6>
 8003522:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003526:	d817      	bhi.n	8003558 <UART_SetConfig+0x208>
 8003528:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800352c:	d011      	beq.n	8003552 <UART_SetConfig+0x202>
 800352e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003532:	d811      	bhi.n	8003558 <UART_SetConfig+0x208>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <UART_SetConfig+0x1f0>
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d006      	beq.n	800354c <UART_SetConfig+0x1fc>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x208>
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e00d      	b.n	8003562 <UART_SetConfig+0x212>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e00a      	b.n	8003562 <UART_SetConfig+0x212>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e007      	b.n	8003562 <UART_SetConfig+0x212>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e004      	b.n	8003562 <UART_SetConfig+0x212>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e001      	b.n	8003562 <UART_SetConfig+0x212>
 800355e:	2310      	movs	r3, #16
 8003560:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d16b      	bne.n	8003644 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800356c:	7ffb      	ldrb	r3, [r7, #31]
 800356e:	2b08      	cmp	r3, #8
 8003570:	d838      	bhi.n	80035e4 <UART_SetConfig+0x294>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0x228>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035a5 	.word	0x080035a5
 8003580:	080035ad 	.word	0x080035ad
 8003584:	080035e5 	.word	0x080035e5
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035e5 	.word	0x080035e5
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080035bb 	.word	0x080035bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7ff f898 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80035a0:	61b8      	str	r0, [r7, #24]
        break;
 80035a2:	e024      	b.n	80035ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7ff f8b6 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 80035a8:	61b8      	str	r0, [r7, #24]
        break;
 80035aa:	e020      	b.n	80035ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <UART_SetConfig+0x290>)
 80035ae:	61bb      	str	r3, [r7, #24]
        break;
 80035b0:	e01d      	b.n	80035ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7ff f817 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80035b6:	61b8      	str	r0, [r7, #24]
        break;
 80035b8:	e019      	b.n	80035ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e015      	b.n	80035ee <UART_SetConfig+0x29e>
 80035c2:	bf00      	nop
 80035c4:	efff69f3 	.word	0xefff69f3
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40004400 	.word	0x40004400
 80035d4:	40004800 	.word	0x40004800
 80035d8:	40004c00 	.word	0x40004c00
 80035dc:	40005000 	.word	0x40005000
 80035e0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77bb      	strb	r3, [r7, #30]
        break;
 80035ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d073      	beq.n	80036dc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	005a      	lsls	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	441a      	add	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d916      	bls.n	800363e <UART_SetConfig+0x2ee>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d212      	bcs.n	800363e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f023 030f 	bic.w	r3, r3, #15
 8003620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	b29a      	uxth	r2, r3
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	4313      	orrs	r3, r2
 8003632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	89fa      	ldrh	r2, [r7, #14]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e04e      	b.n	80036dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	77bb      	strb	r3, [r7, #30]
 8003642:	e04b      	b.n	80036dc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d827      	bhi.n	800369a <UART_SetConfig+0x34a>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x300>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003675 	.word	0x08003675
 8003654:	0800367d 	.word	0x0800367d
 8003658:	08003685 	.word	0x08003685
 800365c:	0800369b 	.word	0x0800369b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800369b 	.word	0x0800369b
 8003668:	0800369b 	.word	0x0800369b
 800366c:	0800369b 	.word	0x0800369b
 8003670:	08003693 	.word	0x08003693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7ff f82c 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003678:	61b8      	str	r0, [r7, #24]
        break;
 800367a:	e013      	b.n	80036a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff f84a 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e00f      	b.n	80036a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <UART_SetConfig+0x3a4>)
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00c      	b.n	80036a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7fe ffab 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800368e:	61b8      	str	r0, [r7, #24]
        break;
 8003690:	e008      	b.n	80036a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003696:	61bb      	str	r3, [r7, #24]
        break;
 8003698:	e004      	b.n	80036a4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77bb      	strb	r3, [r7, #30]
        break;
 80036a2:	bf00      	nop
    }

    if (pclk != 0U)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d018      	beq.n	80036dc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	085a      	lsrs	r2, r3, #1
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	441a      	add	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d909      	bls.n	80036d8 <UART_SetConfig+0x388>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d205      	bcs.n	80036d8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e001      	b.n	80036dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	007a1200 	.word	0x007a1200

080036f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d10a      	bne.n	800380e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
  }
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b098      	sub	sp, #96	; 0x60
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800384c:	f7fd f9dc 	bl	8000c08 <HAL_GetTick>
 8003850:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d12e      	bne.n	80038be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f88c 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d021      	beq.n	80038be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388e:	653b      	str	r3, [r7, #80]	; 0x50
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
 800389a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800389e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e6      	bne.n	800387a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e062      	b.n	8003984 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d149      	bne.n	8003960 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f856 	bl	800398c <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03c      	beq.n	8003960 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	623b      	str	r3, [r7, #32]
   return(result);
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e6      	bne.n	80038e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	60fb      	str	r3, [r7, #12]
   return(result);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003938:	61fa      	str	r2, [r7, #28]
 800393a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	617b      	str	r3, [r7, #20]
   return(result);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e011      	b.n	8003984 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3758      	adds	r7, #88	; 0x58
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399c:	e049      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d045      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fd f92f 	bl	8000c08 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <UART_WaitOnFlagUntilTimeout+0x30>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e048      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d031      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d110      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2208      	movs	r2, #8
 80039e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f838 	bl	8003a5a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2208      	movs	r2, #8
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e029      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d111      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f81e 	bl	8003a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e00f      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d0a6      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b095      	sub	sp, #84	; 0x54
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	643b      	str	r3, [r7, #64]	; 0x40
 8003a82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d118      	bne.n	8003b02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	613b      	str	r3, [r7, #16]
   return(result);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e6      	bne.n	8003ad0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b16:	bf00      	nop
 8003b18:	3754      	adds	r7, #84	; 0x54
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fbef 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6979      	ldr	r1, [r7, #20]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	613b      	str	r3, [r7, #16]
   return(result);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fbbb 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <siprintf>:
 8003bb8:	b40e      	push	{r1, r2, r3}
 8003bba:	b500      	push	{lr}
 8003bbc:	b09c      	sub	sp, #112	; 0x70
 8003bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc0:	9002      	str	r0, [sp, #8]
 8003bc2:	9006      	str	r0, [sp, #24]
 8003bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc8:	4809      	ldr	r0, [pc, #36]	; (8003bf0 <siprintf+0x38>)
 8003bca:	9107      	str	r1, [sp, #28]
 8003bcc:	9104      	str	r1, [sp, #16]
 8003bce:	4909      	ldr	r1, [pc, #36]	; (8003bf4 <siprintf+0x3c>)
 8003bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bd4:	9105      	str	r1, [sp, #20]
 8003bd6:	6800      	ldr	r0, [r0, #0]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	a902      	add	r1, sp, #8
 8003bdc:	f000 f992 	bl	8003f04 <_svfiprintf_r>
 8003be0:	9b02      	ldr	r3, [sp, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	b01c      	add	sp, #112	; 0x70
 8003be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bec:	b003      	add	sp, #12
 8003bee:	4770      	bx	lr
 8003bf0:	20000058 	.word	0x20000058
 8003bf4:	ffff0208 	.word	0xffff0208

08003bf8 <memset>:
 8003bf8:	4402      	add	r2, r0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d100      	bne.n	8003c02 <memset+0xa>
 8003c00:	4770      	bx	lr
 8003c02:	f803 1b01 	strb.w	r1, [r3], #1
 8003c06:	e7f9      	b.n	8003bfc <memset+0x4>

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000058 	.word	0x20000058

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	; (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	; (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	; (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 fc6a 	bl	8004500 <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08004590 	.word	0x08004590
 8003c50:	08004590 	.word	0x08004590
 8003c54:	08004590 	.word	0x08004590
 8003c58:	08004594 	.word	0x08004594

08003c5c <__retarget_lock_acquire_recursive>:
 8003c5c:	4770      	bx	lr

08003c5e <__retarget_lock_release_recursive>:
 8003c5e:	4770      	bx	lr

08003c60 <_free_r>:
 8003c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c62:	2900      	cmp	r1, #0
 8003c64:	d044      	beq.n	8003cf0 <_free_r+0x90>
 8003c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6a:	9001      	str	r0, [sp, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c72:	bfb8      	it	lt
 8003c74:	18e4      	addlt	r4, r4, r3
 8003c76:	f000 f8df 	bl	8003e38 <__malloc_lock>
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <_free_r+0x94>)
 8003c7c:	9801      	ldr	r0, [sp, #4]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	b933      	cbnz	r3, 8003c90 <_free_r+0x30>
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	6014      	str	r4, [r2, #0]
 8003c86:	b003      	add	sp, #12
 8003c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c8c:	f000 b8da 	b.w	8003e44 <__malloc_unlock>
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d908      	bls.n	8003ca6 <_free_r+0x46>
 8003c94:	6825      	ldr	r5, [r4, #0]
 8003c96:	1961      	adds	r1, r4, r5
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf01      	itttt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	1949      	addeq	r1, r1, r5
 8003ca2:	6021      	streq	r1, [r4, #0]
 8003ca4:	e7ed      	b.n	8003c82 <_free_r+0x22>
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b10b      	cbz	r3, 8003cb0 <_free_r+0x50>
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d9fa      	bls.n	8003ca6 <_free_r+0x46>
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	1855      	adds	r5, r2, r1
 8003cb4:	42a5      	cmp	r5, r4
 8003cb6:	d10b      	bne.n	8003cd0 <_free_r+0x70>
 8003cb8:	6824      	ldr	r4, [r4, #0]
 8003cba:	4421      	add	r1, r4
 8003cbc:	1854      	adds	r4, r2, r1
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	d1e0      	bne.n	8003c86 <_free_r+0x26>
 8003cc4:	681c      	ldr	r4, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	6053      	str	r3, [r2, #4]
 8003cca:	440c      	add	r4, r1
 8003ccc:	6014      	str	r4, [r2, #0]
 8003cce:	e7da      	b.n	8003c86 <_free_r+0x26>
 8003cd0:	d902      	bls.n	8003cd8 <_free_r+0x78>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	6003      	str	r3, [r0, #0]
 8003cd6:	e7d6      	b.n	8003c86 <_free_r+0x26>
 8003cd8:	6825      	ldr	r5, [r4, #0]
 8003cda:	1961      	adds	r1, r4, r5
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	bf04      	itt	eq
 8003ce0:	6819      	ldreq	r1, [r3, #0]
 8003ce2:	685b      	ldreq	r3, [r3, #4]
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	bf04      	itt	eq
 8003ce8:	1949      	addeq	r1, r1, r5
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	6054      	str	r4, [r2, #4]
 8003cee:	e7ca      	b.n	8003c86 <_free_r+0x26>
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bd30      	pop	{r4, r5, pc}
 8003cf4:	20000260 	.word	0x20000260

08003cf8 <sbrk_aligned>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4e0e      	ldr	r6, [pc, #56]	; (8003d34 <sbrk_aligned+0x3c>)
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	4605      	mov	r5, r0
 8003d02:	b911      	cbnz	r1, 8003d0a <sbrk_aligned+0x12>
 8003d04:	f000 fba6 	bl	8004454 <_sbrk_r>
 8003d08:	6030      	str	r0, [r6, #0]
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f000 fba1 	bl	8004454 <_sbrk_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	d00a      	beq.n	8003d2c <sbrk_aligned+0x34>
 8003d16:	1cc4      	adds	r4, r0, #3
 8003d18:	f024 0403 	bic.w	r4, r4, #3
 8003d1c:	42a0      	cmp	r0, r4
 8003d1e:	d007      	beq.n	8003d30 <sbrk_aligned+0x38>
 8003d20:	1a21      	subs	r1, r4, r0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 fb96 	bl	8004454 <_sbrk_r>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d101      	bne.n	8003d30 <sbrk_aligned+0x38>
 8003d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003d30:	4620      	mov	r0, r4
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	20000264 	.word	0x20000264

08003d38 <_malloc_r>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	1ccd      	adds	r5, r1, #3
 8003d3e:	f025 0503 	bic.w	r5, r5, #3
 8003d42:	3508      	adds	r5, #8
 8003d44:	2d0c      	cmp	r5, #12
 8003d46:	bf38      	it	cc
 8003d48:	250c      	movcc	r5, #12
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	db01      	blt.n	8003d54 <_malloc_r+0x1c>
 8003d50:	42a9      	cmp	r1, r5
 8003d52:	d905      	bls.n	8003d60 <_malloc_r+0x28>
 8003d54:	230c      	movs	r3, #12
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e34 <_malloc_r+0xfc>
 8003d64:	f000 f868 	bl	8003e38 <__malloc_lock>
 8003d68:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	bb5c      	cbnz	r4, 8003dc8 <_malloc_r+0x90>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7ff ffc0 	bl	8003cf8 <sbrk_aligned>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	d155      	bne.n	8003e2a <_malloc_r+0xf2>
 8003d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003d82:	4626      	mov	r6, r4
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	d145      	bne.n	8003e14 <_malloc_r+0xdc>
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d048      	beq.n	8003e1e <_malloc_r+0xe6>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4638      	mov	r0, r7
 8003d92:	eb04 0903 	add.w	r9, r4, r3
 8003d96:	f000 fb5d 	bl	8004454 <_sbrk_r>
 8003d9a:	4581      	cmp	r9, r0
 8003d9c:	d13f      	bne.n	8003e1e <_malloc_r+0xe6>
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	1a6d      	subs	r5, r5, r1
 8003da2:	4629      	mov	r1, r5
 8003da4:	4638      	mov	r0, r7
 8003da6:	f7ff ffa7 	bl	8003cf8 <sbrk_aligned>
 8003daa:	3001      	adds	r0, #1
 8003dac:	d037      	beq.n	8003e1e <_malloc_r+0xe6>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	442b      	add	r3, r5
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	f8d8 3000 	ldr.w	r3, [r8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d038      	beq.n	8003e2e <_malloc_r+0xf6>
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	42a2      	cmp	r2, r4
 8003dc0:	d12b      	bne.n	8003e1a <_malloc_r+0xe2>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e00f      	b.n	8003de8 <_malloc_r+0xb0>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	1b52      	subs	r2, r2, r5
 8003dcc:	d41f      	bmi.n	8003e0e <_malloc_r+0xd6>
 8003dce:	2a0b      	cmp	r2, #11
 8003dd0:	d917      	bls.n	8003e02 <_malloc_r+0xca>
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	6059      	strne	r1, [r3, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	bf08      	it	eq
 8003de0:	f8c8 1000 	streq.w	r1, [r8]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4638      	mov	r0, r7
 8003dea:	f104 060b 	add.w	r6, r4, #11
 8003dee:	f000 f829 	bl	8003e44 <__malloc_unlock>
 8003df2:	f026 0607 	bic.w	r6, r6, #7
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	1af2      	subs	r2, r6, r3
 8003dfa:	d0ae      	beq.n	8003d5a <_malloc_r+0x22>
 8003dfc:	1b9b      	subs	r3, r3, r6
 8003dfe:	50a3      	str	r3, [r4, r2]
 8003e00:	e7ab      	b.n	8003d5a <_malloc_r+0x22>
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	6862      	ldr	r2, [r4, #4]
 8003e06:	d1dd      	bne.n	8003dc4 <_malloc_r+0x8c>
 8003e08:	f8c8 2000 	str.w	r2, [r8]
 8003e0c:	e7ec      	b.n	8003de8 <_malloc_r+0xb0>
 8003e0e:	4623      	mov	r3, r4
 8003e10:	6864      	ldr	r4, [r4, #4]
 8003e12:	e7ac      	b.n	8003d6e <_malloc_r+0x36>
 8003e14:	4634      	mov	r4, r6
 8003e16:	6876      	ldr	r6, [r6, #4]
 8003e18:	e7b4      	b.n	8003d84 <_malloc_r+0x4c>
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	e7cc      	b.n	8003db8 <_malloc_r+0x80>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 f80e 	bl	8003e44 <__malloc_unlock>
 8003e28:	e797      	b.n	8003d5a <_malloc_r+0x22>
 8003e2a:	6025      	str	r5, [r4, #0]
 8003e2c:	e7dc      	b.n	8003de8 <_malloc_r+0xb0>
 8003e2e:	605b      	str	r3, [r3, #4]
 8003e30:	deff      	udf	#255	; 0xff
 8003e32:	bf00      	nop
 8003e34:	20000260 	.word	0x20000260

08003e38 <__malloc_lock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__malloc_lock+0x8>)
 8003e3a:	f7ff bf0f 	b.w	8003c5c <__retarget_lock_acquire_recursive>
 8003e3e:	bf00      	nop
 8003e40:	2000025c 	.word	0x2000025c

08003e44 <__malloc_unlock>:
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <__malloc_unlock+0x8>)
 8003e46:	f7ff bf0a 	b.w	8003c5e <__retarget_lock_release_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	2000025c 	.word	0x2000025c

08003e50 <__ssputs_r>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	688e      	ldr	r6, [r1, #8]
 8003e56:	461f      	mov	r7, r3
 8003e58:	42be      	cmp	r6, r7
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	4682      	mov	sl, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	4690      	mov	r8, r2
 8003e62:	d82c      	bhi.n	8003ebe <__ssputs_r+0x6e>
 8003e64:	898a      	ldrh	r2, [r1, #12]
 8003e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e6a:	d026      	beq.n	8003eba <__ssputs_r+0x6a>
 8003e6c:	6965      	ldr	r5, [r4, #20]
 8003e6e:	6909      	ldr	r1, [r1, #16]
 8003e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e74:	eba3 0901 	sub.w	r9, r3, r1
 8003e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e7c:	1c7b      	adds	r3, r7, #1
 8003e7e:	444b      	add	r3, r9
 8003e80:	106d      	asrs	r5, r5, #1
 8003e82:	429d      	cmp	r5, r3
 8003e84:	bf38      	it	cc
 8003e86:	461d      	movcc	r5, r3
 8003e88:	0553      	lsls	r3, r2, #21
 8003e8a:	d527      	bpl.n	8003edc <__ssputs_r+0x8c>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7ff ff53 	bl	8003d38 <_malloc_r>
 8003e92:	4606      	mov	r6, r0
 8003e94:	b360      	cbz	r0, 8003ef0 <__ssputs_r+0xa0>
 8003e96:	6921      	ldr	r1, [r4, #16]
 8003e98:	464a      	mov	r2, r9
 8003e9a:	f000 faeb 	bl	8004474 <memcpy>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	6126      	str	r6, [r4, #16]
 8003eac:	6165      	str	r5, [r4, #20]
 8003eae:	444e      	add	r6, r9
 8003eb0:	eba5 0509 	sub.w	r5, r5, r9
 8003eb4:	6026      	str	r6, [r4, #0]
 8003eb6:	60a5      	str	r5, [r4, #8]
 8003eb8:	463e      	mov	r6, r7
 8003eba:	42be      	cmp	r6, r7
 8003ebc:	d900      	bls.n	8003ec0 <__ssputs_r+0x70>
 8003ebe:	463e      	mov	r6, r7
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	f000 faab 	bl	8004420 <memmove>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	1b9b      	subs	r3, r3, r6
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	4433      	add	r3, r6
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	462a      	mov	r2, r5
 8003ede:	f000 fad7 	bl	8004490 <_realloc_r>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1e0      	bne.n	8003eaa <__ssputs_r+0x5a>
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	4650      	mov	r0, sl
 8003eec:	f7ff feb8 	bl	8003c60 <_free_r>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	f8ca 3000 	str.w	r3, [sl]
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003efc:	81a3      	strh	r3, [r4, #12]
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	e7e9      	b.n	8003ed8 <__ssputs_r+0x88>

08003f04 <_svfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	4698      	mov	r8, r3
 8003f0a:	898b      	ldrh	r3, [r1, #12]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	b09d      	sub	sp, #116	; 0x74
 8003f10:	4607      	mov	r7, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	d50e      	bpl.n	8003f36 <_svfiprintf_r+0x32>
 8003f18:	690b      	ldr	r3, [r1, #16]
 8003f1a:	b963      	cbnz	r3, 8003f36 <_svfiprintf_r+0x32>
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	f7ff ff0b 	bl	8003d38 <_malloc_r>
 8003f22:	6028      	str	r0, [r5, #0]
 8003f24:	6128      	str	r0, [r5, #16]
 8003f26:	b920      	cbnz	r0, 8003f32 <_svfiprintf_r+0x2e>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e0d0      	b.n	80040d4 <_svfiprintf_r+0x1d0>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	616b      	str	r3, [r5, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f44:	2330      	movs	r3, #48	; 0x30
 8003f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040ec <_svfiprintf_r+0x1e8>
 8003f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f4e:	f04f 0901 	mov.w	r9, #1
 8003f52:	4623      	mov	r3, r4
 8003f54:	469a      	mov	sl, r3
 8003f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5a:	b10a      	cbz	r2, 8003f60 <_svfiprintf_r+0x5c>
 8003f5c:	2a25      	cmp	r2, #37	; 0x25
 8003f5e:	d1f9      	bne.n	8003f54 <_svfiprintf_r+0x50>
 8003f60:	ebba 0b04 	subs.w	fp, sl, r4
 8003f64:	d00b      	beq.n	8003f7e <_svfiprintf_r+0x7a>
 8003f66:	465b      	mov	r3, fp
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff6f 	bl	8003e50 <__ssputs_r>
 8003f72:	3001      	adds	r0, #1
 8003f74:	f000 80a9 	beq.w	80040ca <_svfiprintf_r+0x1c6>
 8003f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7a:	445a      	add	r2, fp
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a1 	beq.w	80040ca <_svfiprintf_r+0x1c6>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f92:	f10a 0a01 	add.w	sl, sl, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	4850      	ldr	r0, [pc, #320]	; (80040ec <_svfiprintf_r+0x1e8>)
 8003faa:	f7fc f921 	bl	80001f0 <memchr>
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	b9d8      	cbnz	r0, 8003fea <_svfiprintf_r+0xe6>
 8003fb2:	06d0      	lsls	r0, r2, #27
 8003fb4:	bf44      	itt	mi
 8003fb6:	2320      	movmi	r3, #32
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	0711      	lsls	r1, r2, #28
 8003fbe:	bf44      	itt	mi
 8003fc0:	232b      	movmi	r3, #43	; 0x2b
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fca:	2b2a      	cmp	r3, #42	; 0x2a
 8003fcc:	d015      	beq.n	8003ffa <_svfiprintf_r+0xf6>
 8003fce:	9a07      	ldr	r2, [sp, #28]
 8003fd0:	4654      	mov	r4, sl
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fde:	3b30      	subs	r3, #48	; 0x30
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d94d      	bls.n	8004080 <_svfiprintf_r+0x17c>
 8003fe4:	b1b0      	cbz	r0, 8004014 <_svfiprintf_r+0x110>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e014      	b.n	8004014 <_svfiprintf_r+0x110>
 8003fea:	eba0 0308 	sub.w	r3, r0, r8
 8003fee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	9304      	str	r3, [sp, #16]
 8003ff6:	46a2      	mov	sl, r4
 8003ff8:	e7d2      	b.n	8003fa0 <_svfiprintf_r+0x9c>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d19      	adds	r1, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9103      	str	r1, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbb      	ittet	lt
 8004006:	425b      	neglt	r3, r3
 8004008:	f042 0202 	orrlt.w	r2, r2, #2
 800400c:	9307      	strge	r3, [sp, #28]
 800400e:	9307      	strlt	r3, [sp, #28]
 8004010:	bfb8      	it	lt
 8004012:	9204      	strlt	r2, [sp, #16]
 8004014:	7823      	ldrb	r3, [r4, #0]
 8004016:	2b2e      	cmp	r3, #46	; 0x2e
 8004018:	d10c      	bne.n	8004034 <_svfiprintf_r+0x130>
 800401a:	7863      	ldrb	r3, [r4, #1]
 800401c:	2b2a      	cmp	r3, #42	; 0x2a
 800401e:	d134      	bne.n	800408a <_svfiprintf_r+0x186>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9203      	str	r2, [sp, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfb8      	it	lt
 800402c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004030:	3402      	adds	r4, #2
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80040fc <_svfiprintf_r+0x1f8>
 8004038:	7821      	ldrb	r1, [r4, #0]
 800403a:	2203      	movs	r2, #3
 800403c:	4650      	mov	r0, sl
 800403e:	f7fc f8d7 	bl	80001f0 <memchr>
 8004042:	b138      	cbz	r0, 8004054 <_svfiprintf_r+0x150>
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	eba0 000a 	sub.w	r0, r0, sl
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	4082      	lsls	r2, r0
 800404e:	4313      	orrs	r3, r2
 8004050:	3401      	adds	r4, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004058:	4825      	ldr	r0, [pc, #148]	; (80040f0 <_svfiprintf_r+0x1ec>)
 800405a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800405e:	2206      	movs	r2, #6
 8004060:	f7fc f8c6 	bl	80001f0 <memchr>
 8004064:	2800      	cmp	r0, #0
 8004066:	d038      	beq.n	80040da <_svfiprintf_r+0x1d6>
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <_svfiprintf_r+0x1f0>)
 800406a:	bb1b      	cbnz	r3, 80040b4 <_svfiprintf_r+0x1b0>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	3307      	adds	r3, #7
 8004070:	f023 0307 	bic.w	r3, r3, #7
 8004074:	3308      	adds	r3, #8
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407a:	4433      	add	r3, r6
 800407c:	9309      	str	r3, [sp, #36]	; 0x24
 800407e:	e768      	b.n	8003f52 <_svfiprintf_r+0x4e>
 8004080:	fb0c 3202 	mla	r2, ip, r2, r3
 8004084:	460c      	mov	r4, r1
 8004086:	2001      	movs	r0, #1
 8004088:	e7a6      	b.n	8003fd8 <_svfiprintf_r+0xd4>
 800408a:	2300      	movs	r3, #0
 800408c:	3401      	adds	r4, #1
 800408e:	9305      	str	r3, [sp, #20]
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0c0a 	mov.w	ip, #10
 8004096:	4620      	mov	r0, r4
 8004098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409c:	3a30      	subs	r2, #48	; 0x30
 800409e:	2a09      	cmp	r2, #9
 80040a0:	d903      	bls.n	80040aa <_svfiprintf_r+0x1a6>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0c6      	beq.n	8004034 <_svfiprintf_r+0x130>
 80040a6:	9105      	str	r1, [sp, #20]
 80040a8:	e7c4      	b.n	8004034 <_svfiprintf_r+0x130>
 80040aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ae:	4604      	mov	r4, r0
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7f0      	b.n	8004096 <_svfiprintf_r+0x192>
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <_svfiprintf_r+0x1f4>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4638      	mov	r0, r7
 80040c0:	f3af 8000 	nop.w
 80040c4:	1c42      	adds	r2, r0, #1
 80040c6:	4606      	mov	r6, r0
 80040c8:	d1d6      	bne.n	8004078 <_svfiprintf_r+0x174>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	065b      	lsls	r3, r3, #25
 80040ce:	f53f af2d 	bmi.w	8003f2c <_svfiprintf_r+0x28>
 80040d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d4:	b01d      	add	sp, #116	; 0x74
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	ab03      	add	r3, sp, #12
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	462a      	mov	r2, r5
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <_svfiprintf_r+0x1f4>)
 80040e2:	a904      	add	r1, sp, #16
 80040e4:	4638      	mov	r0, r7
 80040e6:	f000 f879 	bl	80041dc <_printf_i>
 80040ea:	e7eb      	b.n	80040c4 <_svfiprintf_r+0x1c0>
 80040ec:	0800455c 	.word	0x0800455c
 80040f0:	08004566 	.word	0x08004566
 80040f4:	00000000 	.word	0x00000000
 80040f8:	08003e51 	.word	0x08003e51
 80040fc:	08004562 	.word	0x08004562

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4699      	mov	r9, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004110:	4293      	cmp	r3, r2
 8004112:	bfb8      	it	lt
 8004114:	4613      	movlt	r3, r2
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800411c:	4607      	mov	r7, r0
 800411e:	460c      	mov	r4, r1
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc26      	bgt.n	8004196 <_printf_common+0x96>
 8004148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800414c:	1e13      	subs	r3, r2, #0
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d42b      	bmi.n	80041b0 <_printf_common+0xb0>
 8004158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d01e      	beq.n	80041a4 <_printf_common+0xa4>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf02      	ittt	eq
 8004172:	68e5      	ldreq	r5, [r4, #12]
 8004174:	6833      	ldreq	r3, [r6, #0]
 8004176:	1aed      	subeq	r5, r5, r3
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	bf0c      	ite	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	2500      	movne	r5, #0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfc4      	itt	gt
 8004186:	1a9b      	subgt	r3, r3, r2
 8004188:	18ed      	addgt	r5, r5, r3
 800418a:	2600      	movs	r6, #0
 800418c:	341a      	adds	r4, #26
 800418e:	42b5      	cmp	r5, r6
 8004190:	d11a      	bne.n	80041c8 <_printf_common+0xc8>
 8004192:	2000      	movs	r0, #0
 8004194:	e008      	b.n	80041a8 <_printf_common+0xa8>
 8004196:	2301      	movs	r3, #1
 8004198:	4652      	mov	r2, sl
 800419a:	4649      	mov	r1, r9
 800419c:	4638      	mov	r0, r7
 800419e:	47c0      	blx	r8
 80041a0:	3001      	adds	r0, #1
 80041a2:	d103      	bne.n	80041ac <_printf_common+0xac>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	3501      	adds	r5, #1
 80041ae:	e7c6      	b.n	800413e <_printf_common+0x3e>
 80041b0:	18e1      	adds	r1, r4, r3
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	2030      	movs	r0, #48	; 0x30
 80041b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ba:	4422      	add	r2, r4
 80041bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c4:	3302      	adds	r3, #2
 80041c6:	e7c7      	b.n	8004158 <_printf_common+0x58>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4622      	mov	r2, r4
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d0e6      	beq.n	80041a4 <_printf_common+0xa4>
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7d9      	b.n	800418e <_printf_common+0x8e>
	...

080041dc <_printf_i>:
 80041dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	7e0f      	ldrb	r7, [r1, #24]
 80041e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e4:	2f78      	cmp	r7, #120	; 0x78
 80041e6:	4691      	mov	r9, r2
 80041e8:	4680      	mov	r8, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	469a      	mov	sl, r3
 80041ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f2:	d807      	bhi.n	8004204 <_printf_i+0x28>
 80041f4:	2f62      	cmp	r7, #98	; 0x62
 80041f6:	d80a      	bhi.n	800420e <_printf_i+0x32>
 80041f8:	2f00      	cmp	r7, #0
 80041fa:	f000 80d4 	beq.w	80043a6 <_printf_i+0x1ca>
 80041fe:	2f58      	cmp	r7, #88	; 0x58
 8004200:	f000 80c0 	beq.w	8004384 <_printf_i+0x1a8>
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800420c:	e03a      	b.n	8004284 <_printf_i+0xa8>
 800420e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004212:	2b15      	cmp	r3, #21
 8004214:	d8f6      	bhi.n	8004204 <_printf_i+0x28>
 8004216:	a101      	add	r1, pc, #4	; (adr r1, 800421c <_printf_i+0x40>)
 8004218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800421c:	08004275 	.word	0x08004275
 8004220:	08004289 	.word	0x08004289
 8004224:	08004205 	.word	0x08004205
 8004228:	08004205 	.word	0x08004205
 800422c:	08004205 	.word	0x08004205
 8004230:	08004205 	.word	0x08004205
 8004234:	08004289 	.word	0x08004289
 8004238:	08004205 	.word	0x08004205
 800423c:	08004205 	.word	0x08004205
 8004240:	08004205 	.word	0x08004205
 8004244:	08004205 	.word	0x08004205
 8004248:	0800438d 	.word	0x0800438d
 800424c:	080042b5 	.word	0x080042b5
 8004250:	08004347 	.word	0x08004347
 8004254:	08004205 	.word	0x08004205
 8004258:	08004205 	.word	0x08004205
 800425c:	080043af 	.word	0x080043af
 8004260:	08004205 	.word	0x08004205
 8004264:	080042b5 	.word	0x080042b5
 8004268:	08004205 	.word	0x08004205
 800426c:	08004205 	.word	0x08004205
 8004270:	0800434f 	.word	0x0800434f
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	602a      	str	r2, [r5, #0]
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004284:	2301      	movs	r3, #1
 8004286:	e09f      	b.n	80043c8 <_printf_i+0x1ec>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	0607      	lsls	r7, r0, #24
 800428e:	f103 0104 	add.w	r1, r3, #4
 8004292:	6029      	str	r1, [r5, #0]
 8004294:	d501      	bpl.n	800429a <_printf_i+0xbe>
 8004296:	681e      	ldr	r6, [r3, #0]
 8004298:	e003      	b.n	80042a2 <_printf_i+0xc6>
 800429a:	0646      	lsls	r6, r0, #25
 800429c:	d5fb      	bpl.n	8004296 <_printf_i+0xba>
 800429e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	da03      	bge.n	80042ae <_printf_i+0xd2>
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	4276      	negs	r6, r6
 80042aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ae:	485a      	ldr	r0, [pc, #360]	; (8004418 <_printf_i+0x23c>)
 80042b0:	230a      	movs	r3, #10
 80042b2:	e012      	b.n	80042da <_printf_i+0xfe>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	6029      	str	r1, [r5, #0]
 80042bc:	0605      	lsls	r5, r0, #24
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0xe8>
 80042c0:	681e      	ldr	r6, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0xee>
 80042c4:	0641      	lsls	r1, r0, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0xe4>
 80042c8:	881e      	ldrh	r6, [r3, #0]
 80042ca:	4853      	ldr	r0, [pc, #332]	; (8004418 <_printf_i+0x23c>)
 80042cc:	2f6f      	cmp	r7, #111	; 0x6f
 80042ce:	bf0c      	ite	eq
 80042d0:	2308      	moveq	r3, #8
 80042d2:	230a      	movne	r3, #10
 80042d4:	2100      	movs	r1, #0
 80042d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042da:	6865      	ldr	r5, [r4, #4]
 80042dc:	60a5      	str	r5, [r4, #8]
 80042de:	2d00      	cmp	r5, #0
 80042e0:	bfa2      	ittt	ge
 80042e2:	6821      	ldrge	r1, [r4, #0]
 80042e4:	f021 0104 	bicge.w	r1, r1, #4
 80042e8:	6021      	strge	r1, [r4, #0]
 80042ea:	b90e      	cbnz	r6, 80042f0 <_printf_i+0x114>
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	d04b      	beq.n	8004388 <_printf_i+0x1ac>
 80042f0:	4615      	mov	r5, r2
 80042f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042f6:	fb03 6711 	mls	r7, r3, r1, r6
 80042fa:	5dc7      	ldrb	r7, [r0, r7]
 80042fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004300:	4637      	mov	r7, r6
 8004302:	42bb      	cmp	r3, r7
 8004304:	460e      	mov	r6, r1
 8004306:	d9f4      	bls.n	80042f2 <_printf_i+0x116>
 8004308:	2b08      	cmp	r3, #8
 800430a:	d10b      	bne.n	8004324 <_printf_i+0x148>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	07de      	lsls	r6, r3, #31
 8004310:	d508      	bpl.n	8004324 <_printf_i+0x148>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	4299      	cmp	r1, r3
 8004318:	bfde      	ittt	le
 800431a:	2330      	movle	r3, #48	; 0x30
 800431c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004324:	1b52      	subs	r2, r2, r5
 8004326:	6122      	str	r2, [r4, #16]
 8004328:	f8cd a000 	str.w	sl, [sp]
 800432c:	464b      	mov	r3, r9
 800432e:	aa03      	add	r2, sp, #12
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fee4 	bl	8004100 <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	d14a      	bne.n	80043d2 <_printf_i+0x1f6>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	b004      	add	sp, #16
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	4833      	ldr	r0, [pc, #204]	; (800441c <_printf_i+0x240>)
 8004350:	2778      	movs	r7, #120	; 0x78
 8004352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	061f      	lsls	r7, r3, #24
 800435c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004360:	d402      	bmi.n	8004368 <_printf_i+0x18c>
 8004362:	065f      	lsls	r7, r3, #25
 8004364:	bf48      	it	mi
 8004366:	b2b6      	uxthmi	r6, r6
 8004368:	07df      	lsls	r7, r3, #31
 800436a:	bf48      	it	mi
 800436c:	f043 0320 	orrmi.w	r3, r3, #32
 8004370:	6029      	str	r1, [r5, #0]
 8004372:	bf48      	it	mi
 8004374:	6023      	strmi	r3, [r4, #0]
 8004376:	b91e      	cbnz	r6, 8004380 <_printf_i+0x1a4>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	2310      	movs	r3, #16
 8004382:	e7a7      	b.n	80042d4 <_printf_i+0xf8>
 8004384:	4824      	ldr	r0, [pc, #144]	; (8004418 <_printf_i+0x23c>)
 8004386:	e7e4      	b.n	8004352 <_printf_i+0x176>
 8004388:	4615      	mov	r5, r2
 800438a:	e7bd      	b.n	8004308 <_printf_i+0x12c>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	6826      	ldr	r6, [r4, #0]
 8004390:	6961      	ldr	r1, [r4, #20]
 8004392:	1d18      	adds	r0, r3, #4
 8004394:	6028      	str	r0, [r5, #0]
 8004396:	0635      	lsls	r5, r6, #24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0x1c4>
 800439c:	6019      	str	r1, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0x1ca>
 80043a0:	0670      	lsls	r0, r6, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0x1c0>
 80043a4:	8019      	strh	r1, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	4615      	mov	r5, r2
 80043ac:	e7bc      	b.n	8004328 <_printf_i+0x14c>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	681d      	ldr	r5, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7fb ff18 	bl	80001f0 <memchr>
 80043c0:	b108      	cbz	r0, 80043c6 <_printf_i+0x1ea>
 80043c2:	1b40      	subs	r0, r0, r5
 80043c4:	6060      	str	r0, [r4, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	e7aa      	b.n	8004328 <_printf_i+0x14c>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d0ad      	beq.n	800433c <_printf_i+0x160>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d413      	bmi.n	800440e <_printf_i+0x232>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e7a6      	b.n	8004340 <_printf_i+0x164>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4632      	mov	r2, r6
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d09d      	beq.n	800433c <_printf_i+0x160>
 8004400:	3501      	adds	r5, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	9903      	ldr	r1, [sp, #12]
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	42ab      	cmp	r3, r5
 800440a:	dcf2      	bgt.n	80043f2 <_printf_i+0x216>
 800440c:	e7eb      	b.n	80043e6 <_printf_i+0x20a>
 800440e:	2500      	movs	r5, #0
 8004410:	f104 0619 	add.w	r6, r4, #25
 8004414:	e7f5      	b.n	8004402 <_printf_i+0x226>
 8004416:	bf00      	nop
 8004418:	0800456d 	.word	0x0800456d
 800441c:	0800457e 	.word	0x0800457e

08004420 <memmove>:
 8004420:	4288      	cmp	r0, r1
 8004422:	b510      	push	{r4, lr}
 8004424:	eb01 0402 	add.w	r4, r1, r2
 8004428:	d902      	bls.n	8004430 <memmove+0x10>
 800442a:	4284      	cmp	r4, r0
 800442c:	4623      	mov	r3, r4
 800442e:	d807      	bhi.n	8004440 <memmove+0x20>
 8004430:	1e43      	subs	r3, r0, #1
 8004432:	42a1      	cmp	r1, r4
 8004434:	d008      	beq.n	8004448 <memmove+0x28>
 8004436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800443a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800443e:	e7f8      	b.n	8004432 <memmove+0x12>
 8004440:	4402      	add	r2, r0
 8004442:	4601      	mov	r1, r0
 8004444:	428a      	cmp	r2, r1
 8004446:	d100      	bne.n	800444a <memmove+0x2a>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800444e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004452:	e7f7      	b.n	8004444 <memmove+0x24>

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4d06      	ldr	r5, [pc, #24]	; (8004470 <_sbrk_r+0x1c>)
 8004458:	2300      	movs	r3, #0
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	f7fc fb1a 	bl	8000a98 <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20000258 	.word	0x20000258

08004474 <memcpy>:
 8004474:	440a      	add	r2, r1
 8004476:	4291      	cmp	r1, r2
 8004478:	f100 33ff 	add.w	r3, r0, #4294967295
 800447c:	d100      	bne.n	8004480 <memcpy+0xc>
 800447e:	4770      	bx	lr
 8004480:	b510      	push	{r4, lr}
 8004482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800448a:	4291      	cmp	r1, r2
 800448c:	d1f9      	bne.n	8004482 <memcpy+0xe>
 800448e:	bd10      	pop	{r4, pc}

08004490 <_realloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	4680      	mov	r8, r0
 8004496:	4614      	mov	r4, r2
 8004498:	460e      	mov	r6, r1
 800449a:	b921      	cbnz	r1, 80044a6 <_realloc_r+0x16>
 800449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	4611      	mov	r1, r2
 80044a2:	f7ff bc49 	b.w	8003d38 <_malloc_r>
 80044a6:	b92a      	cbnz	r2, 80044b4 <_realloc_r+0x24>
 80044a8:	f7ff fbda 	bl	8003c60 <_free_r>
 80044ac:	4625      	mov	r5, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	f000 f81b 	bl	80044ee <_malloc_usable_size_r>
 80044b8:	4284      	cmp	r4, r0
 80044ba:	4607      	mov	r7, r0
 80044bc:	d802      	bhi.n	80044c4 <_realloc_r+0x34>
 80044be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044c2:	d812      	bhi.n	80044ea <_realloc_r+0x5a>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f7ff fc36 	bl	8003d38 <_malloc_r>
 80044cc:	4605      	mov	r5, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d0ed      	beq.n	80044ae <_realloc_r+0x1e>
 80044d2:	42bc      	cmp	r4, r7
 80044d4:	4622      	mov	r2, r4
 80044d6:	4631      	mov	r1, r6
 80044d8:	bf28      	it	cs
 80044da:	463a      	movcs	r2, r7
 80044dc:	f7ff ffca 	bl	8004474 <memcpy>
 80044e0:	4631      	mov	r1, r6
 80044e2:	4640      	mov	r0, r8
 80044e4:	f7ff fbbc 	bl	8003c60 <_free_r>
 80044e8:	e7e1      	b.n	80044ae <_realloc_r+0x1e>
 80044ea:	4635      	mov	r5, r6
 80044ec:	e7df      	b.n	80044ae <_realloc_r+0x1e>

080044ee <_malloc_usable_size_r>:
 80044ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f2:	1f18      	subs	r0, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bfbc      	itt	lt
 80044f8:	580b      	ldrlt	r3, [r1, r0]
 80044fa:	18c0      	addlt	r0, r0, r3
 80044fc:	4770      	bx	lr
	...

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
