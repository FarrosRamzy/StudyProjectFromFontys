
SYSTICK_C_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003d2b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d4f  00000000  00000000  00023daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003d8  00000000  00000000  00024b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002c6  00000000  00000000  00024ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e096  00000000  00000000  0002519e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004b55  00000000  00000000  00043234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b6d00  00000000  00000000  00047d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000dc0  00000000  00000000  000fea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000ff84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002080 	.word	0x08002080

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002080 	.word	0x08002080

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800022e:	f000 fb89 	bl	8000944 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000232:	f000 f88b 	bl	800034c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	SysTick_Init();
 8000236:	f000 f8cb 	bl	80003d0 <SysTick_Init>
	SysTick_LED();
 800023a:	f000 f8e9 	bl	8000410 <SysTick_LED>
	SysTick_Button();
 800023e:	f000 f927 	bl	8000490 <SysTick_Button>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	ResetLED(GPIOB, GPIO_PIN_1);
 8000242:	2102      	movs	r1, #2
 8000244:	483f      	ldr	r0, [pc, #252]	; (8000344 <main+0x11c>)
 8000246:	f000 f983 	bl	8000550 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_2);
 800024a:	2104      	movs	r1, #4
 800024c:	483d      	ldr	r0, [pc, #244]	; (8000344 <main+0x11c>)
 800024e:	f000 f97f 	bl	8000550 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_3);
 8000252:	2108      	movs	r1, #8
 8000254:	483b      	ldr	r0, [pc, #236]	; (8000344 <main+0x11c>)
 8000256:	f000 f97b 	bl	8000550 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_4);
 800025a:	2110      	movs	r1, #16
 800025c:	4839      	ldr	r0, [pc, #228]	; (8000344 <main+0x11c>)
 800025e:	f000 f977 	bl	8000550 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_5);
 8000262:	2120      	movs	r1, #32
 8000264:	4837      	ldr	r0, [pc, #220]	; (8000344 <main+0x11c>)
 8000266:	f000 f973 	bl	8000550 <ResetLED>

	TimeDelay = 0;
 800026a:	4b37      	ldr	r3, [pc, #220]	; (8000348 <main+0x120>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]

	uint8_t btn_1_pressed = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	71bb      	strb	r3, [r7, #6]

	uint8_t led_sweep_type = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	71fb      	strb	r3, [r7, #7]
	uint8_t sweep_a_to_left = 1;
 8000278:	2301      	movs	r3, #1
 800027a:	717b      	strb	r3, [r7, #5]
	uint8_t sweep_b_to_left = 1;
 800027c:	2301      	movs	r3, #1
 800027e:	713b      	strb	r3, [r7, #4]

	uint8_t sweep_a_counter = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	70fb      	strb	r3, [r7, #3]
	uint8_t sweep_b_counter = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	70bb      	strb	r3, [r7, #2]
	uint8_t sweep_b_adder = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	707b      	strb	r3, [r7, #1]
	uint8_t sweep_b_reverse = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	703b      	strb	r3, [r7, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		//Button 1 de-bouncing to toggle the single LED.
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000298:	f000 f981 	bl	800059e <ButtonPressed>
 800029c:	4603      	mov	r3, r0
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d11b      	bne.n	80002da <main+0xb2>
			DelayMS(10);
 80002a2:	200a      	movs	r0, #10
 80002a4:	f000 f93e 	bl	8000524 <DelayMS>
			if (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 f975 	bl	800059e <ButtonPressed>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d105      	bne.n	80002c6 <main+0x9e>
				ToggleOutputMode(GPIOB, &btn_1_pressed, GPIO_PIN_1);
 80002ba:	1dbb      	adds	r3, r7, #6
 80002bc:	2202      	movs	r2, #2
 80002be:	4619      	mov	r1, r3
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <main+0x11c>)
 80002c2:	f000 f986 	bl	80005d2 <ToggleOutputMode>
			}
			while (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 80002c6:	bf00      	nop
 80002c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d0:	f000 f965 	bl	800059e <ButtonPressed>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d0f6      	beq.n	80002c8 <main+0xa0>
				//wait 'till release.
			}
		}

		//Button 2 de-bouncing to switch the sweep mode of the LEDs' row.
		if (ButtonPressed(GPIOA, GPIO_PIN_9) == SET) {
 80002da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 f95c 	bl	800059e <ButtonPressed>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d119      	bne.n	8000320 <main+0xf8>
			DelayMS(10);
 80002ec:	200a      	movs	r0, #10
 80002ee:	f000 f919 	bl	8000524 <DelayMS>
			if (ButtonPressed(GPIOA, GPIO_PIN_9) == SET) {
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f000 f950 	bl	800059e <ButtonPressed>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b01      	cmp	r3, #1
 8000302:	d103      	bne.n	800030c <main+0xe4>
				led_sweep_type ^= 1;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f083 0301 	eor.w	r3, r3, #1
 800030a:	71fb      	strb	r3, [r7, #7]
			}
			while (ButtonPressed(GPIOA, GPIO_PIN_9) == SET) {
 800030c:	bf00      	nop
 800030e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f000 f942 	bl	800059e <ButtonPressed>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	d0f6      	beq.n	800030e <main+0xe6>
				//wait 'till release.
			}
		}

		if (led_sweep_type == 0) {
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d106      	bne.n	8000334 <main+0x10c>
			SweepA(&sweep_a_counter, &sweep_a_to_left);
 8000326:	1d7a      	adds	r2, r7, #5
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f973 	bl	8000618 <SweepA>
 8000332:	e7ad      	b.n	8000290 <main+0x68>
		} else {
			SweepB(&sweep_b_counter, &sweep_b_adder, &sweep_b_reverse,
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	463a      	mov	r2, r7
 8000338:	1c79      	adds	r1, r7, #1
 800033a:	1cb8      	adds	r0, r7, #2
 800033c:	f000 f9d6 	bl	80006ec <SweepB>
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 8000340:	e7a6      	b.n	8000290 <main+0x68>
 8000342:	bf00      	nop
 8000344:	48000400 	.word	0x48000400
 8000348:	20000028 	.word	0x20000028

0800034c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	; 0x40
 8000350:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fe64 	bl	8002028 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000384:	2300      	movs	r3, #0
 8000386:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fc0f 	bl	8000bb4 <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x54>
		Error_Handler();
 800039c:	f000 fa48 	bl	8000830 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a4:	2302      	movs	r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fc4f 	bl	8001c5c <HAL_RCC_ClockConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x7c>
		Error_Handler();
 80003c4:	f000 fa34 	bl	8000830 <Error_Handler>
	}
}
 80003c8:	bf00      	nop
 80003ca:	3740      	adds	r7, #64	; 0x40
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <SysTick_Init>:
 *
 * @note   This function is a SysTick initialization to setup the timer register of the
 * 		   ARM4 controller of the Nucleo board.
 *
 */
void SysTick_Init() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	//resets SysTick control pin to 0.
	SysTick->CTRL = ~SysTick_CTRL_ENABLE_Msk;
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <SysTick_Init+0x3c>)
 80003d6:	f06f 0201 	mvn.w	r2, #1
 80003da:	601a      	str	r2, [r3, #0]
	//sets up the reload register.
	SysTick->LOAD = 16000 - 1;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <SysTick_Init+0x3c>)
 80003de:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003e2:	605a      	str	r2, [r3, #4]
	//sets the interrupt priority of SysTick to the least urgent.
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 80003e4:	210f      	movs	r1, #15
 80003e6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ea:	f7ff fef3 	bl	80001d4 <__NVIC_SetPriority>
	//resets the SysTick counter value.
	SysTick->VAL &= SysTick_VAL_CURRENT_Msk;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <SysTick_Init+0x3c>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a06      	ldr	r2, [pc, #24]	; (800040c <SysTick_Init+0x3c>)
 80003f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003f8:	6093      	str	r3, [r2, #8]
	//sets the SysTick control pin to use the clock source, the interrupt, and enables both of them.
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 80003fa:	4b04      	ldr	r3, [pc, #16]	; (800040c <SysTick_Init+0x3c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a03      	ldr	r2, [pc, #12]	; (800040c <SysTick_Init+0x3c>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
			| SysTick_CTRL_ENABLE_Msk);
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	e000e010 	.word	0xe000e010

08000410 <SysTick_LED>:
 * @note   This function is a GPIO setup function to set the input pin of the Nucleo
 *         board. In this case, the GPIO pin in setup are PB1, PB2, PB3, PB4, PB5.
 * @param  none.
 * @retval none.
 */
void SysTick_LED() {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <SysTick_LED+0x78>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <SysTick_LED+0x78>)
 800041a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800041e:	6153      	str	r3, [r2, #20]

	//resets all the LEDs' pin MODE.
	GPIOB->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SysTick_LED+0x7c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a19      	ldr	r2, [pc, #100]	; (800048c <SysTick_LED+0x7c>)
 8000426:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800042a:	f023 030c 	bic.w	r3, r3, #12
 800042e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
	//resets all LEDs' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_3
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <SysTick_LED+0x7c>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a15      	ldr	r2, [pc, #84]	; (800048c <SysTick_LED+0x7c>)
 8000436:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800043a:	6053      	str	r3, [r2, #4]
			| GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);
	//resets all LEDs' pin SPEED.
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR2
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <SysTick_LED+0x7c>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a12      	ldr	r2, [pc, #72]	; (800048c <SysTick_LED+0x7c>)
 8000442:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000446:	f023 030c 	bic.w	r3, r3, #12
 800044a:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4
			| GPIO_OSPEEDER_OSPEEDR5);
	//sets the LEDs' pin MODE to 01 as an output.
	GPIOB->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <SysTick_LED+0x7c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <SysTick_LED+0x7c>)
 8000452:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
	//sets all LEDs' pin SPEED to medium.
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR1_0 | GPIO_OSPEEDER_OSPEEDR2_0
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <SysTick_LED+0x7c>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a0a      	ldr	r2, [pc, #40]	; (800048c <SysTick_LED+0x7c>)
 8000462:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR3_0 | GPIO_OSPEEDER_OSPEEDR4_0
			| GPIO_OSPEEDER_OSPEEDR5_0);
	//resets all LEDs' PUPD register.
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR2 | GPIO_PUPDR_PUPDR3
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <SysTick_LED+0x7c>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a06      	ldr	r2, [pc, #24]	; (800048c <SysTick_LED+0x7c>)
 8000472:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000476:	f023 030c 	bic.w	r3, r3, #12
 800047a:	60d3      	str	r3, [r2, #12]
			| GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR5);
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	48000400 	.word	0x48000400

08000490 <SysTick_Button>:
 * @note   This function is a GPIO setup function to set the input pin of the Nucleo
 *         board. In this case, the GPIO pin in setup is PA8 & PA9.
 * @param  none.
 * @retval none.
 */
void SysTick_Button() {
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000494:	4b19      	ldr	r3, [pc, #100]	; (80004fc <SysTick_Button+0x6c>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <SysTick_Button+0x6c>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049e:	6153      	str	r3, [r2, #20]

	//resets both button pins' MODE to 00 as an input.
	GPIOA->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 80004a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004aa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004ae:	6013      	str	r3, [r2, #0]
	//resets both button pins' SPEED.
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9);
 80004b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004be:	6093      	str	r3, [r2, #8]
	//resets both button input PUPD registers.
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);
 80004c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004ce:	60d3      	str	r3, [r2, #12]
	//sets both button pins' SPEED to 01 (medium).
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR9_0);
 80004d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004da:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80004de:	6093      	str	r3, [r2, #8]
	//sets both button input PUPD registers to 01 (pull-down).
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR8_1 | GPIO_PUPDR_PUPDR9_1);
 80004e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ea:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80004ee:	60d3      	str	r3, [r2, #12]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <SysTick_Handler>:
 * 		   between the main program in the main loop.
 *
 * @param  none.
 * @retval none.
 */
void SysTick_Handler(void) {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimeDelay > 0) {
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <SysTick_Handler+0x20>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	dd04      	ble.n	8000516 <SysTick_Handler+0x16>
		TimeDelay--;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <SysTick_Handler+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a03      	ldr	r2, [pc, #12]	; (8000520 <SysTick_Handler+0x20>)
 8000514:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysTick_IRQn 0 */
	//  HAL_IncTick();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000028 	.word	0x20000028

08000524 <DelayMS>:
 * 		   in a ARM register as the timer delay.
 *
 * @param  delay_n the input delay value.
 * @retval none.
 */
void DelayMS(uint32_t delay_n) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	TimeDelay = delay_n;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <DelayMS+0x28>)
 8000530:	6013      	str	r3, [r2, #0]
	while (TimeDelay > 0) {
 8000532:	bf00      	nop
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <DelayMS+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	dcfb      	bgt.n	8000534 <DelayMS+0x10>
		;
	}
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <ResetLED>:
 *
 * @param  PORT is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  PIN_POS specifies the pin register that would be used in the writing function.
 * @retval none.
 */
void ResetLED(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	807b      	strh	r3, [r7, #2]
	PORT->BRR = (uint32_t) PIN_POS;
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <SwitchLED>:
 * @param  PORT is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  PIN_POS specifies the pin register that would be used in the writing function.
 * @param  PIN_STATE specifies the chosen state of the LED (HIGH or LOW (SET or RESET)).
 * @retval none.
 */
void SwitchLED(GPIO_TypeDef *PORT, uint16_t PIN_POS, uint8_t PIN_STATE) {
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	807b      	strh	r3, [r7, #2]
 800057a:	4613      	mov	r3, r2
 800057c:	707b      	strb	r3, [r7, #1]
	if (PIN_STATE != RESET) {
 800057e:	787b      	ldrb	r3, [r7, #1]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d003      	beq.n	800058c <SwitchLED+0x1e>
		PORT->BSRR = (uint32_t) PIN_POS;
 8000584:	887a      	ldrh	r2, [r7, #2]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	619a      	str	r2, [r3, #24]
	} else {
		PORT->BRR = (uint32_t) PIN_POS;
	}
}
 800058a:	e002      	b.n	8000592 <SwitchLED+0x24>
		PORT->BRR = (uint32_t) PIN_POS;
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <ButtonPressed>:
 *
 * @param  PORT is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  PIN_POS specifies the port bit to be written.
 * @retval 0 (pressed) or 1 (released).
 */
uint16_t ButtonPressed(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
	uint16_t bitState = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	81fb      	strh	r3, [r7, #14]
	if ((PORT->IDR & PIN_POS) != (uint32_t) RESET) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	691a      	ldr	r2, [r3, #16]
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <ButtonPressed+0x22>
		bitState = SET;
 80005ba:	2301      	movs	r3, #1
 80005bc:	81fb      	strh	r3, [r7, #14]
 80005be:	e001      	b.n	80005c4 <ButtonPressed+0x26>
	} else {
		bitState = RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	81fb      	strh	r3, [r7, #14]
	}
	return bitState;
 80005c4:	89fb      	ldrh	r3, [r7, #14]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <ToggleOutputMode>:
 * @param  PRESS_STATE specifies the state of the input button (switched to on or off).
 * @param  OUT_PIN_POS specifies the pin register that would be used in the writing function.
 * @retval none.
 */
void ToggleOutputMode(GPIO_TypeDef *PORT, uint8_t *PRESS_STATE,
		uint16_t OUT_PIN_POS) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	4613      	mov	r3, r2
 80005de:	80fb      	strh	r3, [r7, #6]
	if (*PRESS_STATE == RESET) {
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d109      	bne.n	80005fc <ToggleOutputMode+0x2a>
		SwitchLED(PORT, OUT_PIN_POS, SET);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff ffbd 	bl	800056e <SwitchLED>
		*PRESS_STATE = SET;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
	} else {
		SwitchLED(PORT, OUT_PIN_POS, RESET);
		*PRESS_STATE = RESET;
	}
}
 80005fa:	e008      	b.n	800060e <ToggleOutputMode+0x3c>
		SwitchLED(PORT, OUT_PIN_POS, RESET);
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffb3 	bl	800056e <SwitchLED>
		*PRESS_STATE = RESET;
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <SweepA>:
 * @param  counter is the limit value that the sweep can go (about 1 to 4).
 * @param  sweep_to_left specifies the state of the sweep direction so it can sweep to right and
 * 		   to left in a correct manner.
 * @retval none.
 */
void SweepA(uint8_t *counter, uint8_t *sweep_to_left) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	if (*sweep_to_left == 1) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d12b      	bne.n	8000682 <SweepA+0x6a>
		if (*counter < 4) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d81f      	bhi.n	8000672 <SweepA+0x5a>
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, SET);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	2304      	movs	r3, #4
 800063a:	4093      	lsls	r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	4829      	ldr	r0, [pc, #164]	; (80006e8 <SweepA+0xd0>)
 8000644:	f7ff ff93 	bl	800056e <SwitchLED>
			DelayMS(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f7ff ff6b 	bl	8000524 <DelayMS>
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, RESET);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	2304      	movs	r3, #4
 8000656:	4093      	lsls	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4822      	ldr	r0, [pc, #136]	; (80006e8 <SweepA+0xd0>)
 8000660:	f7ff ff85 	bl	800056e <SwitchLED>
			*counter += 1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	701a      	strb	r2, [r3, #0]
			*counter -= 1;
		} else if (*counter == 0) {
			*sweep_to_left = 1;
		}
	}
}
 8000670:	e036      	b.n	80006e0 <SweepA+0xc8>
		} else if (*counter == 4) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d132      	bne.n	80006e0 <SweepA+0xc8>
			*sweep_to_left = 0;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
}
 8000680:	e02e      	b.n	80006e0 <SweepA+0xc8>
	} else if (*sweep_to_left == 0) {
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d12a      	bne.n	80006e0 <SweepA+0xc8>
		if (*counter > 0) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01f      	beq.n	80006d2 <SweepA+0xba>
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, SET);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	2304      	movs	r3, #4
 800069a:	4093      	lsls	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <SweepA+0xd0>)
 80006a4:	f7ff ff63 	bl	800056e <SwitchLED>
			DelayMS(100);
 80006a8:	2064      	movs	r0, #100	; 0x64
 80006aa:	f7ff ff3b 	bl	8000524 <DelayMS>
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, RESET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2304      	movs	r3, #4
 80006b6:	4093      	lsls	r3, r2
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <SweepA+0xd0>)
 80006c0:	f7ff ff55 	bl	800056e <SwitchLED>
			*counter -= 1;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	701a      	strb	r2, [r3, #0]
}
 80006d0:	e006      	b.n	80006e0 <SweepA+0xc8>
		} else if (*counter == 0) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <SweepA+0xc8>
			*sweep_to_left = 1;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	48000400 	.word	0x48000400

080006ec <SweepB>:
 * @param  sweep_to_left specifies the state of the sweep direction so it can sweep to right and
 * 		   to left in a correct manner.
 * @retval none.
 */
void SweepB(uint8_t *counter, uint8_t *adder, uint8_t *reverse,
		uint8_t *sweep_to_left) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
	if (*sweep_to_left == 1) {
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d146      	bne.n	8000790 <SweepB+0xa4>
		if (*counter <= 3) {
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d817      	bhi.n	800073a <SweepB+0x4e>
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, SET);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	2304      	movs	r3, #4
 8000712:	4093      	lsls	r3, r2
 8000714:	b29b      	uxth	r3, r3
 8000716:	2201      	movs	r2, #1
 8000718:	4619      	mov	r1, r3
 800071a:	4844      	ldr	r0, [pc, #272]	; (800082c <SweepB+0x140>)
 800071c:	f7ff ff27 	bl	800056e <SwitchLED>
			*counter += 1;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	701a      	strb	r2, [r3, #0]
			*adder += 1;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e026      	b.n	8000788 <SweepB+0x9c>
		} else if (*adder > 3 && *adder < 8) {
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d91b      	bls.n	800077a <SweepB+0x8e>
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b07      	cmp	r3, #7
 8000748:	d817      	bhi.n	800077a <SweepB+0x8e>
			SwitchLED(GPIOB, GPIO_PIN_2 << *reverse, RESET);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	2304      	movs	r3, #4
 8000752:	4093      	lsls	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	4834      	ldr	r0, [pc, #208]	; (800082c <SweepB+0x140>)
 800075c:	f7ff ff07 	bl	800056e <SwitchLED>
			*adder += 1;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	701a      	strb	r2, [r3, #0]
			*reverse += 1;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e006      	b.n	8000788 <SweepB+0x9c>
		} else if (*adder == 8) {
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b08      	cmp	r3, #8
 8000780:	d102      	bne.n	8000788 <SweepB+0x9c>
			*sweep_to_left = 0;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		}
		DelayMS(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f7ff fecb 	bl	8000524 <DelayMS>
		} else if (*adder == 0) {
			*sweep_to_left = 1;
		}
		DelayMS(100);
	}
}
 800078e:	e049      	b.n	8000824 <SweepB+0x138>
	} else if (*sweep_to_left == 0) {
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d145      	bne.n	8000824 <SweepB+0x138>
		if (*counter > 0) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d017      	beq.n	80007d0 <SweepB+0xe4>
			*counter -= 1;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	701a      	strb	r2, [r3, #0]
			*adder -= 1;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	701a      	strb	r2, [r3, #0]
			SwitchLED(GPIOB, GPIO_PIN_2 << *counter, SET);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	2304      	movs	r3, #4
 80007c0:	4093      	lsls	r3, r2
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <SweepB+0x140>)
 80007ca:	f7ff fed0 	bl	800056e <SwitchLED>
 80007ce:	e026      	b.n	800081e <SweepB+0x132>
		} else if (*adder <= 4 && *adder > 0) {
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d81b      	bhi.n	8000810 <SweepB+0x124>
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d017      	beq.n	8000810 <SweepB+0x124>
			*adder -= 1;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	701a      	strb	r2, [r3, #0]
			*reverse -= 1;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	701a      	strb	r2, [r3, #0]
			SwitchLED(GPIOB, GPIO_PIN_2 << *reverse, RESET);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	2304      	movs	r3, #4
 8000800:	4093      	lsls	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <SweepB+0x140>)
 800080a:	f7ff feb0 	bl	800056e <SwitchLED>
 800080e:	e006      	b.n	800081e <SweepB+0x132>
		} else if (*adder == 0) {
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <SweepB+0x132>
			*sweep_to_left = 1;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
		DelayMS(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f7ff fe80 	bl	8000524 <DelayMS>
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000400 	.word	0x48000400

08000830 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fb8b 	bl	8002038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fc81 	bl	8000228 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000928:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	080020d0 	.word	0x080020d0
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000030 	.word	0x20000030

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x28>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f8f9 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff ff6c 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f903 	bl	8000b9a <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f8d9 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000002c 	.word	0x2000002c

080009e8 <__NVIC_SetPriorityGrouping>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_SetPriority>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff47 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5c 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f001 b83a 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 816f 	beq.w	8000ece <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bf0:	4bb5      	ldr	r3, [pc, #724]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfc:	4bb2      	ldr	r3, [pc, #712]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d15c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c08:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d155      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <HAL_RCC_OscConfig+0x94>
 8000c42:	4ba1      	ldr	r3, [pc, #644]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	e015      	b.n	8000c74 <HAL_RCC_OscConfig+0xc0>
 8000c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c60:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c70:	4b95      	ldr	r3, [pc, #596]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c78:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c7c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c80:	fa92 f2a2 	rbit	r2, r2
 8000c84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	f042 0220 	orr.w	r2, r2, #32
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	f002 021f 	and.w	r2, r2, #31
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 8111 	beq.w	8000ecc <HAL_RCC_OscConfig+0x318>
 8000caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8108 	bne.w	8000ecc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f000 bfc6 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
 8000cd4:	4b7c      	ldr	r3, [pc, #496]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7b      	ldr	r2, [pc, #492]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e036      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ce6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x158>
 8000cf2:	4b75      	ldr	r3, [pc, #468]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a74      	ldr	r2, [pc, #464]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b72      	ldr	r3, [pc, #456]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a71      	ldr	r2, [pc, #452]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e021      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x184>
 8000d1e:	4b6a      	ldr	r3, [pc, #424]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a69      	ldr	r2, [pc, #420]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a66      	ldr	r2, [pc, #408]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d38:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a62      	ldr	r2, [pc, #392]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a5f      	ldr	r2, [pc, #380]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d059      	beq.n	8000e14 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fe36 	bl	80009d0 <HAL_GetTick>
 8000d64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	e00a      	b.n	8000d80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fe31 	bl	80009d0 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d902      	bls.n	8000d80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f000 bf67 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d102      	bne.n	8000db2 <HAL_RCC_OscConfig+0x1fe>
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x22a>
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dda:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000de6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000dea:	fa92 f2a2 	rbit	r2, r2
 8000dee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000df2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000df6:	fab2 f282 	clz	r2, r2
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	f002 021f 	and.w	r2, r2, #31
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0ab      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1b6>
 8000e12:	e05c      	b.n	8000ece <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fddc 	bl	80009d0 <HAL_GetTick>
 8000e18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1c:	e00a      	b.n	8000e34 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fdd7 	bl	80009d0 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d902      	bls.n	8000e34 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f000 bf0d 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d102      	bne.n	8000e66 <HAL_RCC_OscConfig+0x2b2>
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	e015      	b.n	8000e92 <HAL_RCC_OscConfig+0x2de>
 8000e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e9e:	fa92 f2a2 	rbit	r2, r2
 8000ea2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000ea6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000eaa:	fab2 f282 	clz	r2, r2
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f042 0220 	orr.w	r2, r2, #32
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f002 021f 	and.w	r2, r2, #31
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1ab      	bne.n	8000e1e <HAL_RCC_OscConfig+0x26a>
 8000ec6:	e002      	b.n	8000ece <HAL_RCC_OscConfig+0x31a>
 8000ec8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 817f 	beq.w	80011e2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee4:	4ba7      	ldr	r3, [pc, #668]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ef0:	4ba4      	ldr	r3, [pc, #656]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d173      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x430>
 8000efc:	4ba1      	ldr	r3, [pc, #644]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f08:	d16c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x430>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f20:	fab3 f383 	clz	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d102      	bne.n	8000f3a <HAL_RCC_OscConfig+0x386>
 8000f34:	4b93      	ldr	r3, [pc, #588]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	e013      	b.n	8000f62 <HAL_RCC_OscConfig+0x3ae>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f52:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	2202      	movs	r2, #2
 8000f64:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f68:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f6c:	fa92 f2a2 	rbit	r2, r2
 8000f70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	f042 0220 	orr.w	r2, r2, #32
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f002 021f 	and.w	r2, r2, #31
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00a      	beq.n	8000faa <HAL_RCC_OscConfig+0x3f6>
 8000f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d002      	beq.n	8000faa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f000 be52 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	21f8      	movs	r1, #248	; 0xf8
 8000fc0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000fc8:	fa91 f1a1 	rbit	r1, r1
 8000fcc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000fd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fd4:	fab1 f181 	clz	r1, r1
 8000fd8:	b2c9      	uxtb	r1, r1
 8000fda:	408b      	lsls	r3, r1
 8000fdc:	4969      	ldr	r1, [pc, #420]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe2:	e0fe      	b.n	80011e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fe8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 8088 	beq.w	8001106 <HAL_RCC_OscConfig+0x552>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001008:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001016:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	461a      	mov	r2, r3
 800101e:	2301      	movs	r3, #1
 8001020:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fcd5 	bl	80009d0 <HAL_GetTick>
 8001026:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	e00a      	b.n	8001042 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fcd0 	bl	80009d0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d902      	bls.n	8001042 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	f000 be06 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001054:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x4be>
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	e013      	b.n	800109a <HAL_RCC_OscConfig+0x4e6>
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800108a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	2202      	movs	r2, #2
 800109c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80010a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80010a4:	fa92 f2a2 	rbit	r2, r2
 80010a8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80010ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010b0:	fab2 f282 	clz	r2, r2
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f002 021f 	and.w	r2, r2, #31
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0af      	beq.n	800102c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	21f8      	movs	r1, #248	; 0xf8
 80010e2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80010ea:	fa91 f1a1 	rbit	r1, r1
 80010ee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80010f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010f6:	fab1 f181 	clz	r1, r1
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	408b      	lsls	r3, r1
 80010fe:	4921      	ldr	r1, [pc, #132]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e06d      	b.n	80011e2 <HAL_RCC_OscConfig+0x62e>
 8001106:	2301      	movs	r3, #1
 8001108:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001118:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001126:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	461a      	mov	r2, r3
 800112e:	2300      	movs	r3, #0
 8001130:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fc4d 	bl	80009d0 <HAL_GetTick>
 8001136:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e00a      	b.n	8001152 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc48 	bl	80009d0 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d902      	bls.n	8001152 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	f000 bd7e 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001164:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_RCC_OscConfig+0x5d4>
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <HAL_RCC_OscConfig+0x5d0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	e016      	b.n	80011b0 <HAL_RCC_OscConfig+0x5fc>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011ac:	4bbf      	ldr	r3, [pc, #764]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2202      	movs	r2, #2
 80011b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80011b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011ba:	fa92 f2a2 	rbit	r2, r2
 80011be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80011c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011c6:	fab2 f282 	clz	r2, r2
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	f002 021f 	and.w	r2, r2, #31
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ac      	bne.n	800113c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8113 	beq.w	800141e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d07c      	beq.n	8001302 <HAL_RCC_OscConfig+0x74e>
 8001208:	2301      	movs	r3, #1
 800120a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800121a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4ba2      	ldr	r3, [pc, #648]	; (80014b0 <HAL_RCC_OscConfig+0x8fc>)
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	2301      	movs	r3, #1
 8001230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fbcd 	bl	80009d0 <HAL_GetTick>
 8001236:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fbc8 	bl	80009d0 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d902      	bls.n	8001252 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	f000 bcfe 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800125c:	fa93 f2a3 	rbit	r2, r3
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800126e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001272:	2202      	movs	r2, #2
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	fa93 f2a3 	rbit	r2, r3
 8001284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001296:	2202      	movs	r2, #2
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800129e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	fa93 f2a3 	rbit	r2, r3
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b7e      	ldr	r3, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012be:	2102      	movs	r1, #2
 80012c0:	6019      	str	r1, [r3, #0]
 80012c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	fa93 f1a3 	rbit	r1, r3
 80012d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012d8:	6019      	str	r1, [r3, #0]
  return result;
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d09d      	beq.n	800123c <HAL_RCC_OscConfig+0x688>
 8001300:	e08d      	b.n	800141e <HAL_RCC_OscConfig+0x86a>
 8001302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001306:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001312:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001320:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001324:	601a      	str	r2, [r3, #0]
  return result;
 8001326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800132e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_RCC_OscConfig+0x8fc>)
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	2300      	movs	r3, #0
 8001342:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fb44 	bl	80009d0 <HAL_GetTick>
 8001348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fb3f 	bl	80009d0 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d902      	bls.n	8001364 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	f000 bc75 	b.w	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001368:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001382:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001390:	2202      	movs	r2, #2
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013dc:	2102      	movs	r1, #2
 80013de:	6019      	str	r1, [r3, #0]
 80013e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	fa93 f1a3 	rbit	r1, r3
 80013ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013f6:	6019      	str	r1, [r3, #0]
  return result;
 80013f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d197      	bne.n	800134e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 81a5 	beq.w	800177e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_RCC_OscConfig+0x8f8>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800145a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_RCC_OscConfig+0x900>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d121      	bne.n	80014c4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x900>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x900>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148c:	f7ff faa0 	bl	80009d0 <HAL_GetTick>
 8001490:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e010      	b.n	80014b8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fa9b 	bl	80009d0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d908      	bls.n	80014b8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e3d1      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	10908120 	.word	0x10908120
 80014b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b8d      	ldr	r3, [pc, #564]	; (80016f0 <HAL_RCC_OscConfig+0xb3c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0e8      	beq.n	8001496 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x92e>
 80014d4:	4b87      	ldr	r3, [pc, #540]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a86      	ldr	r2, [pc, #536]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e035      	b.n	800154e <HAL_RCC_OscConfig+0x99a>
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x958>
 80014f2:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a7f      	ldr	r2, [pc, #508]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a7c      	ldr	r2, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	e020      	b.n	800154e <HAL_RCC_OscConfig+0x99a>
 800150c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001510:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d10c      	bne.n	8001536 <HAL_RCC_OscConfig+0x982>
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a74      	ldr	r2, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a71      	ldr	r2, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e00b      	b.n	800154e <HAL_RCC_OscConfig+0x99a>
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a6b      	ldr	r2, [pc, #428]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8081 	beq.w	8001662 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa36 	bl	80009d0 <HAL_GetTick>
 8001564:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fa31 	bl	80009d0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e365      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001586:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001592:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015c8:	601a      	str	r2, [r3, #0]
  return result;
 80015ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0xa3a>
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	e013      	b.n	8001616 <HAL_RCC_OscConfig+0xa62>
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800161a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800161e:	2102      	movs	r1, #2
 8001620:	6011      	str	r1, [r2, #0]
 8001622:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001626:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	fa92 f1a2 	rbit	r1, r2
 8001630:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001634:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001638:	6011      	str	r1, [r2, #0]
  return result;
 800163a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800163e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d084      	beq.n	800156a <HAL_RCC_OscConfig+0x9b6>
 8001660:	e083      	b.n	800176a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f9b5 	bl	80009d0 <HAL_GetTick>
 8001666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff f9b0 	bl	80009d0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e2e4      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016b0:	2202      	movs	r2, #2
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ca:	601a      	str	r2, [r3, #0]
  return result;
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0xb44>
 80016ea:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_RCC_OscConfig+0xb40>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	e017      	b.n	8001720 <HAL_RCC_OscConfig+0xb6c>
 80016f0:	40007000 	.word	0x40007000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001716:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	4bb3      	ldr	r3, [pc, #716]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001724:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001728:	2102      	movs	r1, #2
 800172a:	6011      	str	r1, [r2, #0]
 800172c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001730:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	fa92 f1a2 	rbit	r1, r2
 800173a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800173e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001742:	6011      	str	r1, [r2, #0]
  return result;
 8001744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001748:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f002 021f 	and.w	r2, r2, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d180      	bne.n	800166c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a9d      	ldr	r2, [pc, #628]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 825e 	beq.w	8001c4c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001790:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	f000 821f 	beq.w	8001bdc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	f040 8170 	bne.w	8001a90 <HAL_RCC_OscConfig+0xedc>
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017d4:	601a      	str	r2, [r3, #0]
  return result;
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f8eb 	bl	80009d0 <HAL_GetTick>
 80017fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	e009      	b.n	8001814 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f8e6 	bl	80009d0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e21c      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001838:	601a      	str	r2, [r3, #0]
  return result;
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001842:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0xcaa>
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e027      	b.n	80018ae <HAL_RCC_OscConfig+0xcfa>
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800188c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018ba:	6011      	str	r1, [r2, #0]
 80018bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	fa92 f1a2 	rbit	r1, r2
 80018ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018ce:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80018d2:	6011      	str	r1, [r2, #0]
  return result;
 80018d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018d8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d182      	bne.n	8001800 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f023 020f 	bic.w	r2, r3, #15
 8001902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001906:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	4937      	ldr	r1, [pc, #220]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001910:	4313      	orrs	r3, r2
 8001912:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a19      	ldr	r1, [r3, #32]
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	430b      	orrs	r3, r1
 8001936:	492d      	ldr	r1, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800196a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001976:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	461a      	mov	r2, r3
 800197e:	2301      	movs	r3, #1
 8001980:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f825 	bl	80009d0 <HAL_GetTick>
 8001986:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198a:	e009      	b.n	80019a0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f820 	bl	80009d0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e156      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 80019a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019c4:	601a      	str	r2, [r3, #0]
  return result;
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe3c>
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <HAL_RCC_OscConfig+0xe38>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e02a      	b.n	8001a40 <HAL_RCC_OscConfig+0xe8c>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	4b86      	ldr	r3, [pc, #536]	; (8001c58 <HAL_RCC_OscConfig+0x10a4>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a44:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a60:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f43f af7f 	beq.w	800198c <HAL_RCC_OscConfig+0xdd8>
 8001a8e:	e0dd      	b.n	8001c4c <HAL_RCC_OscConfig+0x1098>
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ab4:	601a      	str	r2, [r3, #0]
  return result;
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001abe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7fe ff7b 	bl	80009d0 <HAL_GetTick>
 8001ada:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	e009      	b.n	8001af4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7fe ff76 	bl	80009d0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0ac      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b18:	601a      	str	r2, [r3, #0]
  return result;
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_OscConfig+0xf8a>
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x10a4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e027      	b.n	8001b8e <HAL_RCC_OscConfig+0xfda>
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f2a3 	rbit	r2, r3
 8001b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b84:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_RCC_OscConfig+0x10a4>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b9a:	6011      	str	r1, [r2, #0]
 8001b9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ba0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	fa92 f1a2 	rbit	r1, r2
 8001baa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bae:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001bb2:	6011      	str	r1, [r2, #0]
  return result;
 8001bb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	fab2 f282 	clz	r2, r2
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f042 0220 	orr.w	r2, r2, #32
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f002 021f 	and.w	r2, r2, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d182      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xf2c>
 8001bda:	e037      	b.n	8001c4c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e02e      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_OscConfig+0x10a4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x10a4>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c04:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d117      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10b      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c34:	f003 020f 	and.w	r2, r3, #15
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b09e      	sub	sp, #120	; 0x78
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e162      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b90      	ldr	r3, [pc, #576]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	498b      	ldr	r1, [pc, #556]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b89      	ldr	r3, [pc, #548]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e14a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	497f      	ldr	r1, [pc, #508]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80dc 	beq.w	8001e88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d13c      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xf6>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xa6>
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e00f      	b.n	8001d22 <HAL_RCC_ClockConfig+0xc6>
 8001d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
 8001d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d2a:	fa92 f2a2 	rbit	r2, r2
 8001d2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f042 0220 	orr.w	r2, r2, #32
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d17b      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0f3      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d13c      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x178>
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x128>
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e00f      	b.n	8001da4 <HAL_RCC_ClockConfig+0x148>
 8001d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
 8001d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dac:	fa92 f2a2 	rbit	r2, r2
 8001db0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d13a      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b2      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1a0>
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e00d      	b.n	8001e18 <HAL_RCC_ClockConfig+0x1bc>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	2202      	movs	r2, #2
 8001e1a:	61ba      	str	r2, [r7, #24]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	617a      	str	r2, [r7, #20]
  return result;
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e079      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	491a      	ldr	r1, [pc, #104]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7fe fdba 	bl	80009d0 <HAL_GetTick>
 8001e5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe fdb6 	bl	80009d0 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e061      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d214      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_ClockConfig+0x25c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e040      	b.n	8001f3a <HAL_RCC_ClockConfig+0x2de>
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_ClockConfig+0x2e8>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	491a      	ldr	r1, [pc, #104]	; (8001f44 <HAL_RCC_ClockConfig+0x2e8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCC_ClockConfig+0x2e8>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x2e8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001efe:	f000 f829 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f02:	4601      	mov	r1, r0
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCC_ClockConfig+0x2e8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0c:	22f0      	movs	r2, #240	; 0xf0
 8001f0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	60fa      	str	r2, [r7, #12]
  return result;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	40d3      	lsrs	r3, r2
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x2ec>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	fa21 f303 	lsr.w	r3, r1, r3
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_RCC_ClockConfig+0x2f0>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_RCC_ClockConfig+0x2f4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fd1c 	bl	8000970 <HAL_InitTick>
  
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3778      	adds	r7, #120	; 0x78
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08002098 	.word	0x08002098
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x36>
 8001f82:	e03f      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f86:	623b      	str	r3, [r7, #32]
      break;
 8001f88:	e03f      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	607a      	str	r2, [r7, #4]
  return result;
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	40d3      	lsrs	r3, r2
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	e007      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	623b      	str	r3, [r7, #32]
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002006:	623b      	str	r3, [r7, #32]
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6a3b      	ldr	r3, [r7, #32]
}
 800200c:	4618      	mov	r0, r3
 800200e:	372c      	adds	r7, #44	; 0x2c
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40021000 	.word	0x40021000
 800201c:	007a1200 	.word	0x007a1200
 8002020:	080020a8 	.word	0x080020a8
 8002024:	080020b8 	.word	0x080020b8

08002028 <memset>:
 8002028:	4402      	add	r2, r0
 800202a:	4603      	mov	r3, r0
 800202c:	4293      	cmp	r3, r2
 800202e:	d100      	bne.n	8002032 <memset+0xa>
 8002030:	4770      	bx	lr
 8002032:	f803 1b01 	strb.w	r1, [r3], #1
 8002036:	e7f9      	b.n	800202c <memset+0x4>

08002038 <__libc_init_array>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	4d0d      	ldr	r5, [pc, #52]	; (8002070 <__libc_init_array+0x38>)
 800203c:	4c0d      	ldr	r4, [pc, #52]	; (8002074 <__libc_init_array+0x3c>)
 800203e:	1b64      	subs	r4, r4, r5
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	2600      	movs	r6, #0
 8002044:	42a6      	cmp	r6, r4
 8002046:	d109      	bne.n	800205c <__libc_init_array+0x24>
 8002048:	4d0b      	ldr	r5, [pc, #44]	; (8002078 <__libc_init_array+0x40>)
 800204a:	4c0c      	ldr	r4, [pc, #48]	; (800207c <__libc_init_array+0x44>)
 800204c:	f000 f818 	bl	8002080 <_init>
 8002050:	1b64      	subs	r4, r4, r5
 8002052:	10a4      	asrs	r4, r4, #2
 8002054:	2600      	movs	r6, #0
 8002056:	42a6      	cmp	r6, r4
 8002058:	d105      	bne.n	8002066 <__libc_init_array+0x2e>
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002060:	4798      	blx	r3
 8002062:	3601      	adds	r6, #1
 8002064:	e7ee      	b.n	8002044 <__libc_init_array+0xc>
 8002066:	f855 3b04 	ldr.w	r3, [r5], #4
 800206a:	4798      	blx	r3
 800206c:	3601      	adds	r6, #1
 800206e:	e7f2      	b.n	8002056 <__libc_init_array+0x1e>
 8002070:	080020c8 	.word	0x080020c8
 8002074:	080020c8 	.word	0x080020c8
 8002078:	080020c8 	.word	0x080020c8
 800207c:	080020cc 	.word	0x080020cc

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
