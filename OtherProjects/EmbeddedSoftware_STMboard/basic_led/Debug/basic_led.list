
basic_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000490c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001015  00000000  00000000  0002498b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000400  00000000  00000000  000259a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002e2  00000000  00000000  00025da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e948  00000000  00000000  00026082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005d79  00000000  00000000  000449ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb8be  00000000  00000000  0004a743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e30  00000000  00000000  00106004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00106e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800233c 	.word	0x0800233c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800233c 	.word	0x0800233c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();

  /* USER CODE BEGIN Init */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN_Msk;
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <main+0x64>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <main+0x64>)
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6153      	str	r3, [r2, #20]

	GPIOA->MODER |= GPIO_MODER_MODER5_Msk;
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f023 0320 	bic.w	r3, r3, #32
 8000202:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_Msk;
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000212:	6093      	str	r3, [r2, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f812 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f86e 	bl	80002f8 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIOA->ODR ^= GPIO_ODR_5;
 800021c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	f083 0320 	eor.w	r3, r3, #32
 800022a:	6153      	str	r3, [r2, #20]
	  HAL_Delay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f000 f984 	bl	800053c <HAL_Delay>
	  GPIOA->ODR ^= GPIO_ODR_5;
 8000234:	e7f2      	b.n	800021c <main+0x48>
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0a6      	sub	sp, #152	; 0x98
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 f84a 	bl	80022e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2258      	movs	r2, #88	; 0x58
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 f83c 	bl	80022e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000288:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fbca 	bl	8000a34 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a6:	f000 f88d 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fc08 	bl	8001adc <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d2:	f000 f877 	bl	80003c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fde1 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ec:	f000 f86a 	bl	80003c4 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3798      	adds	r7, #152	; 0x98
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0314 	add.w	r3, r7, #20
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_GPIO_Init+0xc4>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a24      	ldr	r2, [pc, #144]	; (80003bc <MX_GPIO_Init+0xc4>)
 800032c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_GPIO_Init+0xc4>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a18      	ldr	r2, [pc, #96]	; (80003bc <MX_GPIO_Init+0xc4>)
 800035c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f000 fb45 	bl	8000a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000380:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <MX_GPIO_Init+0xc8>)
 8000392:	f000 f9ad 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000396:	2320      	movs	r3, #32
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2300      	movs	r3, #0
 80003a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 f99e 	bl	80006f0 <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>

080003ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <NMI_Handler+0x4>

080003d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <HardFault_Handler+0x4>

080003da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <BusFault_Handler+0x4>

080003e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <UsageFault_Handler+0x4>

080003ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041a:	f000 f86f 	bl	80004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SystemInit+0x20>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <SystemInit+0x20>)
 8000430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000480 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800044c:	f7ff ffea 	bl	8000424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000476:	f001 ff3d 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800047a:	f7ff feab 	bl	80001d4 <main>

0800047e <LoopForever>:

LoopForever:
    b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000480:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800048c:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8000490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000494:	2000002c 	.word	0x2000002c

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_InitTick+0x54>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_InitTick+0x58>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f90c 	bl	80006d8 <HAL_SYSTICK_Config>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
 80004c8:	e00e      	b.n	80004e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b0f      	cmp	r3, #15
 80004ce:	d80a      	bhi.n	80004e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d0:	2200      	movs	r2, #0
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	f04f 30ff 	mov.w	r0, #4294967295
 80004d8:	f000 f8e2 	bl	80006a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_InitTick+0x5c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	e000      	b.n	80004e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000004 	.word	0x20000004

080004fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	20000028 	.word	0x20000028

08000524 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return uwTick;  
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <HAL_GetTick+0x14>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000544:	f7ff ffee 	bl	8000524 <HAL_GetTick>
 8000548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000554:	d005      	beq.n	8000562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_Delay+0x44>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000562:	bf00      	nop
 8000564:	f7ff ffde 	bl	8000524 <HAL_GetTick>
 8000568:	4602      	mov	r2, r0
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d8f7      	bhi.n	8000564 <HAL_Delay+0x28>
  {
  }
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000008 	.word	0x20000008

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	; 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800066c:	d301      	bcc.n	8000672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2301      	movs	r3, #1
 8000670:	e00f      	b.n	8000692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SysTick_Config+0x40>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067a:	210f      	movs	r1, #15
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f7ff ff8e 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SysTick_Config+0x40>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SysTick_Config+0x40>)
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006b2:	f7ff ff67 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	6978      	ldr	r0, [r7, #20]
 80006be:	f7ff ff99 	bl	80005f4 <NVIC_EncodePriority>
 80006c2:	4602      	mov	r2, r0
 80006c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff68 	bl	80005a0 <__NVIC_SetPriority>
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffbb 	bl	800065c <SysTick_Config>
 80006e6:	4603      	mov	r3, r0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006fe:	e160      	b.n	80009c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 8152 	beq.w	80009bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	2b01      	cmp	r3, #1
 8000722:	d005      	beq.n	8000730 <HAL_GPIO_Init+0x40>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f003 0303 	and.w	r3, r3, #3
 800072c:	2b02      	cmp	r3, #2
 800072e:	d130      	bne.n	8000792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2203      	movs	r2, #3
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4313      	orrs	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000766:	2201      	movs	r2, #1
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	091b      	lsrs	r3, r3, #4
 800077c:	f003 0201 	and.w	r2, r3, #1
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	4313      	orrs	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f003 0303 	and.w	r3, r3, #3
 800079a:	2b03      	cmp	r3, #3
 800079c:	d017      	beq.n	80007ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	2203      	movs	r2, #3
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	4013      	ands	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d123      	bne.n	8000822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	08da      	lsrs	r2, r3, #3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	220f      	movs	r2, #15
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f003 0307 	and.w	r3, r3, #7
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	08da      	lsrs	r2, r3, #3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3208      	adds	r2, #8
 800081c:	6939      	ldr	r1, [r7, #16]
 800081e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4013      	ands	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 0203 	and.w	r2, r3, #3
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 80ac 	beq.w	80009bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000864:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <HAL_GPIO_Init+0x2f0>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a5d      	ldr	r2, [pc, #372]	; (80009e0 <HAL_GPIO_Init+0x2f0>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <HAL_GPIO_Init+0x2f0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800087c:	4a59      	ldr	r2, [pc, #356]	; (80009e4 <HAL_GPIO_Init+0x2f4>)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	3302      	adds	r3, #2
 8000884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008a6:	d025      	beq.n	80008f4 <HAL_GPIO_Init+0x204>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a4f      	ldr	r2, [pc, #316]	; (80009e8 <HAL_GPIO_Init+0x2f8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d01f      	beq.n	80008f0 <HAL_GPIO_Init+0x200>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <HAL_GPIO_Init+0x2fc>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d019      	beq.n	80008ec <HAL_GPIO_Init+0x1fc>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a4d      	ldr	r2, [pc, #308]	; (80009f0 <HAL_GPIO_Init+0x300>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d013      	beq.n	80008e8 <HAL_GPIO_Init+0x1f8>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a4c      	ldr	r2, [pc, #304]	; (80009f4 <HAL_GPIO_Init+0x304>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d00d      	beq.n	80008e4 <HAL_GPIO_Init+0x1f4>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a4b      	ldr	r2, [pc, #300]	; (80009f8 <HAL_GPIO_Init+0x308>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d007      	beq.n	80008e0 <HAL_GPIO_Init+0x1f0>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a4a      	ldr	r2, [pc, #296]	; (80009fc <HAL_GPIO_Init+0x30c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d101      	bne.n	80008dc <HAL_GPIO_Init+0x1ec>
 80008d8:	2306      	movs	r3, #6
 80008da:	e00c      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008dc:	2307      	movs	r3, #7
 80008de:	e00a      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008e0:	2305      	movs	r3, #5
 80008e2:	e008      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008e4:	2304      	movs	r3, #4
 80008e6:	e006      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008e8:	2303      	movs	r3, #3
 80008ea:	e004      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008ec:	2302      	movs	r3, #2
 80008ee:	e002      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <HAL_GPIO_Init+0x206>
 80008f4:	2300      	movs	r3, #0
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	f002 0203 	and.w	r2, r2, #3
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	4093      	lsls	r3, r2
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000906:	4937      	ldr	r1, [pc, #220]	; (80009e4 <HAL_GPIO_Init+0x2f4>)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	3302      	adds	r3, #2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <HAL_GPIO_Init+0x310>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000938:	4a31      	ldr	r2, [pc, #196]	; (8000a00 <HAL_GPIO_Init+0x310>)
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <HAL_GPIO_Init+0x310>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4313      	orrs	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000962:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <HAL_GPIO_Init+0x310>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <HAL_GPIO_Init+0x310>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_GPIO_Init+0x310>)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_GPIO_Init+0x310>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <HAL_GPIO_Init+0x310>)
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3301      	adds	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa22 f303 	lsr.w	r3, r2, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f47f ae97 	bne.w	8000700 <HAL_GPIO_Init+0x10>
  }
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	48001000 	.word	0x48001000
 80009f8:	48001400 	.word	0x48001400
 80009fc:	48001800 	.word	0x48001800
 8000a00:	40010400 	.word	0x40010400

08000a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
 8000a10:	4613      	mov	r3, r2
 8000a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a14:	787b      	ldrb	r3, [r7, #1]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a1a:	887a      	ldrh	r2, [r7, #2]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a22:	887a      	ldrh	r2, [r7, #2]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000a44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f001 b83a 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 816f 	beq.w	8000d4e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a70:	4bb5      	ldr	r3, [pc, #724]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 030c 	and.w	r3, r3, #12
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d00c      	beq.n	8000a96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a7c:	4bb2      	ldr	r3, [pc, #712]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 030c 	and.w	r3, r3, #12
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d15c      	bne.n	8000b42 <HAL_RCC_OscConfig+0x10e>
 8000a88:	4baf      	ldr	r3, [pc, #700]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a94:	d155      	bne.n	8000b42 <HAL_RCC_OscConfig+0x10e>
 8000a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000aa2:	fa93 f3a3 	rbit	r3, r3
 8000aa6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aaa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aae:	fab3 f383 	clz	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	095b      	lsrs	r3, r3, #5
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d102      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x94>
 8000ac2:	4ba1      	ldr	r3, [pc, #644]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	e015      	b.n	8000af4 <HAL_RCC_OscConfig+0xc0>
 8000ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000acc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ad4:	fa93 f3a3 	rbit	r3, r3
 8000ad8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ae4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ae8:	fa93 f3a3 	rbit	r3, r3
 8000aec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000af0:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000af8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000afc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b00:	fa92 f2a2 	rbit	r2, r2
 8000b04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000b08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	f042 0220 	orr.w	r2, r2, #32
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	f002 021f 	and.w	r2, r2, #31
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 8111 	beq.w	8000d4c <HAL_RCC_OscConfig+0x318>
 8000b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8108 	bne.w	8000d4c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f000 bfc6 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b52:	d106      	bne.n	8000b62 <HAL_RCC_OscConfig+0x12e>
 8000b54:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a7b      	ldr	r2, [pc, #492]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e036      	b.n	8000bd0 <HAL_RCC_OscConfig+0x19c>
 8000b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x158>
 8000b72:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a74      	ldr	r2, [pc, #464]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	4b72      	ldr	r3, [pc, #456]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a71      	ldr	r2, [pc, #452]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e021      	b.n	8000bd0 <HAL_RCC_OscConfig+0x19c>
 8000b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x184>
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a69      	ldr	r2, [pc, #420]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b67      	ldr	r3, [pc, #412]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a66      	ldr	r2, [pc, #408]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_RCC_OscConfig+0x19c>
 8000bb8:	4b63      	ldr	r3, [pc, #396]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a62      	ldr	r2, [pc, #392]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a5f      	ldr	r2, [pc, #380]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bce:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d059      	beq.n	8000c94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fca0 	bl	8000524 <HAL_GetTick>
 8000be4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bea:	f7ff fc9b 	bl	8000524 <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d902      	bls.n	8000c00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f000 bf67 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 8000c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000c14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	fab3 f383 	clz	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d102      	bne.n	8000c32 <HAL_RCC_OscConfig+0x1fe>
 8000c2c:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	e015      	b.n	8000c5e <HAL_RCC_OscConfig+0x22a>
 8000c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000c52:	fa93 f3a3 	rbit	r3, r3
 8000c56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000c66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000c6a:	fa92 f2a2 	rbit	r2, r2
 8000c6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000c72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	f042 0220 	orr.w	r2, r2, #32
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	f002 021f 	and.w	r2, r2, #31
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0ab      	beq.n	8000bea <HAL_RCC_OscConfig+0x1b6>
 8000c92:	e05c      	b.n	8000d4e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc46 	bl	8000524 <HAL_GetTick>
 8000c98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9c:	e00a      	b.n	8000cb4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9e:	f7ff fc41 	bl	8000524 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d902      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f000 bf0d 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 8000cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000cc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ccc:	fab3 f383 	clz	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d102      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x2b2>
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	e015      	b.n	8000d12 <HAL_RCC_OscConfig+0x2de>
 8000ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_RCC_OscConfig+0x314>)
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d1a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d1e:	fa92 f2a2 	rbit	r2, r2
 8000d22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000d26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	f042 0220 	orr.w	r2, r2, #32
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	f002 021f 	and.w	r2, r2, #31
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1ab      	bne.n	8000c9e <HAL_RCC_OscConfig+0x26a>
 8000d46:	e002      	b.n	8000d4e <HAL_RCC_OscConfig+0x31a>
 8000d48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 817f 	beq.w	8001062 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d64:	4ba7      	ldr	r3, [pc, #668]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d70:	4ba4      	ldr	r3, [pc, #656]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d173      	bne.n	8000e64 <HAL_RCC_OscConfig+0x430>
 8000d7c:	4ba1      	ldr	r3, [pc, #644]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d88:	d16c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x430>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000d9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d102      	bne.n	8000dba <HAL_RCC_OscConfig+0x386>
 8000db4:	4b93      	ldr	r3, [pc, #588]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	e013      	b.n	8000de2 <HAL_RCC_OscConfig+0x3ae>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000dd2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000dde:	4b89      	ldr	r3, [pc, #548]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2202      	movs	r2, #2
 8000de4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000de8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000dec:	fa92 f2a2 	rbit	r2, r2
 8000df0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000df4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f002 021f 	and.w	r2, r2, #31
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00a      	beq.n	8000e2a <HAL_RCC_OscConfig+0x3f6>
 8000e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d002      	beq.n	8000e2a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f000 be52 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	21f8      	movs	r1, #248	; 0xf8
 8000e40:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000e48:	fa91 f1a1 	rbit	r1, r1
 8000e4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000e50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e54:	fab1 f181 	clz	r1, r1
 8000e58:	b2c9      	uxtb	r1, r1
 8000e5a:	408b      	lsls	r3, r1
 8000e5c:	4969      	ldr	r1, [pc, #420]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e62:	e0fe      	b.n	8001062 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 8088 	beq.w	8000f86 <HAL_RCC_OscConfig+0x552>
 8000e76:	2301      	movs	r3, #1
 8000e78:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000e88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fb3f 	bl	8000524 <HAL_GetTick>
 8000ea6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eaa:	e00a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fb3a 	bl	8000524 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d902      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f000 be06 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000ed4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4be>
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e013      	b.n	8000f1a <HAL_RCC_OscConfig+0x4e6>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f0a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f20:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000f2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0af      	beq.n	8000eac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	21f8      	movs	r1, #248	; 0xf8
 8000f62:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000f6a:	fa91 f1a1 	rbit	r1, r1
 8000f6e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000f72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f76:	fab1 f181 	clz	r1, r1
 8000f7a:	b2c9      	uxtb	r1, r1
 8000f7c:	408b      	lsls	r3, r1
 8000f7e:	4921      	ldr	r1, [pc, #132]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	e06d      	b.n	8001062 <HAL_RCC_OscConfig+0x62e>
 8000f86:	2301      	movs	r3, #1
 8000f88:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000f98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9c:	fab3 f383 	clz	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fab7 	bl	8000524 <HAL_GetTick>
 8000fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fab2 	bl	8000524 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d902      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f000 bd7e 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_RCC_OscConfig+0x5d4>
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_RCC_OscConfig+0x5d0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e016      	b.n	8001030 <HAL_RCC_OscConfig+0x5fc>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001020:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800102c:	4bbf      	ldr	r3, [pc, #764]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	2202      	movs	r2, #2
 8001032:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001036:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001042:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ac      	bne.n	8000fbc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001066:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8113 	beq.w	800129e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800107c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d07c      	beq.n	8001182 <HAL_RCC_OscConfig+0x74e>
 8001088:	2301      	movs	r3, #1
 800108a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800109a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4ba2      	ldr	r3, [pc, #648]	; (8001330 <HAL_RCC_OscConfig+0x8fc>)
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	2301      	movs	r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fa37 	bl	8000524 <HAL_GetTick>
 80010b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fa32 	bl	8000524 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d902      	bls.n	80010d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f000 bcfe 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010dc:	fa93 f2a3 	rbit	r2, r3
 80010e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010f2:	2202      	movs	r2, #2
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	fa93 f2a3 	rbit	r2, r3
 8001104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001112:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001116:	2202      	movs	r2, #2
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800111e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	fa93 f2a3 	rbit	r2, r3
 8001128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800112c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001130:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b7e      	ldr	r3, [pc, #504]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 8001134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800113a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800113e:	2102      	movs	r1, #2
 8001140:	6019      	str	r1, [r3, #0]
 8001142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001146:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fa93 f1a3 	rbit	r1, r3
 8001150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001154:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001158:	6019      	str	r1, [r3, #0]
  return result;
 800115a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d09d      	beq.n	80010bc <HAL_RCC_OscConfig+0x688>
 8001180:	e08d      	b.n	800129e <HAL_RCC_OscConfig+0x86a>
 8001182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001186:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fa93 f2a3 	rbit	r2, r3
 800119c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011a4:	601a      	str	r2, [r3, #0]
  return result;
 80011a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <HAL_RCC_OscConfig+0x8fc>)
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	461a      	mov	r2, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff f9ae 	bl	8000524 <HAL_GetTick>
 80011c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff f9a9 	bl	8000524 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d902      	bls.n	80011e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	f000 bc75 	b.w	8001ace <HAL_RCC_OscConfig+0x109a>
 80011e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011ec:	2202      	movs	r2, #2
 80011ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	fa93 f2a3 	rbit	r2, r3
 80011fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001210:	2202      	movs	r2, #2
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	fa93 f2a3 	rbit	r2, r3
 8001222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001230:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001234:	2202      	movs	r2, #2
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800124e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 8001252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001258:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800125c:	2102      	movs	r1, #2
 800125e:	6019      	str	r1, [r3, #0]
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	fa93 f1a3 	rbit	r1, r3
 800126e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001272:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001276:	6019      	str	r1, [r3, #0]
  return result;
 8001278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d197      	bne.n	80011ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 81a5 	beq.w	80015fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_RCC_OscConfig+0x8f8>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_RCC_OscConfig+0x900>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d121      	bne.n	8001344 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_RCC_OscConfig+0x900>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x900>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130c:	f7ff f90a 	bl	8000524 <HAL_GetTick>
 8001310:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e010      	b.n	8001338 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff f905 	bl	8000524 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d908      	bls.n	8001338 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e3d1      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	10908120 	.word	0x10908120
 8001334:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <HAL_RCC_OscConfig+0xb3c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0e8      	beq.n	8001316 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001348:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x92e>
 8001354:	4b87      	ldr	r3, [pc, #540]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a86      	ldr	r2, [pc, #536]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e035      	b.n	80013ce <HAL_RCC_OscConfig+0x99a>
 8001362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x958>
 8001372:	4b80      	ldr	r3, [pc, #512]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a7c      	ldr	r2, [pc, #496]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e020      	b.n	80013ce <HAL_RCC_OscConfig+0x99a>
 800138c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x982>
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a74      	ldr	r2, [pc, #464]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a71      	ldr	r2, [pc, #452]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x99a>
 80013b6:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8081 	beq.w	80014e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff f8a0 	bl	8000524 <HAL_GetTick>
 80013e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff f89b 	bl	8000524 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e365      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 8001402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001406:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800140a:	2202      	movs	r2, #2
 800140c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001412:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001420:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800142a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800142e:	2202      	movs	r2, #2
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001436:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	fa93 f2a3 	rbit	r2, r3
 8001440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001444:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001448:	601a      	str	r2, [r3, #0]
  return result;
 800144a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0xa3a>
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	e013      	b.n	8001496 <HAL_RCC_OscConfig+0xa62>
 800146e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001472:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001476:	2202      	movs	r2, #2
 8001478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800149a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800149e:	2102      	movs	r1, #2
 80014a0:	6011      	str	r1, [r2, #0]
 80014a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80014a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	fa92 f1a2 	rbit	r1, r2
 80014b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80014b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80014b8:	6011      	str	r1, [r2, #0]
  return result;
 80014ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80014be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f002 021f 	and.w	r2, r2, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d084      	beq.n	80013ea <HAL_RCC_OscConfig+0x9b6>
 80014e0:	e083      	b.n	80015ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f81f 	bl	8000524 <HAL_GetTick>
 80014e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff f81a 	bl	8000524 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e2e4      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 8001504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001508:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001514:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001522:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001538:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001546:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800154a:	601a      	str	r2, [r3, #0]
  return result;
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001554:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	095b      	lsrs	r3, r3, #5
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0xb44>
 800156a:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_RCC_OscConfig+0xb40>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	e017      	b.n	80015a0 <HAL_RCC_OscConfig+0xb6c>
 8001570:	40007000 	.word	0x40007000
 8001574:	40021000 	.word	0x40021000
 8001578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	4bb3      	ldr	r3, [pc, #716]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80015a8:	2102      	movs	r1, #2
 80015aa:	6011      	str	r1, [r2, #0]
 80015ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	fa92 f1a2 	rbit	r1, r2
 80015ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80015c2:	6011      	str	r1, [r2, #0]
  return result;
 80015c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	fab2 f282 	clz	r2, r2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f002 021f 	and.w	r2, r2, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d180      	bne.n	80014ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d105      	bne.n	80015fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b9e      	ldr	r3, [pc, #632]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a9d      	ldr	r2, [pc, #628]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001602:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 825e 	beq.w	8001acc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4b96      	ldr	r3, [pc, #600]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	f000 821f 	beq.w	8001a5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b02      	cmp	r3, #2
 800162c:	f040 8170 	bne.w	8001910 <HAL_RCC_OscConfig+0xedc>
 8001630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001634:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001642:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fa93 f2a3 	rbit	r2, r3
 800164c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001650:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001654:	601a      	str	r2, [r3, #0]
  return result;
 8001656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800165e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800166a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	2300      	movs	r3, #0
 8001674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7fe ff55 	bl	8000524 <HAL_GetTick>
 800167a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7fe ff50 	bl	8000524 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e21c      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800169c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016b8:	601a      	str	r2, [r3, #0]
  return result;
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0xcaa>
 80016d8:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e027      	b.n	800172e <HAL_RCC_OscConfig+0xcfa>
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80016e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800170c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001716:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001724:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001732:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001736:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800173a:	6011      	str	r1, [r2, #0]
 800173c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001740:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	fa92 f1a2 	rbit	r1, r2
 800174a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800174e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001752:	6011      	str	r1, [r2, #0]
  return result;
 8001754:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001758:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f002 021f 	and.w	r2, r2, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d182      	bne.n	8001680 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	f023 020f 	bic.w	r2, r3, #15
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 8001790:	4313      	orrs	r3, r2
 8001792:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a19      	ldr	r1, [r3, #32]
 80017a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	492d      	ldr	r1, [pc, #180]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80017c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80017e0:	601a      	str	r2, [r3, #0]
  return result;
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80017ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	461a      	mov	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7fe fe8f 	bl	8000524 <HAL_GetTick>
 8001806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180a:	e009      	b.n	8001820 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7fe fe8a 	bl	8000524 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e156      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 8001820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001824:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001844:	601a      	str	r2, [r3, #0]
  return result;
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800184e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0xe3c>
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <HAL_RCC_OscConfig+0xe38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	e02a      	b.n	80018c0 <HAL_RCC_OscConfig+0xe8c>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001874:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001882:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001890:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	4b86      	ldr	r3, [pc, #536]	; (8001ad8 <HAL_RCC_OscConfig+0x10a4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80018c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fa92 f1a2 	rbit	r1, r2
 80018dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018e0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80018e4:	6011      	str	r1, [r2, #0]
  return result;
 80018e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018ea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fab2 f282 	clz	r2, r2
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f002 021f 	and.w	r2, r2, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	f43f af7f 	beq.w	800180c <HAL_RCC_OscConfig+0xdd8>
 800190e:	e0dd      	b.n	8001acc <HAL_RCC_OscConfig+0x1098>
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001930:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001934:	601a      	str	r2, [r3, #0]
  return result;
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800193e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	461a      	mov	r2, r3
 8001952:	2300      	movs	r3, #0
 8001954:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7fe fde5 	bl	8000524 <HAL_GetTick>
 800195a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	e009      	b.n	8001974 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7fe fde0 	bl	8000524 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0ac      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
 8001974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001978:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001986:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001994:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001998:	601a      	str	r2, [r3, #0]
  return result;
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80019a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0xf8a>
 80019b8:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x10a4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e027      	b.n	8001a0e <HAL_RCC_OscConfig+0xfda>
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80019ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_RCC_OscConfig+0x10a4>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1a:	6011      	str	r1, [r2, #0]
 8001a1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	fa92 f1a2 	rbit	r1, r2
 8001a2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a2e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001a32:	6011      	str	r1, [r2, #0]
  return result;
 8001a34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a38:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d182      	bne.n	8001960 <HAL_RCC_OscConfig+0xf2c>
 8001a5a:	e037      	b.n	8001acc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e02e      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_OscConfig+0x10a4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_RCC_OscConfig+0x10a4>)
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d117      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab4:	f003 020f 	and.w	r2, r3, #15
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e162      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	498b      	ldr	r1, [pc, #556]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e14a      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	497f      	ldr	r1, [pc, #508]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80dc 	beq.w	8001d08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d13c      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xf6>
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xa6>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e00f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0xc6>
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
 8001b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001baa:	fa92 f2a2 	rbit	r2, r2
 8001bae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f002 021f 	and.w	r2, r2, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d17b      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0f3      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d13c      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x178>
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x128>
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_ClockConfig+0x148>
 8001c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2c:	fa92 f2a2 	rbit	r2, r2
 8001c30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f002 021f 	and.w	r2, r2, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d13a      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b2      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x1a0>
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e00d      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1bc>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	61ba      	str	r2, [r7, #24]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	fa92 f2a2 	rbit	r2, r2
 8001ca2:	617a      	str	r2, [r7, #20]
  return result;
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f042 0220 	orr.w	r2, r2, #32
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e079      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	491a      	ldr	r1, [pc, #104]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fc24 	bl	8000524 <HAL_GetTick>
 8001cdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7fe fc20 	bl	8000524 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e061      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d214      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4906      	ldr	r1, [pc, #24]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e040      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4912      	ldr	r1, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d7e:	f000 f829 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4601      	mov	r1, r0
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	22f0      	movs	r2, #240	; 0xf0
 8001d8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	60fa      	str	r2, [r7, #12]
  return result;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	40d3      	lsrs	r3, r2
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x2ec>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	fa21 f303 	lsr.w	r3, r1, r3
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x2f0>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_ClockConfig+0x2f4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb72 	bl	800049c <HAL_InitTick>
  
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3778      	adds	r7, #120	; 0x78
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002354 	.word	0x08002354
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x36>
 8001e02:	e03f      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e06:	623b      	str	r3, [r7, #32]
      break;
 8001e08:	e03f      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	607a      	str	r2, [r7, #4]
  return result;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	40d3      	lsrs	r3, r2
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	220f      	movs	r2, #15
 8001e38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	60fa      	str	r2, [r7, #12]
  return result;
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	40d3      	lsrs	r3, r2
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	e007      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	623b      	str	r3, [r7, #32]
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e86:	623b      	str	r3, [r7, #32]
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	372c      	adds	r7, #44	; 0x2c
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	007a1200 	.word	0x007a1200
 8001ea0:	08002364 	.word	0x08002364
 8001ea4:	08002374 	.word	0x08002374

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b092      	sub	sp, #72	; 0x48
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80d4 	beq.w	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10e      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	61d3      	str	r3, [r2, #28]
 8001ee4:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a41      	ldr	r2, [pc, #260]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fb09 	bl	8000524 <HAL_GetTick>
 8001f12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe fb05 	bl	8000524 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1d6      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b38      	ldr	r3, [pc, #224]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8084 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d07c      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2301      	movs	r3, #1
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001faa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d04b      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fab5 	bl	8000524 <HAL_GetTick>
 8001fba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fab1 	bl	8000524 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e180      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	61fb      	str	r3, [r7, #28]
  return result;
 8001fec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d108      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002002:	4b01      	ldr	r3, [pc, #4]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	e00d      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	10908100 	.word	0x10908100
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	4b9a      	ldr	r3, [pc, #616]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2202      	movs	r2, #2
 8002026:	613a      	str	r2, [r7, #16]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	60fa      	str	r2, [r7, #12]
  return result;
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0b7      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800204e:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	498c      	ldr	r1, [pc, #560]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002060:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	4a87      	ldr	r2, [pc, #540]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002080:	4b82      	ldr	r3, [pc, #520]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	497f      	ldr	r1, [pc, #508]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800209e:	4b7b      	ldr	r3, [pc, #492]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4978      	ldr	r1, [pc, #480]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020bc:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4970      	ldr	r1, [pc, #448]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020da:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f023 0210 	bic.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4969      	ldr	r1, [pc, #420]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	4961      	ldr	r1, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f023 0220 	bic.w	r2, r3, #32
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	495a      	ldr	r1, [pc, #360]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	4952      	ldr	r1, [pc, #328]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	494b      	ldr	r1, [pc, #300]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4943      	ldr	r1, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	493c      	ldr	r1, [pc, #240]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	4934      	ldr	r1, [pc, #208]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	492d      	ldr	r1, [pc, #180]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	491e      	ldr	r1, [pc, #120]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	4916      	ldr	r1, [pc, #88]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	490f      	ldr	r1, [pc, #60]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	e002      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002292:	4913      	ldr	r1, [pc, #76]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002294:	4313      	orrs	r3, r2
 8002296:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	490b      	ldr	r1, [pc, #44]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ce:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3748      	adds	r7, #72	; 0x48
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000

080022e4 <memset>:
 80022e4:	4402      	add	r2, r0
 80022e6:	4603      	mov	r3, r0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d100      	bne.n	80022ee <memset+0xa>
 80022ec:	4770      	bx	lr
 80022ee:	f803 1b01 	strb.w	r1, [r3], #1
 80022f2:	e7f9      	b.n	80022e8 <memset+0x4>

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	4d0d      	ldr	r5, [pc, #52]	; (800232c <__libc_init_array+0x38>)
 80022f8:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fa:	1b64      	subs	r4, r4, r5
 80022fc:	10a4      	asrs	r4, r4, #2
 80022fe:	2600      	movs	r6, #0
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	4d0b      	ldr	r5, [pc, #44]	; (8002334 <__libc_init_array+0x40>)
 8002306:	4c0c      	ldr	r4, [pc, #48]	; (8002338 <__libc_init_array+0x44>)
 8002308:	f000 f818 	bl	800233c <_init>
 800230c:	1b64      	subs	r4, r4, r5
 800230e:	10a4      	asrs	r4, r4, #2
 8002310:	2600      	movs	r6, #0
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f855 3b04 	ldr.w	r3, [r5], #4
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f855 3b04 	ldr.w	r3, [r5], #4
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	08002384 	.word	0x08002384
 8002330:	08002384 	.word	0x08002384
 8002334:	08002384 	.word	0x08002384
 8002338:	08002388 	.word	0x08002388

0800233c <_init>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	bf00      	nop
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr

08002348 <_fini>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	bf00      	nop
 800234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234e:	bc08      	pop	{r3}
 8002350:	469e      	mov	lr, r3
 8002352:	4770      	bx	lr
