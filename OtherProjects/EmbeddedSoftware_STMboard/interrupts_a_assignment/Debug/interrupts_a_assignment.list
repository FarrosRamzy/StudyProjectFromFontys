
interrupts_a_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000150  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b0d4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b51  00000000  00000000  0002b153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000060d  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fab2  00000000  00000000  0002da9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b3d6  00000000  00000000  0004d54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfe19  00000000  00000000  00058925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ee0  00000000  00000000  00118740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b74 	.word	0x08003b74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003b74 	.word	0x08003b74

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000268:	f000 fcc4 	bl	8000bf4 <HAL_Init>

	/* USER CODE BEGIN Init */
	LEDsetup();
 800026c:	f000 f8fe 	bl	800046c <LEDsetup>
	ButtonSetup();
 8000270:	f000 f932 	bl	80004d8 <ButtonSetup>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000274:	f000 f818 	bl	80002a8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	SysTick_Init();
 8000278:	f000 f966 	bl	8000548 <SysTick_Init>

	SysConfig_Enabler();
 800027c:	f000 f984 	bl	8000588 <SysConfig_Enabler>
	EXTI_Config();
 8000280:	f000 f992 	bl	80005a8 <EXTI_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000284:	f000 f8ce 	bl	8000424 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000288:	f000 f86c 	bl	8000364 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 800028c:	f000 f89a 	bl	80003c4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	ResetLED(GPIOB, GPIO_PIN_1);
 8000290:	2102      	movs	r1, #2
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <main+0x40>)
 8000294:	f000 fb64 	bl	8000960 <ResetLED>
	ResetLED(GPIOB, GPIO_PIN_2);
 8000298:	2104      	movs	r1, #4
 800029a:	4802      	ldr	r0, [pc, #8]	; (80002a4 <main+0x40>)
 800029c:	f000 fb60 	bl	8000960 <ResetLED>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002a0:	e7fe      	b.n	80002a0 <main+0x3c>
 80002a2:	bf00      	nop
 80002a4:	48000400 	.word	0x48000400

080002a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0a6      	sub	sp, #152	; 0x98
 80002ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fc2f 	bl	8003b1a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2258      	movs	r2, #88	; 0x58
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fc21 	bl	8003b1a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	2302      	movs	r3, #2
 80002da:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	2310      	movs	r3, #16
 80002e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002f4:	2300      	movs	r3, #0
 80002f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000300:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000304:	4618      	mov	r0, r3
 8000306:	f000 ffd9 	bl	80012bc <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x6c>
		Error_Handler();
 8000310:	f000 fb4d 	bl	80009ae <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 f818 	bl	8002364 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x96>
		Error_Handler();
 800033a:	f000 fb38 	bl	80009ae <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800033e:	2305      	movs	r3, #5
 8000340:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART3;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f002 fa3f 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xb4>
		Error_Handler();
 8000358:	f000 fb29 	bl	80009ae <Error_Handler>
	}
}
 800035c:	bf00      	nop
 800035e:	3798      	adds	r7, #152	; 0x98
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <MX_USART1_UART_Init+0x5c>)
 800036c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000370:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000374:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a8:	f002 fc30 	bl	8002c0c <HAL_UART_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80003b2:	f000 fafc 	bl	80009ae <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART3_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 38400;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003d4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART3_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART3_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_USART3_UART_Init+0x58>)
 8000408:	f002 fc00 	bl	8002c0c <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000412:	f000 facc 	bl	80009ae <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000b0 	.word	0x200000b0
 8000420:	40004800 	.word	0x40004800

08000424 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_GPIO_Init+0x44>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <MX_GPIO_Init+0x44>)
 8000430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_GPIO_Init+0x44>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_GPIO_Init+0x44>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <MX_GPIO_Init+0x44>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_GPIO_Init+0x44>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <LEDsetup>:
 * @brief LED setup function.
 * 
 * @note This is a GPIO setup function for the LEDs.
 * 
 */
void LEDsetup() {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <LEDsetup+0x64>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <LEDsetup+0x64>)
 8000476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800047a:	6153      	str	r3, [r2, #20]

	//resets both the LEDs' pin MODE.
	GPIOB->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER2);
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <LEDsetup+0x68>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <LEDsetup+0x68>)
 8000482:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8000486:	6013      	str	r3, [r2, #0]
	//resets both LEDs' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_2);
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <LEDsetup+0x68>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <LEDsetup+0x68>)
 800048e:	f023 0306 	bic.w	r3, r3, #6
 8000492:	6053      	str	r3, [r2, #4]
	//resets both LEDs' pin SPEED.
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR2);
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <LEDsetup+0x68>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <LEDsetup+0x68>)
 800049a:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 800049e:	6093      	str	r3, [r2, #8]
	//sets both LEDs' pin MODE to 01 as an output.
	GPIOB->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0);
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <LEDsetup+0x68>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <LEDsetup+0x68>)
 80004a6:	f043 0314 	orr.w	r3, r3, #20
 80004aa:	6013      	str	r3, [r2, #0]
	//sets both LEDs' pin SPEED to medium.
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR1_0 | GPIO_OSPEEDER_OSPEEDR2_0);
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <LEDsetup+0x68>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <LEDsetup+0x68>)
 80004b2:	f043 0314 	orr.w	r3, r3, #20
 80004b6:	6093      	str	r3, [r2, #8]
	//resets both LEDs' PUPD register.
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR2);
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <LEDsetup+0x68>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <LEDsetup+0x68>)
 80004be:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80004c2:	60d3      	str	r3, [r2, #12]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000400 	.word	0x48000400

080004d8 <ButtonSetup>:
 * @brief Button setup function.
 * 
 * @note This is a GPIO setup function for the input buttons.
 * 
 */
void ButtonSetup() {
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <ButtonSetup+0x6c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <ButtonSetup+0x6c>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6153      	str	r3, [r2, #20]

	//resets both button pins' MODE to 00 as an input.
	GPIOA->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004f6:	6013      	str	r3, [r2, #0]
	//resets both button pins' SPEED.
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9);
 80004f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000502:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000506:	6093      	str	r3, [r2, #8]
	//resets both button input PUPD registers.
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000512:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000516:	60d3      	str	r3, [r2, #12]
	//sets both button pins' SPEED to 01 (medium).
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR9_0);
 8000518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000522:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000526:	6093      	str	r3, [r2, #8]
	//sets both button input PUPD registers to 01 (pull-down).
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR8_1 | GPIO_PUPDR_PUPDR9_1);
 8000528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000532:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <SysTick_Init>:
 * 
 * @note This is a SysTick function to initialize the timer register of the ARM4
 * 		 controller of the Nucleo board.
 * 
 */
void SysTick_Init() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	//resets SysTick control pin to 0.
	SysTick->CTRL = ~SysTick_CTRL_ENABLE_Msk;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SysTick_Init+0x3c>)
 800054e:	f06f 0201 	mvn.w	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
	//sets up the reload register.
	SysTick->LOAD = 16000 - 1;
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <SysTick_Init+0x3c>)
 8000556:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800055a:	605a      	str	r2, [r3, #4]
	//sets the interrupt priority of SysTick to the least urgent.
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 800055c:	210f      	movs	r1, #15
 800055e:	f04f 30ff 	mov.w	r0, #4294967295
 8000562:	f7ff fe55 	bl	8000210 <__NVIC_SetPriority>
	//resets the SysTick counter value.
	SysTick->VAL &= SysTick_VAL_CURRENT_Msk;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <SysTick_Init+0x3c>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <SysTick_Init+0x3c>)
 800056c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000570:	6093      	str	r3, [r2, #8]
	//sets the SysTick control pin to use the clock source, the interrupt, and enables both of them.
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SysTick_Init+0x3c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a03      	ldr	r2, [pc, #12]	; (8000584 <SysTick_Init+0x3c>)
 8000578:	f043 0307 	orr.w	r3, r3, #7
 800057c:	6013      	str	r3, [r2, #0]
			| SysTick_CTRL_ENABLE_Msk);
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	e000e010 	.word	0xe000e010

08000588 <SysConfig_Enabler>:
 * 
 * @note This is a one line function to enable the SYSCFG register for the external
 *       interrupt.
 * 
 */
void SysConfig_Enabler() {
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SysConfig_Enabler+0x1c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <SysConfig_Enabler+0x1c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6193      	str	r3, [r2, #24]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <EXTI_Config>:
 * @note This function is created to setup the eternal interrupt line register. The
 *       line number that is being used for this system is line number 8 & 9, which
 *       are included in the third EXTICR group regirter line.
 * 
 */
void EXTI_Config() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	//reset the External interrupt's configurator register group per line number.
	SYSCFG->EXTICR[2] &= ~(SYSCFG_EXTICR3_EXTI8 | SYSCFG_EXTICR3_EXTI9);
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <EXTI_Config+0x5c>)
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <EXTI_Config+0x5c>)
 80005b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005b6:	6113      	str	r3, [r2, #16]
	//set the necessary EXTICR line using the GPIO port name as position.
	SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA | SYSCFG_EXTICR3_EXTI9_PA);
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <EXTI_Config+0x5c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <EXTI_Config+0x5c>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	6113      	str	r3, [r2, #16]

	//reset the trigger.
	EXTI->FTSR &= ~(EXTI_FTSR_TR8 | EXTI_FTSR_TR9);
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <EXTI_Config+0x60>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <EXTI_Config+0x60>)
 80005c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005ca:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(EXTI_RTSR_TR8 | EXTI_RTSR_TR9);
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <EXTI_Config+0x60>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <EXTI_Config+0x60>)
 80005d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005d6:	6093      	str	r3, [r2, #8]

	//set the rising trigger.
	EXTI->RTSR |= (EXTI_RTSR_TR8 | EXTI_RTSR_TR9);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <EXTI_Config+0x60>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <EXTI_Config+0x60>)
 80005de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80005e2:	6093      	str	r3, [r2, #8]

	//mask the EXTI line.
	EXTI->IMR |= (EXTI_IMR_MR8 | EXTI_IMR_MR9);
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <EXTI_Config+0x60>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <EXTI_Config+0x60>)
 80005ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80005ee:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 80005f0:	2100      	movs	r1, #0
 80005f2:	2017      	movs	r0, #23
 80005f4:	f7ff fe0c 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005f8:	2017      	movs	r0, #23
 80005fa:	f7ff fdeb 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010000 	.word	0x40010000
 8000608:	40010400 	.word	0x40010400

0800060c <SysTick_Handler>:
 * @brief SysTick Handler function.
 * 
 * @note This function is created to handle the interrupt tick from the SysTick.
 * 
 */
void SysTick_Handler(void) {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	millis_counter++;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <SysTick_Handler+0x18>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a03      	ldr	r2, [pc, #12]	; (8000624 <SysTick_Handler+0x18>)
 8000618:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000138 	.word	0x20000138

08000628 <millis>:
 * @note This one line function is created to get the volatile value of the SysTick
 *       interrupt.
 * 
 * @return uint32_t the millisecond value from the counter tick.
 */
uint32_t millis(void) {
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	return millis_counter;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <millis+0x14>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000138 	.word	0x20000138

08000640 <ResetAInterrupt>:
 * @brief Interrupt A timer reset.
 * 
 * @note reset the counter timer of the duration, rising, and falling trigger to 0.
 * 
 */
void ResetAInterrupt() {
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	interrupt_a_duration = 0;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <ResetAInterrupt+0x20>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
	btn_a_rising_start = 0;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <ResetAInterrupt+0x24>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
	btn_a_falling_start = 0;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ResetAInterrupt+0x28>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	2000013c 	.word	0x2000013c
 8000664:	20000144 	.word	0x20000144
 8000668:	20000148 	.word	0x20000148

0800066c <ResetBInterrupt>:
 * @brief Interrupt B timer reset.
 * 
 * @note reset the counter timer of the duration, rising, and falling trigger to 0.
 * 
 */
void ResetBInterrupt() {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	interrupt_b_duration = 0;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <ResetBInterrupt+0x20>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	btn_b_rising_start = 0;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <ResetBInterrupt+0x24>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	btn_b_falling_start = 0;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <ResetBInterrupt+0x28>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000140 	.word	0x20000140
 8000690:	2000014c 	.word	0x2000014c
 8000694:	20000150 	.word	0x20000150

08000698 <EXTI9_5_IRQHandler>:
 * @brief EXTI 5 to 9 Handler.
 *
 * @note This function is an interrupt handler for the EXTI line pin 5 until 9.
 *
 */
void EXTI9_5_IRQHandler(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	if ((EXTI->PR & EXTI_PR_PR8)) {
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d047      	beq.n	8000738 <EXTI9_5_IRQHandler+0xa0>
		if (ButtonPressed(GPIOA, GPIO_PIN_8) == SET) {
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 f93c 	bl	800092c <ButtonPressed>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d111      	bne.n	80006de <EXTI9_5_IRQHandler+0x46>
			btn_a_rising_start = millis();
 80006ba:	f7ff ffb5 	bl	8000628 <millis>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a46      	ldr	r2, [pc, #280]	; (80007dc <EXTI9_5_IRQHandler+0x144>)
 80006c2:	6013      	str	r3, [r2, #0]
			EXTI->RTSR &= ~EXTI_RTSR_TR8;
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ce:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= EXTI_FTSR_TR8;
 80006d0:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a40      	ldr	r2, [pc, #256]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006da:	60d3      	str	r3, [r2, #12]
 80006dc:	e026      	b.n	800072c <EXTI9_5_IRQHandler+0x94>
		} else {
			btn_a_falling_start = millis();
 80006de:	f7ff ffa3 	bl	8000628 <millis>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a3e      	ldr	r2, [pc, #248]	; (80007e0 <EXTI9_5_IRQHandler+0x148>)
 80006e6:	6013      	str	r3, [r2, #0]
			EXTI->FTSR &= ~EXTI_FTSR_TR8;
 80006e8:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006f2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= EXTI_RTSR_TR8;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a37      	ldr	r2, [pc, #220]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80006fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006fe:	6093      	str	r3, [r2, #8]

			if (btn_a_falling_start > btn_a_rising_start) {
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <EXTI9_5_IRQHandler+0x148>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <EXTI9_5_IRQHandler+0x144>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d907      	bls.n	800071c <EXTI9_5_IRQHandler+0x84>
				interrupt_a_duration = btn_a_falling_start - btn_a_rising_start;
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <EXTI9_5_IRQHandler+0x148>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <EXTI9_5_IRQHandler+0x144>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	4a33      	ldr	r2, [pc, #204]	; (80007e4 <EXTI9_5_IRQHandler+0x14c>)
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	e001      	b.n	8000720 <EXTI9_5_IRQHandler+0x88>
			} else {
				ResetAInterrupt();
 800071c:	f7ff ff90 	bl	8000640 <ResetAInterrupt>
			}

			if ((interrupt_a_duration) >= MIN_SHORT_DELAY) {
 8000720:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <EXTI9_5_IRQHandler+0x14c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b13      	cmp	r3, #19
 8000726:	d901      	bls.n	800072c <EXTI9_5_IRQHandler+0x94>
				Btn_A_Intrpt_Handler();
 8000728:	f000 f864 	bl	80007f4 <Btn_A_Intrpt_Handler>
			}
		}

		EXTI->PR |= EXTI_PR_PR8; //reset the pending register.
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000736:	6153      	str	r3, [r2, #20]
	}

	if ((EXTI->PR & EXTI_PR_PR9)) {
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000740:	2b00      	cmp	r3, #0
 8000742:	d047      	beq.n	80007d4 <EXTI9_5_IRQHandler+0x13c>
		if (ButtonPressed(GPIOA, GPIO_PIN_9) == SET) {
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 f8ee 	bl	800092c <ButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d111      	bne.n	800077a <EXTI9_5_IRQHandler+0xe2>
			btn_b_rising_start = millis();
 8000756:	f7ff ff67 	bl	8000628 <millis>
 800075a:	4603      	mov	r3, r0
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <EXTI9_5_IRQHandler+0x150>)
 800075e:	6013      	str	r3, [r2, #0]
			EXTI->RTSR &= ~EXTI_RTSR_TR9;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000766:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800076a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= EXTI_FTSR_TR9;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	60d3      	str	r3, [r2, #12]
 8000778:	e026      	b.n	80007c8 <EXTI9_5_IRQHandler+0x130>
		} else {
			btn_b_falling_start = millis();
 800077a:	f7ff ff55 	bl	8000628 <millis>
 800077e:	4603      	mov	r3, r0
 8000780:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <EXTI9_5_IRQHandler+0x154>)
 8000782:	6013      	str	r3, [r2, #0]
			EXTI->FTSR &= ~EXTI_FTSR_TR9;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 800078a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800078e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= EXTI_RTSR_TR9;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079a:	6093      	str	r3, [r2, #8]

			if (btn_b_falling_start > btn_b_rising_start) {
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <EXTI9_5_IRQHandler+0x154>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <EXTI9_5_IRQHandler+0x150>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d907      	bls.n	80007b8 <EXTI9_5_IRQHandler+0x120>
				interrupt_b_duration = btn_b_falling_start - btn_b_rising_start;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <EXTI9_5_IRQHandler+0x154>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <EXTI9_5_IRQHandler+0x150>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <EXTI9_5_IRQHandler+0x158>)
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	e001      	b.n	80007bc <EXTI9_5_IRQHandler+0x124>
			} else {
				ResetBInterrupt();
 80007b8:	f7ff ff58 	bl	800066c <ResetBInterrupt>
			}

			if ((interrupt_b_duration) >= MIN_SHORT_DELAY) {
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <EXTI9_5_IRQHandler+0x158>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b13      	cmp	r3, #19
 80007c2:	d901      	bls.n	80007c8 <EXTI9_5_IRQHandler+0x130>
				Btn_B_Intrpt_Handler();
 80007c4:	f000 f864 	bl	8000890 <Btn_B_Intrpt_Handler>
			}
		}

		EXTI->PR |= EXTI_PR_PR9; //reset the pending register.
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a02      	ldr	r2, [pc, #8]	; (80007d8 <EXTI9_5_IRQHandler+0x140>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	6153      	str	r3, [r2, #20]
	}
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40010400 	.word	0x40010400
 80007dc:	20000144 	.word	0x20000144
 80007e0:	20000148 	.word	0x20000148
 80007e4:	2000013c 	.word	0x2000013c
 80007e8:	2000014c 	.word	0x2000014c
 80007ec:	20000150 	.word	0x20000150
 80007f0:	20000140 	.word	0x20000140

080007f4 <Btn_A_Intrpt_Handler>:
 * @note This function reads the interrupt signal from the first button and switch the
 *       first LED state that was designed with an enum, based on the time length of the
 * 		 button's time length.
 * 
 */
void Btn_A_Intrpt_Handler(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	switch (led_a_state) {
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d02a      	beq.n	8000858 <Btn_A_Intrpt_Handler+0x64>
 8000802:	2b02      	cmp	r3, #2
 8000804:	dc3a      	bgt.n	800087c <Btn_A_Intrpt_Handler+0x88>
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <Btn_A_Intrpt_Handler+0x1c>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d012      	beq.n	8000834 <Btn_A_Intrpt_Handler+0x40>
 800080e:	e035      	b.n	800087c <Btn_A_Intrpt_Handler+0x88>
	case LED_OFF:
		if (interrupt_a_duration <= MAX_SHORT_DELAY) {
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <Btn_A_Intrpt_Handler+0x94>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000818:	d808      	bhi.n	800082c <Btn_A_Intrpt_Handler+0x38>
			SwitchLED(GPIOB, GPIO_PIN_1, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <Btn_A_Intrpt_Handler+0x98>)
 8000820:	f000 f8ad 	bl	800097e <SwitchLED>
			led_a_state = LED_ON_SHORT_PRESS;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_a_state = LED_OFF;
		}
		break;
 800082a:	e027      	b.n	800087c <Btn_A_Intrpt_Handler+0x88>
			led_a_state = LED_OFF;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		break;
 8000832:	e023      	b.n	800087c <Btn_A_Intrpt_Handler+0x88>
	case LED_ON_SHORT_PRESS:
		if (interrupt_a_duration > MAX_SHORT_DELAY) {
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <Btn_A_Intrpt_Handler+0x94>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800083c:	d908      	bls.n	8000850 <Btn_A_Intrpt_Handler+0x5c>
			SwitchLED(GPIOB, GPIO_PIN_1, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2102      	movs	r1, #2
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <Btn_A_Intrpt_Handler+0x98>)
 8000844:	f000 f89b 	bl	800097e <SwitchLED>
			led_a_state = LED_OFF_LONG_PRESS;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 800084a:	2202      	movs	r2, #2
 800084c:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_a_state = LED_ON_SHORT_PRESS;
		}
		break;
 800084e:	e015      	b.n	800087c <Btn_A_Intrpt_Handler+0x88>
			led_a_state = LED_ON_SHORT_PRESS;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e011      	b.n	800087c <Btn_A_Intrpt_Handler+0x88>
	case LED_OFF_LONG_PRESS:
		if (interrupt_a_duration <= MAX_SHORT_DELAY) {
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <Btn_A_Intrpt_Handler+0x94>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000860:	d808      	bhi.n	8000874 <Btn_A_Intrpt_Handler+0x80>
			SwitchLED(GPIOB, GPIO_PIN_1, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <Btn_A_Intrpt_Handler+0x98>)
 8000868:	f000 f889 	bl	800097e <SwitchLED>
			led_a_state = LED_ON_SHORT_PRESS;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_a_state = LED_OFF_LONG_PRESS;
		}
		break;
 8000872:	e002      	b.n	800087a <Btn_A_Intrpt_Handler+0x86>
			led_a_state = LED_OFF_LONG_PRESS;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <Btn_A_Intrpt_Handler+0x90>)
 8000876:	2202      	movs	r2, #2
 8000878:	701a      	strb	r2, [r3, #0]
		break;
 800087a:	bf00      	nop
	}
	ResetAInterrupt();
 800087c:	f7ff fee0 	bl	8000640 <ResetAInterrupt>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000154 	.word	0x20000154
 8000888:	2000013c 	.word	0x2000013c
 800088c:	48000400 	.word	0x48000400

08000890 <Btn_B_Intrpt_Handler>:
 * @note This function reads the interrupt signal from the second button and switch the
 *       second LED state that was designed with an enum, based on the time length of the
 * 		 button's time length.
 * 
 */
void Btn_B_Intrpt_Handler(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch (led_b_state) {
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d02a      	beq.n	80008f4 <Btn_B_Intrpt_Handler+0x64>
 800089e:	2b02      	cmp	r3, #2
 80008a0:	dc3a      	bgt.n	8000918 <Btn_B_Intrpt_Handler+0x88>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <Btn_B_Intrpt_Handler+0x1c>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d012      	beq.n	80008d0 <Btn_B_Intrpt_Handler+0x40>
 80008aa:	e035      	b.n	8000918 <Btn_B_Intrpt_Handler+0x88>
	case LED_OFF:
		if (interrupt_b_duration <= MAX_SHORT_DELAY) {
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <Btn_B_Intrpt_Handler+0x94>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008b4:	d808      	bhi.n	80008c8 <Btn_B_Intrpt_Handler+0x38>
			SwitchLED(GPIOB, GPIO_PIN_2, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2104      	movs	r1, #4
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <Btn_B_Intrpt_Handler+0x98>)
 80008bc:	f000 f85f 	bl	800097e <SwitchLED>
			led_b_state = LED_ON_SHORT_PRESS;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_b_state = LED_OFF;
		}
		break;
 80008c6:	e027      	b.n	8000918 <Btn_B_Intrpt_Handler+0x88>
			led_b_state = LED_OFF;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		break;
 80008ce:	e023      	b.n	8000918 <Btn_B_Intrpt_Handler+0x88>
	case LED_ON_SHORT_PRESS:
		if (interrupt_b_duration > MAX_SHORT_DELAY) {
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <Btn_B_Intrpt_Handler+0x94>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008d8:	d908      	bls.n	80008ec <Btn_B_Intrpt_Handler+0x5c>
			SwitchLED(GPIOB, GPIO_PIN_2, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <Btn_B_Intrpt_Handler+0x98>)
 80008e0:	f000 f84d 	bl	800097e <SwitchLED>
			led_b_state = LED_OFF_LONG_PRESS;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_b_state = LED_ON_SHORT_PRESS;
		}
		break;
 80008ea:	e015      	b.n	8000918 <Btn_B_Intrpt_Handler+0x88>
			led_b_state = LED_ON_SHORT_PRESS;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e011      	b.n	8000918 <Btn_B_Intrpt_Handler+0x88>
	case LED_OFF_LONG_PRESS:
		if (interrupt_b_duration <= MAX_SHORT_DELAY) {
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <Btn_B_Intrpt_Handler+0x94>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008fc:	d808      	bhi.n	8000910 <Btn_B_Intrpt_Handler+0x80>
			SwitchLED(GPIOB, GPIO_PIN_2, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2104      	movs	r1, #4
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <Btn_B_Intrpt_Handler+0x98>)
 8000904:	f000 f83b 	bl	800097e <SwitchLED>
			led_b_state = LED_ON_SHORT_PRESS;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
		} else {
			//do not change state.
			led_b_state = LED_OFF_LONG_PRESS;
		}
		break;
 800090e:	e002      	b.n	8000916 <Btn_B_Intrpt_Handler+0x86>
			led_b_state = LED_OFF_LONG_PRESS;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Btn_B_Intrpt_Handler+0x90>)
 8000912:	2202      	movs	r2, #2
 8000914:	701a      	strb	r2, [r3, #0]
		break;
 8000916:	bf00      	nop
	}
	ResetBInterrupt();
 8000918:	f7ff fea8 	bl	800066c <ResetBInterrupt>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000155 	.word	0x20000155
 8000924:	20000140 	.word	0x20000140
 8000928:	48000400 	.word	0x48000400

0800092c <ButtonPressed>:
 *
 * @param  PORT is the GPIO peripheral for STM32F3 family (between A to F).
 * @param  PIN_POS specifies the port bit to be written.
 * @retval uint16_t 0 (pressed) or 1 (released).
 */
uint16_t ButtonPressed(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
	uint16_t bitState = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	81fb      	strh	r3, [r7, #14]
	if ((PORT->IDR & PIN_POS) != (uint32_t) RESET) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	691a      	ldr	r2, [r3, #16]
 8000940:	887b      	ldrh	r3, [r7, #2]
 8000942:	4013      	ands	r3, r2
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <ButtonPressed+0x22>
		bitState = SET;
 8000948:	2301      	movs	r3, #1
 800094a:	81fb      	strh	r3, [r7, #14]
 800094c:	e001      	b.n	8000952 <ButtonPressed+0x26>
	} else {
		bitState = RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	81fb      	strh	r3, [r7, #14]
	}
	return bitState;
 8000952:	89fb      	ldrh	r3, [r7, #14]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <ResetLED>:
 * @note This function is witten to reset the chosen LED pin on a chosen port. 
 * 
 * @param PORT The GPIO port address of the LED.
 * @param PIN_POS The pin number of the LED.
 */
void ResetLED(GPIO_TypeDef *PORT, uint16_t PIN_POS) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
	PORT->BRR = (uint32_t) PIN_POS;
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SwitchLED>:
 * 
 * @param PORT The GPIO port address of the LED.
 * @param PIN_POS The pin number of the LED.
 * @param PIN_STATE The desired state for the LED.
 */
void SwitchLED(GPIO_TypeDef *PORT, uint16_t PIN_POS, uint8_t PIN_STATE) {
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	807b      	strh	r3, [r7, #2]
 800098a:	4613      	mov	r3, r2
 800098c:	707b      	strb	r3, [r7, #1]
	if (PIN_STATE != RESET) {
 800098e:	787b      	ldrb	r3, [r7, #1]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d003      	beq.n	800099c <SwitchLED+0x1e>
		PORT->BSRR = (uint32_t) PIN_POS;
 8000994:	887a      	ldrh	r2, [r7, #2]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	619a      	str	r2, [r3, #24]
	} else {
		PORT->BRR = (uint32_t) PIN_POS;
	}
}
 800099a:	e002      	b.n	80009a2 <SwitchLED+0x24>
		PORT->BRR = (uint32_t) PIN_POS;
 800099c:	887a      	ldrh	r2, [r7, #2]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b2:	b672      	cpsid	i
}
 80009b4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b6:	e7fe      	b.n	80009b6 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <HAL_UART_MspInit+0xf8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d130      	bne.n	8000a84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a35      	ldr	r2, [pc, #212]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a2f      	ldr	r2, [pc, #188]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a52:	2330      	movs	r3, #48	; 0x30
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a62:	2307      	movs	r3, #7
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4824      	ldr	r0, [pc, #144]	; (8000b00 <HAL_UART_MspInit+0x100>)
 8000a6e:	f000 fa9b 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2025      	movs	r0, #37	; 0x25
 8000a78:	f000 f9e9 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a7c:	2025      	movs	r0, #37	; 0x25
 8000a7e:	f000 fa02 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a82:	e035      	b.n	8000af0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <HAL_UART_MspInit+0x104>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_UART_MspInit+0xfc>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <HAL_UART_MspInit+0x108>)
 8000adc:	f000 fa64 	bl	8000fa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2027      	movs	r0, #39	; 0x27
 8000ae6:	f000 f9b2 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aea:	2027      	movs	r0, #39	; 0x27
 8000aec:	f000 f9cb 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800
 8000b04:	40004800 	.word	0x40004800
 8000b08:	48000400 	.word	0x48000400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART1_IRQHandler+0x10>)
 8000b5a:	f002 f8a5 	bl	8002ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000028 	.word	0x20000028

08000b68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <USART3_IRQHandler+0x10>)
 8000b6e:	f002 f89b 	bl	8002ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000b0 	.word	0x200000b0

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 ffad 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fb47 	bl	8000264 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be4:	08003bcc 	.word	0x08003bcc
  ldr r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bec:	2000015c 	.word	0x2000015c

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f917 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fed2 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f92f 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f8f7 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000158 	.word	0x20000158

08000c98 <__NVIC_SetPriorityGrouping>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e027      	b.n	8000f9e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    } 
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e160      	b.n	800127a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8152 	beq.w	8001274 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x40>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	f003 0201 	and.w	r2, r3, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80ac 	beq.w	8001274 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a59      	ldr	r2, [pc, #356]	; (800129c <HAL_GPIO_Init+0x2f4>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115e:	d025      	beq.n	80011ac <HAL_GPIO_Init+0x204>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x2f8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d01f      	beq.n	80011a8 <HAL_GPIO_Init+0x200>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d019      	beq.n	80011a4 <HAL_GPIO_Init+0x1fc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x300>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d013      	beq.n	80011a0 <HAL_GPIO_Init+0x1f8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x304>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00d      	beq.n	800119c <HAL_GPIO_Init+0x1f4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_GPIO_Init+0x308>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_GPIO_Init+0x1ec>
 8001190:	2306      	movs	r3, #6
 8001192:	e00c      	b.n	80011ae <HAL_GPIO_Init+0x206>
 8001194:	2307      	movs	r3, #7
 8001196:	e00a      	b.n	80011ae <HAL_GPIO_Init+0x206>
 8001198:	2305      	movs	r3, #5
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0x206>
 800119c:	2304      	movs	r3, #4
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x206>
 80011ac:	2300      	movs	r3, #0
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011be:	4937      	ldr	r1, [pc, #220]	; (800129c <HAL_GPIO_Init+0x2f4>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_GPIO_Init+0x310>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f0:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <HAL_GPIO_Init+0x310>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_GPIO_Init+0x310>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_GPIO_Init+0x310>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_GPIO_Init+0x310>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_GPIO_Init+0x310>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_GPIO_Init+0x310>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_GPIO_Init+0x310>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	f47f ae97 	bne.w	8000fb8 <HAL_GPIO_Init+0x10>
  }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	48001000 	.word	0x48001000
 80012b0:	48001400 	.word	0x48001400
 80012b4:	48001800 	.word	0x48001800
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f001 b83a 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 816f 	beq.w	80015d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f8:	4bb5      	ldr	r3, [pc, #724]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001304:	4bb2      	ldr	r3, [pc, #712]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d15c      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 8001310:	4baf      	ldr	r3, [pc, #700]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d155      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001332:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x94>
 800134a:	4ba1      	ldr	r3, [pc, #644]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e015      	b.n	800137c <HAL_RCC_OscConfig+0xc0>
 8001350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001354:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001368:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800136c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001378:	4b95      	ldr	r3, [pc, #596]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001380:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001384:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001388:	fa92 f2a2 	rbit	r2, r2
 800138c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001390:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001394:	fab2 f282 	clz	r2, r2
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f002 021f 	and.w	r2, r2, #31
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8111 	beq.w	80015d4 <HAL_RCC_OscConfig+0x318>
 80013b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8108 	bne.w	80015d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bfc6 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x12e>
 80013dc:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7b      	ldr	r2, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e036      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 80013ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x158>
 80013fa:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a74      	ldr	r2, [pc, #464]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e021      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001418:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x184>
 8001426:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001440:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a62      	ldr	r2, [pc, #392]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d059      	beq.n	800151c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc0a 	bl	8000c80 <HAL_GetTick>
 800146c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fc05 	bl	8000c80 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d902      	bls.n	8001488 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	f000 bf67 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800149c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_OscConfig+0x1fe>
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80014ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80014fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ab      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b6>
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fbb0 	bl	8000c80 <HAL_GetTick>
 8001520:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001526:	f7ff fbab 	bl	8000c80 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d902      	bls.n	800153c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	f000 bf0d 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800153c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001540:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001550:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x2b2>
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x2de>
 800156e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001572:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001586:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800158a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015a6:	fa92 f2a2 	rbit	r2, r2
 80015aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80015ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	f042 0220 	orr.w	r2, r2, #32
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f002 021f 	and.w	r2, r2, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ab      	bne.n	8001526 <HAL_RCC_OscConfig+0x26a>
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 817f 	beq.w	80018ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ec:	4ba7      	ldr	r3, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015f8:	4ba4      	ldr	r3, [pc, #656]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d173      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001604:	4ba1      	ldr	r3, [pc, #644]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800160c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001610:	d16c      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001624:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x386>
 800163c:	4b93      	ldr	r3, [pc, #588]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0x3ae>
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800165a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001666:	4b89      	ldr	r3, [pc, #548]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001670:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800167c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
 800169c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d002      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f000 be52 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	21f8      	movs	r1, #248	; 0xf8
 80016c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80016d0:	fa91 f1a1 	rbit	r1, r1
 80016d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80016d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016dc:	fab1 f181 	clz	r1, r1
 80016e0:	b2c9      	uxtb	r1, r1
 80016e2:	408b      	lsls	r3, r1
 80016e4:	4969      	ldr	r1, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e0fe      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8088 	beq.w	800180e <HAL_RCC_OscConfig+0x552>
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001710:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff faa9 	bl	8000c80 <HAL_GetTick>
 800172e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff faa4 	bl	8000c80 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d902      	bls.n	800174a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	f000 be06 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800175c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x4be>
 8001774:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001792:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	2202      	movs	r2, #2
 80017a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017ac:	fa92 f2a2 	rbit	r2, r2
 80017b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80017b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017b8:	fab2 f282 	clz	r2, r2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f042 0220 	orr.w	r2, r2, #32
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0af      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	21f8      	movs	r1, #248	; 0xf8
 80017ea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80017f2:	fa91 f1a1 	rbit	r1, r1
 80017f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80017fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017fe:	fab1 f181 	clz	r1, r1
 8001802:	b2c9      	uxtb	r1, r1
 8001804:	408b      	lsls	r3, r1
 8001806:	4921      	ldr	r1, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e06d      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001820:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800182e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	2300      	movs	r3, #0
 8001838:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa21 	bl	8000c80 <HAL_GetTick>
 800183e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fa1c 	bl	8000c80 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d902      	bls.n	800185a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	f000 bd7e 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5d4>
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e016      	b.n	80018b8 <HAL_RCC_OscConfig+0x5fc>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018b4:	4bbf      	ldr	r3, [pc, #764]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2202      	movs	r2, #2
 80018ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018c2:	fa92 f2a2 	rbit	r2, r2
 80018c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f002 021f 	and.w	r2, r2, #31
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ac      	bne.n	8001844 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8113 	beq.w	8001b26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d07c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x74e>
 8001910:	2301      	movs	r3, #1
 8001912:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001922:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4ba2      	ldr	r3, [pc, #648]	; (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f9a1 	bl	8000c80 <HAL_GetTick>
 800193e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff f99c 	bl	8000c80 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d902      	bls.n	800195a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	f000 bcfe 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b7e      	ldr	r3, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80019bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019c6:	2102      	movs	r1, #2
 80019c8:	6019      	str	r1, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f1a3 	rbit	r1, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019e0:	6019      	str	r1, [r3, #0]
  return result;
 80019e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d09d      	beq.n	8001944 <HAL_RCC_OscConfig+0x688>
 8001a08:	e08d      	b.n	8001b26 <HAL_RCC_OscConfig+0x86a>
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	461a      	mov	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f918 	bl	8000c80 <HAL_GetTick>
 8001a50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f913 	bl	8000c80 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d902      	bls.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f000 bc75 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	6019      	str	r1, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f1a3 	rbit	r1, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001afe:	6019      	str	r1, [r3, #0]
  return result;
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d197      	bne.n	8001a56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 81a5 	beq.w	8001e86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d121      	bne.n	8001bcc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7ff f874 	bl	8000c80 <HAL_GetTick>
 8001b98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e010      	b.n	8001bc0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff f86f 	bl	8000c80 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d908      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e3d1      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	10908120 	.word	0x10908120
 8001bbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <HAL_RCC_OscConfig+0xb3c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e8      	beq.n	8001b9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x92e>
 8001bdc:	4b87      	ldr	r3, [pc, #540]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a86      	ldr	r2, [pc, #536]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e035      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x958>
 8001bfa:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a7f      	ldr	r2, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e020      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x982>
 8001c24:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a74      	ldr	r2, [pc, #464]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a71      	ldr	r2, [pc, #452]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a6b      	ldr	r2, [pc, #428]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8081 	beq.w	8001d6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff f80a 	bl	8000c80 <HAL_GetTick>
 8001c6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff f805 	bl	8000c80 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e365      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cd0:	601a      	str	r2, [r3, #0]
  return result;
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xa3a>
 8001cf0:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0xa62>
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d26:	2102      	movs	r1, #2
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d46:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d084      	beq.n	8001c72 <HAL_RCC_OscConfig+0x9b6>
 8001d68:	e083      	b.n	8001e72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ff89 	bl	8000c80 <HAL_GetTick>
 8001d6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe ff84 	bl	8000c80 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2e4      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001dd2:	601a      	str	r2, [r3, #0]
  return result;
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ddc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0xb44>
 8001df2:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	e017      	b.n	8001e28 <HAL_RCC_OscConfig+0xb6c>
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e08:	2202      	movs	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4bb3      	ldr	r3, [pc, #716]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e30:	2102      	movs	r1, #2
 8001e32:	6011      	str	r1, [r2, #0]
 8001e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	fa92 f1a2 	rbit	r1, r2
 8001e42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e46:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e4a:	6011      	str	r1, [r2, #0]
  return result;
 8001e4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e50:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d180      	bne.n	8001d74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b9e      	ldr	r3, [pc, #632]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a9d      	ldr	r2, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 825e 	beq.w	8002354 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b96      	ldr	r3, [pc, #600]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f000 821f 	beq.w	80022e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 8170 	bne.w	8002198 <HAL_RCC_OscConfig+0xedc>
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ee6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2300      	movs	r3, #0
 8001efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe febf 	bl	8000c80 <HAL_GetTick>
 8001f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe feba 	bl	8000c80 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e21c      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f40:	601a      	str	r2, [r3, #0]
  return result;
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0xcaa>
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcfa>
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	fa92 f1a2 	rbit	r1, r2
 8001fd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fda:	6011      	str	r1, [r2, #0]
  return result;
 8001fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d182      	bne.n	8001f08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	4937      	ldr	r1, [pc, #220]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002018:	4313      	orrs	r3, r2
 800201a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	430b      	orrs	r3, r1
 800203e:	492d      	ldr	r1, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800204c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002072:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fdf9 	bl	8000c80 <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fdf4 	bl	8000c80 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e156      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe3c>
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <HAL_RCC_OscConfig+0xe38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e02a      	b.n	8002148 <HAL_RCC_OscConfig+0xe8c>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b86      	ldr	r3, [pc, #536]	; (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002150:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fa92 f1a2 	rbit	r1, r2
 8002164:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002168:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800216c:	6011      	str	r1, [r2, #0]
  return result;
 800216e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002172:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f43f af7f 	beq.w	8002094 <HAL_RCC_OscConfig+0xdd8>
 8002196:	e0dd      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2300      	movs	r3, #0
 80021dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fd4f 	bl	8000c80 <HAL_GetTick>
 80021e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fd4a 	bl	8000c80 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ac      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002220:	601a      	str	r2, [r3, #0]
  return result;
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800222a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0xf8a>
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e027      	b.n	8002296 <HAL_RCC_OscConfig+0xfda>
 8002246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800224e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800229a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800229e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a2:	6011      	str	r1, [r2, #0]
 80022a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fa92 f1a2 	rbit	r1, r2
 80022b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022ba:	6011      	str	r1, [r2, #0]
  return result;
 80022bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d182      	bne.n	80021e8 <HAL_RCC_OscConfig+0xf2c>
 80022e2:	e037      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02e      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_OscConfig+0x10a4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002308:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800230c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002314:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d117      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002324:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002334:	429a      	cmp	r2, r3
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09e      	sub	sp, #120	; 0x78
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e162      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	498b      	ldr	r1, [pc, #556]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e14a      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	497f      	ldr	r1, [pc, #508]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80dc 	beq.w	8002590 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d13c      	bne.n	800245a <HAL_RCC_ClockConfig+0xf6>
 80023e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_ClockConfig+0xa6>
 8002404:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e00f      	b.n	800242a <HAL_RCC_ClockConfig+0xc6>
 800240a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	667b      	str	r3, [r7, #100]	; 0x64
 8002418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241c:	663b      	str	r3, [r7, #96]	; 0x60
 800241e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002432:	fa92 f2a2 	rbit	r2, r2
 8002436:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17b      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0f3      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d13c      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
 8002462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_ClockConfig+0x128>
 8002486:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e00f      	b.n	80024ac <HAL_RCC_ClockConfig+0x148>
 800248c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13a      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b2      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e00d      	b.n	8002520 <HAL_RCC_ClockConfig+0x1bc>
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2202      	movs	r2, #2
 8002522:	61ba      	str	r2, [r7, #24]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	617a      	str	r2, [r7, #20]
  return result;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e079      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	491a      	ldr	r1, [pc, #104]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fb8e 	bl	8000c80 <HAL_GetTick>
 8002564:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fb8a 	bl	8000c80 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e061      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d214      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4906      	ldr	r1, [pc, #24]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e040      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	491a      	ldr	r1, [pc, #104]	; (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4912      	ldr	r1, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x2e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002606:	f000 f829 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_RCC_ClockConfig+0x2e8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	22f0      	movs	r2, #240	; 0xf0
 8002616:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	60fa      	str	r2, [r7, #12]
  return result;
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	fab2 f282 	clz	r2, r2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	40d3      	lsrs	r3, r2
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x2ec>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCC_ClockConfig+0x2f0>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_RCC_ClockConfig+0x2f4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe faf0 	bl	8000c20 <HAL_InitTick>
  
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3778      	adds	r7, #120	; 0x78
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	08003b8c 	.word	0x08003b8c
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	; 0x2c
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x36>
 800268a:	e03f      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc8>)
 800268e:	623b      	str	r3, [r7, #32]
      break;
 8002690:	e03f      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002698:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800269c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	fa92 f2a2 	rbit	r2, r2
 80026a4:	607a      	str	r2, [r7, #4]
  return result;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	40d3      	lsrs	r3, r2
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	220f      	movs	r2, #15
 80026c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	60fa      	str	r2, [r7, #12]
  return result;
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	40d3      	lsrs	r3, r2
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_RCC_GetSysClockFreq+0xd0>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e007      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	623b      	str	r3, [r7, #32]
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc8>)
 800270e:	623b      	str	r3, [r7, #32]
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	6a3b      	ldr	r3, [r7, #32]
}
 8002714:	4618      	mov	r0, r3
 8002716:	372c      	adds	r7, #44	; 0x2c
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	08003ba4 	.word	0x08003ba4
 800272c:	08003bb4 	.word	0x08003bb4

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800274e:	f7ff ffef 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002752:	4601      	mov	r1, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800275c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002760:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	fa92 f2a2 	rbit	r2, r2
 8002768:	603a      	str	r2, [r7, #0]
  return result;
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	40d3      	lsrs	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	08003b9c 	.word	0x08003b9c

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002792:	f7ff ffcd 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	603a      	str	r2, [r7, #0]
  return result;
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003b9c 	.word	0x08003b9c

080027d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b092      	sub	sp, #72	; 0x48
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80d4 	beq.w	800299c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10e      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b48      	ldr	r3, [pc, #288]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b42      	ldr	r3, [pc, #264]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a41      	ldr	r2, [pc, #260]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe fa23 	bl	8000c80 <HAL_GetTick>
 800283a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fa1f 	bl	8000c80 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1d6      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8084 	beq.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002878:	429a      	cmp	r2, r3
 800287a:	d07c      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	2300      	movs	r3, #0
 80028cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04b      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f9cf 	bl	8000c80 <HAL_GetTick>
 80028e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe f9cb 	bl	8000c80 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e180      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028fc:	2302      	movs	r3, #2
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	2302      	movs	r3, #2
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	61fb      	str	r3, [r7, #28]
  return result;
 8002914:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d108      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800292a:	4b01      	ldr	r3, [pc, #4]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	e00d      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
 8002938:	10908100 	.word	0x10908100
 800293c:	2302      	movs	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2202      	movs	r2, #2
 800294e:	613a      	str	r2, [r7, #16]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	60fa      	str	r2, [r7, #12]
  return result;
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	fab2 f282 	clz	r2, r2
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f002 021f 	and.w	r2, r2, #31
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0b7      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002976:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	498c      	ldr	r1, [pc, #560]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a8:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f023 0203 	bic.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	497f      	ldr	r1, [pc, #508]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c6:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4978      	ldr	r1, [pc, #480]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e4:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	4970      	ldr	r1, [pc, #448]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a02:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 0210 	bic.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4969      	ldr	r1, [pc, #420]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a20:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	4961      	ldr	r1, [pc, #388]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f023 0220 	bic.w	r2, r3, #32
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	495a      	ldr	r1, [pc, #360]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	494b      	ldr	r1, [pc, #300]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4943      	ldr	r1, [pc, #268]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	493c      	ldr	r1, [pc, #240]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	4934      	ldr	r1, [pc, #208]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	492d      	ldr	r1, [pc, #180]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	4925      	ldr	r1, [pc, #148]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	491e      	ldr	r1, [pc, #120]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	490f      	ldr	r1, [pc, #60]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ba6:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	e002      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	4913      	ldr	r1, [pc, #76]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	490b      	ldr	r1, [pc, #44]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3748      	adds	r7, #72	; 0x48
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e040      	b.n	8002ca0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fee6 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fb32 	bl	80032b4 <UART_SetConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e022      	b.n	8002ca0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fcfa 	bl	800365c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fd81 	bl	80037a0 <UART_CheckIdleState>
 8002c9e:	4603      	mov	r3, r0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0ba      	sub	sp, #232	; 0xe8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00f      	beq.n	8002d10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 82ab 	beq.w	800325c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
      }
      return;
 8002d0e:	e2a5      	b.n	800325c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8117 	beq.w	8002f48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d2a:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <HAL_UART_IRQHandler+0x298>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 810a 	beq.w	8002f48 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <HAL_UART_IRQHandler+0xbc>
 8002d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_UART_IRQHandler+0xec>
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d011      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x11c>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2204      	movs	r2, #4
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dba:	f043 0202 	orr.w	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2208      	movs	r2, #8
 8002dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df6:	f043 0208 	orr.w	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <HAL_UART_IRQHandler+0x18a>
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8211 	beq.w	8003260 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d005      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04f      	beq.n	8002f2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fd97 	bl	80039be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d141      	bne.n	8002f22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1d9      	bne.n	8002e9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <HAL_UART_IRQHandler+0x29c>)
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f814 	bl	8000f2c <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d017      	beq.n	8002f3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00f      	b.n	8002f3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f9b4 	bl	8003288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00b      	b.n	8002f3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9b0 	bl	8003288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e007      	b.n	8002f3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f9ac 	bl	8003288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f38:	e192      	b.n	8003260 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3a:	bf00      	nop
    return;
 8002f3c:	e190      	b.n	8003260 <HAL_UART_IRQHandler+0x5b8>
 8002f3e:	bf00      	nop
 8002f40:	04000120 	.word	0x04000120
 8002f44:	08003a87 	.word	0x08003a87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 814b 	bne.w	80031e8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8144 	beq.w	80031e8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 813d 	beq.w	80031e8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2210      	movs	r2, #16
 8002f74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	f040 80b5 	bne.w	80030f0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8164 	beq.w	8003264 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f080 815c 	bcs.w	8003264 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	f000 8086 	beq.w	80030ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ff0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ff8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1da      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3308      	adds	r3, #8
 8003012:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800301c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003030:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003034:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003038:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e1      	bne.n	800300c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3308      	adds	r3, #8
 800304e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3308      	adds	r3, #8
 8003068:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800306c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800306e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003072:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800307a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e3      	bne.n	8003048 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800309c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e4      	bne.n	800308e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fef6 	bl	8000eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8d7 	bl	800329c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030ee:	e0b9      	b.n	8003264 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80ab 	beq.w	8003268 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a6 	beq.w	8003268 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
 8003140:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e4      	bne.n	800311c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3308      	adds	r3, #8
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	623b      	str	r3, [r7, #32]
   return(result);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3308      	adds	r3, #8
 8003172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003176:	633a      	str	r2, [r7, #48]	; 0x30
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800317c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0310 	bic.w	r3, r3, #16
 80031b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	617b      	str	r3, [r7, #20]
   return(result);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e4      	bne.n	800319e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f85b 	bl	800329c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031e6:	e03f      	b.n	8003268 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <HAL_UART_IRQHandler+0x56a>
 80031f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fc7b 	bl	8003b06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003210:	e02d      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00e      	beq.n	800323c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800321e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01c      	beq.n	800326c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
    }
    return;
 800323a:	e017      	b.n	800326c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800323c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_UART_IRQHandler+0x5c6>
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fc2c 	bl	8003ab2 <UART_EndTransmit_IT>
    return;
 800325a:	e008      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
      return;
 800325c:	bf00      	nop
 800325e:	e006      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003260:	bf00      	nop
 8003262:	e004      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_UART_IRQHandler+0x5c6>
    return;
 800326c:	bf00      	nop
  }

}
 800326e:	37e8      	adds	r7, #232	; 0xe8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b92      	ldr	r3, [pc, #584]	; (8003528 <UART_SetConfig+0x274>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	6979      	ldr	r1, [r7, #20]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <UART_SetConfig+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d120      	bne.n	8003372 <UART_SetConfig+0xbe>
 8003330:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <UART_SetConfig+0x27c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d817      	bhi.n	800336c <UART_SetConfig+0xb8>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x90>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003355 	.word	0x08003355
 8003348:	08003361 	.word	0x08003361
 800334c:	08003367 	.word	0x08003367
 8003350:	0800335b 	.word	0x0800335b
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0b5      	b.n	80034c6 <UART_SetConfig+0x212>
 800335a:	2302      	movs	r3, #2
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0b2      	b.n	80034c6 <UART_SetConfig+0x212>
 8003360:	2304      	movs	r3, #4
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0af      	b.n	80034c6 <UART_SetConfig+0x212>
 8003366:	2308      	movs	r3, #8
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e0ac      	b.n	80034c6 <UART_SetConfig+0x212>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e0a9      	b.n	80034c6 <UART_SetConfig+0x212>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6f      	ldr	r2, [pc, #444]	; (8003534 <UART_SetConfig+0x280>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d124      	bne.n	80033c6 <UART_SetConfig+0x112>
 800337c:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <UART_SetConfig+0x27c>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003384:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003388:	d011      	beq.n	80033ae <UART_SetConfig+0xfa>
 800338a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800338e:	d817      	bhi.n	80033c0 <UART_SetConfig+0x10c>
 8003390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003394:	d011      	beq.n	80033ba <UART_SetConfig+0x106>
 8003396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339a:	d811      	bhi.n	80033c0 <UART_SetConfig+0x10c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <UART_SetConfig+0xf4>
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d006      	beq.n	80033b4 <UART_SetConfig+0x100>
 80033a6:	e00b      	b.n	80033c0 <UART_SetConfig+0x10c>
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e08b      	b.n	80034c6 <UART_SetConfig+0x212>
 80033ae:	2302      	movs	r3, #2
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e088      	b.n	80034c6 <UART_SetConfig+0x212>
 80033b4:	2304      	movs	r3, #4
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e085      	b.n	80034c6 <UART_SetConfig+0x212>
 80033ba:	2308      	movs	r3, #8
 80033bc:	77fb      	strb	r3, [r7, #31]
 80033be:	e082      	b.n	80034c6 <UART_SetConfig+0x212>
 80033c0:	2310      	movs	r3, #16
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e07f      	b.n	80034c6 <UART_SetConfig+0x212>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5b      	ldr	r2, [pc, #364]	; (8003538 <UART_SetConfig+0x284>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d124      	bne.n	800341a <UART_SetConfig+0x166>
 80033d0:	4b57      	ldr	r3, [pc, #348]	; (8003530 <UART_SetConfig+0x27c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033dc:	d011      	beq.n	8003402 <UART_SetConfig+0x14e>
 80033de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033e2:	d817      	bhi.n	8003414 <UART_SetConfig+0x160>
 80033e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033e8:	d011      	beq.n	800340e <UART_SetConfig+0x15a>
 80033ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ee:	d811      	bhi.n	8003414 <UART_SetConfig+0x160>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <UART_SetConfig+0x148>
 80033f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033f8:	d006      	beq.n	8003408 <UART_SetConfig+0x154>
 80033fa:	e00b      	b.n	8003414 <UART_SetConfig+0x160>
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e061      	b.n	80034c6 <UART_SetConfig+0x212>
 8003402:	2302      	movs	r3, #2
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e05e      	b.n	80034c6 <UART_SetConfig+0x212>
 8003408:	2304      	movs	r3, #4
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e05b      	b.n	80034c6 <UART_SetConfig+0x212>
 800340e:	2308      	movs	r3, #8
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e058      	b.n	80034c6 <UART_SetConfig+0x212>
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e055      	b.n	80034c6 <UART_SetConfig+0x212>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a47      	ldr	r2, [pc, #284]	; (800353c <UART_SetConfig+0x288>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d124      	bne.n	800346e <UART_SetConfig+0x1ba>
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <UART_SetConfig+0x27c>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800342c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003430:	d011      	beq.n	8003456 <UART_SetConfig+0x1a2>
 8003432:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003436:	d817      	bhi.n	8003468 <UART_SetConfig+0x1b4>
 8003438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343c:	d011      	beq.n	8003462 <UART_SetConfig+0x1ae>
 800343e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003442:	d811      	bhi.n	8003468 <UART_SetConfig+0x1b4>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <UART_SetConfig+0x19c>
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344c:	d006      	beq.n	800345c <UART_SetConfig+0x1a8>
 800344e:	e00b      	b.n	8003468 <UART_SetConfig+0x1b4>
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e037      	b.n	80034c6 <UART_SetConfig+0x212>
 8003456:	2302      	movs	r3, #2
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e034      	b.n	80034c6 <UART_SetConfig+0x212>
 800345c:	2304      	movs	r3, #4
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e031      	b.n	80034c6 <UART_SetConfig+0x212>
 8003462:	2308      	movs	r3, #8
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e02e      	b.n	80034c6 <UART_SetConfig+0x212>
 8003468:	2310      	movs	r3, #16
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e02b      	b.n	80034c6 <UART_SetConfig+0x212>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a33      	ldr	r2, [pc, #204]	; (8003540 <UART_SetConfig+0x28c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d124      	bne.n	80034c2 <UART_SetConfig+0x20e>
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <UART_SetConfig+0x27c>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003484:	d011      	beq.n	80034aa <UART_SetConfig+0x1f6>
 8003486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348a:	d817      	bhi.n	80034bc <UART_SetConfig+0x208>
 800348c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003490:	d011      	beq.n	80034b6 <UART_SetConfig+0x202>
 8003492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003496:	d811      	bhi.n	80034bc <UART_SetConfig+0x208>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x1f0>
 800349c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a0:	d006      	beq.n	80034b0 <UART_SetConfig+0x1fc>
 80034a2:	e00b      	b.n	80034bc <UART_SetConfig+0x208>
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e00d      	b.n	80034c6 <UART_SetConfig+0x212>
 80034aa:	2302      	movs	r3, #2
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e00a      	b.n	80034c6 <UART_SetConfig+0x212>
 80034b0:	2304      	movs	r3, #4
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e007      	b.n	80034c6 <UART_SetConfig+0x212>
 80034b6:	2308      	movs	r3, #8
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e004      	b.n	80034c6 <UART_SetConfig+0x212>
 80034bc:	2310      	movs	r3, #16
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e001      	b.n	80034c6 <UART_SetConfig+0x212>
 80034c2:	2310      	movs	r3, #16
 80034c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ce:	d16b      	bne.n	80035a8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d838      	bhi.n	8003548 <UART_SetConfig+0x294>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x228>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003549 	.word	0x08003549
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003549 	.word	0x08003549
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003549 	.word	0x08003549
 80034fc:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff f922 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8003504:	61b8      	str	r0, [r7, #24]
        break;
 8003506:	e024      	b.n	8003552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f940 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e020      	b.n	8003552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <UART_SetConfig+0x290>)
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e01d      	b.n	8003552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff f8a1 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800351a:	61b8      	str	r0, [r7, #24]
        break;
 800351c:	e019      	b.n	8003552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003522:	61bb      	str	r3, [r7, #24]
        break;
 8003524:	e015      	b.n	8003552 <UART_SetConfig+0x29e>
 8003526:	bf00      	nop
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40013800 	.word	0x40013800
 8003530:	40021000 	.word	0x40021000
 8003534:	40004400 	.word	0x40004400
 8003538:	40004800 	.word	0x40004800
 800353c:	40004c00 	.word	0x40004c00
 8003540:	40005000 	.word	0x40005000
 8003544:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77bb      	strb	r3, [r7, #30]
        break;
 8003550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d073      	beq.n	8003640 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	005a      	lsls	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	441a      	add	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b0f      	cmp	r3, #15
 8003572:	d916      	bls.n	80035a2 <UART_SetConfig+0x2ee>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d212      	bcs.n	80035a2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f023 030f 	bic.w	r3, r3, #15
 8003584:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	b29a      	uxth	r2, r3
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	4313      	orrs	r3, r2
 8003596:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	89fa      	ldrh	r2, [r7, #14]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	e04e      	b.n	8003640 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	77bb      	strb	r3, [r7, #30]
 80035a6:	e04b      	b.n	8003640 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d827      	bhi.n	80035fe <UART_SetConfig+0x34a>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x300>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff f8b6 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80035dc:	61b8      	str	r0, [r7, #24]
        break;
 80035de:	e013      	b.n	8003608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7ff f8d4 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 80035e4:	61b8      	str	r0, [r7, #24]
        break;
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <UART_SetConfig+0x3a4>)
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e00c      	b.n	8003608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7ff f835 	bl	800265c <HAL_RCC_GetSysClockFreq>
 80035f2:	61b8      	str	r0, [r7, #24]
        break;
 80035f4:	e008      	b.n	8003608 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e004      	b.n	8003608 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77bb      	strb	r3, [r7, #30]
        break;
 8003606:	bf00      	nop
    }

    if (pclk != 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d018      	beq.n	8003640 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	085a      	lsrs	r2, r3, #1
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	441a      	add	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d909      	bls.n	800363c <UART_SetConfig+0x388>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d205      	bcs.n	800363c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e001      	b.n	8003640 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800364c:	7fbb      	ldrb	r3, [r7, #30]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	007a1200 	.word	0x007a1200

0800365c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01a      	beq.n	8003772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d10a      	bne.n	8003772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b098      	sub	sp, #96	; 0x60
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b0:	f7fd fa66 	bl	8000c80 <HAL_GetTick>
 80037b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d12e      	bne.n	8003822 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f88c 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d021      	beq.n	8003822 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f2:	653b      	str	r3, [r7, #80]	; 0x50
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
 80037fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800380a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e6      	bne.n	80037de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e062      	b.n	80038e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d149      	bne.n	80038c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f856 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d03c      	beq.n	80038c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	623b      	str	r3, [r7, #32]
   return(result);
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
 800386a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800386e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60fb      	str	r3, [r7, #12]
   return(result);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389c:	61fa      	str	r2, [r7, #28]
 800389e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	617b      	str	r3, [r7, #20]
   return(result);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e011      	b.n	80038e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3758      	adds	r7, #88	; 0x58
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	e049      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d045      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd f9b9 	bl	8000c80 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <UART_WaitOnFlagUntilTimeout+0x30>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e048      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d031      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d110      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f838 	bl	80039be <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2208      	movs	r2, #8
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e029      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d111      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f81e 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0a6      	beq.n	8003902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b095      	sub	sp, #84	; 0x54
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
 80039e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d118      	bne.n	8003a66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0310 	bic.w	r3, r3, #16
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a7a:	bf00      	nop
 8003a7c:	3754      	adds	r7, #84	; 0x54
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fbef 	bl	8003288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e6      	bne.n	8003aba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fbbb 	bl	8003274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afe:	bf00      	nop
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <memset>:
 8003b1a:	4402      	add	r2, r0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d100      	bne.n	8003b24 <memset+0xa>
 8003b22:	4770      	bx	lr
 8003b24:	f803 1b01 	strb.w	r1, [r3], #1
 8003b28:	e7f9      	b.n	8003b1e <memset+0x4>
	...

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2600      	movs	r6, #0
 8003b38:	42a6      	cmp	r6, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4d0b      	ldr	r5, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 f818 	bl	8003b74 <_init>
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2600      	movs	r6, #0
 8003b4a:	42a6      	cmp	r6, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b54:	4798      	blx	r3
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5e:	4798      	blx	r3
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	08003bc4 	.word	0x08003bc4
 8003b68:	08003bc4 	.word	0x08003bc4
 8003b6c:	08003bc4 	.word	0x08003bc4
 8003b70:	08003bc8 	.word	0x08003bc8

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
