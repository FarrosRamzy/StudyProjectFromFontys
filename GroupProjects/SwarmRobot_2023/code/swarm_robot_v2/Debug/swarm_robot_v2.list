
swarm_robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  080095c0  080095c0  000195c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad4  08009ad4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009ad4  08009ad4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ad4  08009ad4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002b8  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c7c1  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000226d  00000000  00000000  0002ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000930  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006eb  00000000  00000000  0002f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021d6d  00000000  00000000  0002fca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ec44  00000000  00000000  00051a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2a24  00000000  00000000  00060654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003874  00000000  00000000  00123078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001268ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095a4 	.word	0x080095a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080095a4 	.word	0x080095a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <SystemClock_Config>:
// The desired delay duration in milliseconds
uint32_t stop_interval = 1000;
uint32_t loop_interval = 50;
uint32_t move_backward_interval = 2000;

void SystemClock_Config(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0a6      	sub	sp, #152	; 0x98
 8000d08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 f80f 	bl	8005d36 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2258      	movs	r2, #88	; 0x58
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f801 	bl	8005d36 <memset>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fb55 	bl	8002410 <HAL_RCC_OscConfig>

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000d7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fb99 	bl	80034b8 <HAL_RCC_ClockConfig>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fdc7 	bl	8003924 <HAL_RCCEx_PeriphCLKConfig>
}
 8000d96:	bf00      	nop
 8000d98:	3798      	adds	r7, #152	; 0x98
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <main>:

int main(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
	HAL_Init();
 8000da6:	f000 ffcf 	bl	8001d48 <HAL_Init>

	// fix timers config, fist the channel

	Timer2_Init();
 8000daa:	f000 fb41 	bl	8001430 <Timer2_Init>
	Timer3_Init();
 8000dae:	f000 fb95 	bl	80014dc <Timer3_Init>
	Timer4_Init();
 8000db2:	f000 fc09 	bl	80015c8 <Timer4_Init>

	EnableGPIOB();
 8000db6:	f000 fa5f 	bl	8001278 <EnableGPIOB>
	Ultrasonic_Trigger_Config();
 8000dba:	f000 faa7 	bl	800130c <Ultrasonic_Trigger_Config>
	Ultrasonic_Echo_Config();
 8000dbe:	f000 fadf 	bl	8001380 <Ultrasonic_Echo_Config>
	Servo_PWM_Config();
 8000dc2:	f000 fa69 	bl	8001298 <Servo_PWM_Config>

	SystemClock_Config();
 8000dc6:	f7ff ff9d 	bl	8000d04 <SystemClock_Config>
	configure_UART();
 8000dca:	f000 fe65 	bl	8001a98 <configure_UART>
	configure_extern_UART();
 8000dce:	f000 febd 	bl	8001b4c <configure_extern_UART>
	while (1) {

		uint32_t currentMillis = millis;
 8000dd2:	4b75      	ldr	r3, [pc, #468]	; (8000fa8 <main+0x208>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
		DistanceType distance = measure_distance();
 8000dd8:	f000 f8fa 	bl	8000fd0 <measure_distance>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	817b      	strh	r3, [r7, #10]
//		UART_send(distance);

// Measure distance regardless of the robot's state
		if (distance != DEFAULT_DISTANCE) {
 8000de0:	897b      	ldrh	r3, [r7, #10]
 8000de2:	2b0b      	cmp	r3, #11
 8000de4:	d002      	beq.n	8000dec <main+0x4c>
			filtered_distance = distance;
 8000de6:	4a71      	ldr	r2, [pc, #452]	; (8000fac <main+0x20c>)
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	8013      	strh	r3, [r2, #0]
		}

		if (currentMillis - robot_loop_millis >= loop_interval) {
 8000dec:	4b70      	ldr	r3, [pc, #448]	; (8000fb0 <main+0x210>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	1ad2      	subs	r2, r2, r3
 8000df4:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <main+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3ea      	bcc.n	8000dd2 <main+0x32>
			robot_loop_millis = currentMillis;
 8000dfc:	4a6c      	ldr	r2, [pc, #432]	; (8000fb0 <main+0x210>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6013      	str	r3, [r2, #0]
			switch (state) {
 8000e02:	4b6d      	ldr	r3, [pc, #436]	; (8000fb8 <main+0x218>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d8e2      	bhi.n	8000dd2 <main+0x32>
 8000e0c:	a201      	add	r2, pc, #4	; (adr r2, 8000e14 <main+0x74>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000e29 	.word	0x08000e29
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e8d 	.word	0x08000e8d
 8000e20:	08000ecb 	.word	0x08000ecb
 8000e24:	08000f1d 	.word	0x08000f1d
			case INIT:
				// Initialization code here
				state = MOVE;
 8000e28:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <main+0x218>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
				break;
 8000e2e:	e0b6      	b.n	8000f9e <main+0x1fe>

			case MOVE:
				// Call my_pid to control the servo based on distance
				double my_pid_output = my_pid(DANGER_DISTANCE,
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <main+0x20c>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb6d 	bl	8000514 <__aeabi_ui2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	ec43 2b11 	vmov	d1, r2, r3
 8000e42:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8000fa0 <main+0x200>
 8000e46:	f000 f91b 	bl	8001080 <my_pid>
 8000e4a:	ed87 0b00 	vstr	d0, [r7]
						filtered_distance);

				if (filtered_distance <= DANGER_DISTANCE) {
 8000e4e:	4b57      	ldr	r3, [pc, #348]	; (8000fac <main+0x20c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d809      	bhi.n	8000e6a <main+0xca>
					state_change_millis = currentMillis;
 8000e56:	4a59      	ldr	r2, [pc, #356]	; (8000fbc <main+0x21c>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6013      	str	r3, [r2, #0]
					state_sent = 0;
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <main+0x220>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
					state = STOP;
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <main+0x218>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
					if (state_sent == 0) {
						UART_send_direction_to_extern(0);
						state_sent = 1;
					}
				}
				break;
 8000e68:	e091      	b.n	8000f8e <main+0x1ee>
					move_forward(my_pid_output);
 8000e6a:	ed97 0b00 	vldr	d0, [r7]
 8000e6e:	f000 fbe3 	bl	8001638 <move_forward>
					if (state_sent == 0) {
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <main+0x220>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 8088 	bne.w	8000f8e <main+0x1ee>
						UART_send_direction_to_extern(0);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fee2 	bl	8001c48 <UART_send_direction_to_extern>
						state_sent = 1;
 8000e84:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <main+0x220>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
				break;
 8000e8a:	e080      	b.n	8000f8e <main+0x1ee>
			case STOP:
				stop();
 8000e8c:	f000 fc64 	bl	8001758 <stop>
				if (state_sent == 0) {
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <main+0x220>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <main+0x106>
					UART_send_direction_to_extern(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fed4 	bl	8001c48 <UART_send_direction_to_extern>
					state_sent = 1;
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <main+0x220>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
				}
				if (currentMillis - state_change_millis >= stop_interval) {
 8000ea6:	4b45      	ldr	r3, [pc, #276]	; (8000fbc <main+0x21c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <main+0x224>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d36d      	bcc.n	8000f92 <main+0x1f2>
					// Reset the timing variable
					state_change_millis = currentMillis;
 8000eb6:	4a41      	ldr	r2, [pc, #260]	; (8000fbc <main+0x21c>)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6013      	str	r3, [r2, #0]
					state_sent = 0;
 8000ebc:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <main+0x220>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
					state = MOVE_BACKWARD;
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <main+0x218>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ec8:	e063      	b.n	8000f92 <main+0x1f2>
			case MOVE_BACKWARD:
				move_backward();
 8000eca:	f000 fbeb 	bl	80016a4 <move_backward>
				if (state_sent == 0) {
 8000ece:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <main+0x220>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <main+0x144>
					UART_send_direction_to_extern(2);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f000 feb5 	bl	8001c48 <UART_send_direction_to_extern>
					state_sent = 1;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <main+0x220>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
				}
				if (currentMillis - state_change_millis
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <main+0x21c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	1ad2      	subs	r2, r2, r3
						>= move_backward_interval) {
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <main+0x228>)
 8000eee:	681b      	ldr	r3, [r3, #0]
				if (currentMillis - state_change_millis
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d350      	bcc.n	8000f96 <main+0x1f6>
					state_change_millis = currentMillis;
 8000ef4:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <main+0x21c>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6013      	str	r3, [r2, #0]
					turning_direction = (rand() % RANDOM_FACTOR);
 8000efa:	f003 ff43 	bl	8004d84 <rand>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	bfb8      	it	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <main+0x22c>)
 8000f0c:	6013      	str	r3, [r2, #0]
					state_sent = 0;
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <main+0x220>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
					state = TURN;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <main+0x218>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f1a:	e03c      	b.n	8000f96 <main+0x1f6>
			case TURN:
				// Check distance during TURN
				if (filtered_distance <= DANGER_DISTANCE) {
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <main+0x20c>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	2b0a      	cmp	r3, #10
 8000f22:	d803      	bhi.n	8000f2c <main+0x18c>
					state = STOP;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <main+0x218>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
					// Break to exit the TURN case immediately
					break;
 8000f2a:	e038      	b.n	8000f9e <main+0x1fe>
				}
				// Continue TURN logic if distance is safe
				if (turning_direction == 0) {
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <main+0x22c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10d      	bne.n	8000f50 <main+0x1b0>
					turn_left();
 8000f34:	f000 fbf2 	bl	800171c <turn_left>
					if (state_sent == 0) {
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <main+0x220>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d113      	bne.n	8000f6a <main+0x1ca>
						UART_send_direction_to_extern(3);
 8000f42:	2003      	movs	r0, #3
 8000f44:	f000 fe80 	bl	8001c48 <UART_send_direction_to_extern>
						state_sent = 1;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <main+0x220>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e00c      	b.n	8000f6a <main+0x1ca>
					}
				} else {
					turn_right();
 8000f50:	f000 fbc6 	bl	80016e0 <turn_right>
					if (state_sent == 0) {
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <main+0x220>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <main+0x1ca>
						UART_send_direction_to_extern(4);
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f000 fe72 	bl	8001c48 <UART_send_direction_to_extern>
						state_sent = 1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0x220>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
					}
				}
				if (currentMillis - state_change_millis >= TURN_DURATION) {
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <main+0x21c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d90f      	bls.n	8000f9a <main+0x1fa>
					state_change_millis = currentMillis;
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <main+0x21c>)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6013      	str	r3, [r2, #0]
					state_sent = 0;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <main+0x220>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
					state = INIT;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <main+0x218>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f8c:	e005      	b.n	8000f9a <main+0x1fa>
				break;
 8000f8e:	bf00      	nop
 8000f90:	e71f      	b.n	8000dd2 <main+0x32>
				break;
 8000f92:	bf00      	nop
 8000f94:	e71d      	b.n	8000dd2 <main+0x32>
				break;
 8000f96:	bf00      	nop
 8000f98:	e71b      	b.n	8000dd2 <main+0x32>
				break;
 8000f9a:	bf00      	nop
 8000f9c:	e719      	b.n	8000dd2 <main+0x32>
	while (1) {
 8000f9e:	e718      	b.n	8000dd2 <main+0x32>
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40240000 	.word	0x40240000
 8000fa8:	20000230 	.word	0x20000230
 8000fac:	20000214 	.word	0x20000214
 8000fb0:	2000021c 	.word	0x2000021c
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000216 	.word	0x20000216
 8000fbc:	20000218 	.word	0x20000218
 8000fc0:	20000205 	.word	0x20000205
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000210 	.word	0x20000210

08000fd0 <measure_distance>:
		}

	}
}

DistanceType measure_distance() {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	if (capture_done) {
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <measure_distance+0x9c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d03e      	beq.n	800105e <measure_distance+0x8e>
		capture_done = 0;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <measure_distance+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
		DistanceType distance = pulse_width / SCALING_FACTOR;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <measure_distance+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <measure_distance+0xa4>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	80fb      	strh	r3, [r7, #6]

		// make macros 200, default 11 value
		if (distance > MAX_DISTANCE) {
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2bc8      	cmp	r3, #200	; 0xc8
 8000ff8:	d901      	bls.n	8000ffe <measure_distance+0x2e>
			// Return a default value
			return DEFAULT_DISTANCE;
 8000ffa:	230b      	movs	r3, #11
 8000ffc:	e030      	b.n	8001060 <measure_distance+0x90>
		}

		if (distance >= MIN_DISTANCE && distance <= MAX_DISTANCE) {
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	2bc8      	cmp	r3, #200	; 0xc8
 8001002:	d811      	bhi.n	8001028 <measure_distance+0x58>
			totalDistance += distance;
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <measure_distance+0xa8>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <measure_distance+0xa8>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
			count++;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <measure_distance+0xac>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <measure_distance+0xac>)
 8001026:	6013      	str	r3, [r2, #0]

		}

		// implement better filtering mechanism
		if (count % 2 == 0) {
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <measure_distance+0xac>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d114      	bne.n	800105e <measure_distance+0x8e>
			distance = totalDistance / 2;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <measure_distance+0xa8>)
 8001036:	ed93 7a00 	vldr	s14, [r3]
 800103a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800103e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	80fb      	strh	r3, [r7, #6]
			totalDistance = 0;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <measure_distance+0xa8>)
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
			count = 0;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <measure_distance+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
			return distance;
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	e000      	b.n	8001060 <measure_distance+0x90>

		}
	}
	// Return a default value if conditions are not met
	return DEFAULT_DISTANCE;
 800105e:	230b      	movs	r3, #11
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000204 	.word	0x20000204
 8001070:	20000200 	.word	0x20000200
 8001074:	8d3dcb09 	.word	0x8d3dcb09
 8001078:	20000208 	.word	0x20000208
 800107c:	2000020c 	.word	0x2000020c

08001080 <my_pid>:

// PID control function
double my_pid(double obstacle_distance, double measured_distance) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	ed87 0b02 	vstr	d0, [r7, #8]
 800108a:	ed87 1b00 	vstr	d1, [r7]
	static double integral_val = 0;
	static double prev_error = 0;

	// Calculate error as the difference between the obstacle distance and the measured distance
	double error_val = measured_distance - obstacle_distance;
 800108e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001096:	f7ff f8ff 	bl	8000298 <__aeabi_dsub>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (error_val == 0 || error_val > obstacle_distance) {
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ae:	f7ff fd13 	bl	8000ad8 <__aeabi_dcmpeq>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d108      	bne.n	80010ca <my_pid+0x4a>
 80010b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010c0:	f7ff fd32 	bl	8000b28 <__aeabi_dcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <my_pid+0x58>
		integral_val = 0;
 80010ca:	4941      	ldr	r1, [pc, #260]	; (80011d0 <my_pid+0x150>)
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	// Proportional term
	double proportional = error_val * kP;
 80010d8:	a337      	add	r3, pc, #220	; (adr r3, 80011b8 <my_pid+0x138>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e2:	f7ff fa91 	bl	8000608 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Integral term
	integral_val += error_val;
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <my_pid+0x150>)
 80010f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f8:	f7ff f8d0 	bl	800029c <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4933      	ldr	r1, [pc, #204]	; (80011d0 <my_pid+0x150>)
 8001102:	e9c1 2300 	strd	r2, r3, [r1]
	integral_val = integral_val * kI;
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <my_pid+0x150>)
 8001108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110c:	a32c      	add	r3, pc, #176	; (adr r3, 80011c0 <my_pid+0x140>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa79 	bl	8000608 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	492d      	ldr	r1, [pc, #180]	; (80011d0 <my_pid+0x150>)
 800111c:	e9c1 2300 	strd	r2, r3, [r1]

	// Derivative term
	double derivative = error_val - prev_error;
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <my_pid+0x154>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800112a:	f7ff f8b5 	bl	8000298 <__aeabi_dsub>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9c7 2304 	strd	r2, r3, [r7, #16]
	derivative = derivative * kD;
 8001136:	a324      	add	r3, pc, #144	; (adr r3, 80011c8 <my_pid+0x148>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001140:	f7ff fa62 	bl	8000608 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]

	prev_error = error_val;
 800114c:	4921      	ldr	r1, [pc, #132]	; (80011d4 <my_pid+0x154>)
 800114e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001152:	e9c1 2300 	strd	r2, r3, [r1]

	// Total PID output
	double pid_output = proportional + derivative + integral_val;
 8001156:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800115a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800115e:	f7ff f89d 	bl	800029c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <my_pid+0x150>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff f894 	bl	800029c <__adddf3>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
//	UART_send_double(pid_output);
	UART_send_speed_to_extern(pid_output);
 800117c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001180:	f000 fd40 	bl	8001c04 <UART_send_speed_to_extern>

	if (pid_output > MAX_OUTPUT_POWER) {
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <my_pid+0x158>)
 800118a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800118e:	f7ff fccb 	bl	8000b28 <__aeabi_dcmpgt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <my_pid+0x122>
		pid_output = MAX_OUTPUT_POWER;
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <my_pid+0x158>)
 800119e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	return pid_output;
 80011a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011aa:	eeb0 0a47 	vmov.f32	s0, s14
 80011ae:	eef0 0a67 	vmov.f32	s1, s15
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2922f218 	.word	0x2922f218
 80011bc:	3fc41092 	.word	0x3fc41092
 80011c0:	d222e244 	.word	0xd222e244
 80011c4:	3fe19481 	.word	0x3fe19481
 80011c8:	71e90d6d 	.word	0x71e90d6d
 80011cc:	3fb72800 	.word	0x3fb72800
 80011d0:	20000220 	.word	0x20000220
 80011d4:	20000228 	.word	0x20000228
 80011d8:	40690000 	.word	0x40690000

080011dc <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_CC1IF) {
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <TIM4_IRQHandler+0x8c>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d035      	beq.n	800125a <TIM4_IRQHandler+0x7e>
		uint32_t captureValue = TIM4->CCR1;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <TIM4_IRQHandler+0x8c>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	607b      	str	r3, [r7, #4]
		if ((TIM4->CCER & TIM_CCER_CC1P) == 0) {
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <TIM4_IRQHandler+0x8c>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <TIM4_IRQHandler+0x38>
			last_capture = captureValue;
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <TIM4_IRQHandler+0x90>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
			TIM4->CCER |= TIM_CCER_CC1P;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <TIM4_IRQHandler+0x8c>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <TIM4_IRQHandler+0x8c>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	e01c      	b.n	800124e <TIM4_IRQHandler+0x72>
		} else {
			if (captureValue < last_capture) {
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <TIM4_IRQHandler+0x90>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d208      	bcs.n	8001230 <TIM4_IRQHandler+0x54>
				pulse_width = (0xFFFF - last_capture) + captureValue + 1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <TIM4_IRQHandler+0x90>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <TIM4_IRQHandler+0x94>)
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e005      	b.n	800123c <TIM4_IRQHandler+0x60>
			} else {
				pulse_width = captureValue - last_capture;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <TIM4_IRQHandler+0x90>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <TIM4_IRQHandler+0x94>)
 800123a:	6013      	str	r3, [r2, #0]
			}
			capture_done = 1;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <TIM4_IRQHandler+0x98>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
			TIM4->CCER &= ~TIM_CCER_CC1P;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <TIM4_IRQHandler+0x8c>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <TIM4_IRQHandler+0x8c>)
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	6213      	str	r3, [r2, #32]
		}
		TIM4->SR &= ~TIM_SR_CC1IF;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <TIM4_IRQHandler+0x8c>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <TIM4_IRQHandler+0x8c>)
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	6113      	str	r3, [r2, #16]
	}
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40000800 	.word	0x40000800
 800126c:	200001fc 	.word	0x200001fc
 8001270:	20000200 	.word	0x20000200
 8001274:	20000204 	.word	0x20000204

08001278 <EnableGPIOB>:
 *      Author: farro
 */

#include "robot_gpio.h"

void EnableGPIOB() {
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	//enable GPIOB in RCC register.
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <EnableGPIOB+0x1c>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <EnableGPIOB+0x1c>)
 8001282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001286:	6153      	str	r3, [r2, #20]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <Servo_PWM_Config>:

void Servo_PWM_Config() {
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	//resets the Servos' pin MODE. (PB0 & PB1)
	GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1);
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <Servo_PWM_Config+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <Servo_PWM_Config+0x70>)
 80012a2:	f023 030f 	bic.w	r3, r3, #15
 80012a6:	6013      	str	r3, [r2, #0]
	//resets the Servos' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_0 | GPIO_OTYPER_OT_1);
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <Servo_PWM_Config+0x70>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a16      	ldr	r2, [pc, #88]	; (8001308 <Servo_PWM_Config+0x70>)
 80012ae:	f023 0303 	bic.w	r3, r3, #3
 80012b2:	6053      	str	r3, [r2, #4]
	//resets the Servos' pin SPEED.
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 | GPIO_OSPEEDER_OSPEEDR1);
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <Servo_PWM_Config+0x70>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <Servo_PWM_Config+0x70>)
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	6093      	str	r3, [r2, #8]

	//sets the Servos' pin MODE to 0b10 as an alternated output.
	GPIOB->MODER |= (GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1);
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <Servo_PWM_Config+0x70>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <Servo_PWM_Config+0x70>)
 80012c6:	f043 030a 	orr.w	r3, r3, #10
 80012ca:	6013      	str	r3, [r2, #0]
	//sets the Servos' pin SPEED to medium.
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR0_0 | GPIO_OSPEEDER_OSPEEDR1_0);
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <Servo_PWM_Config+0x70>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <Servo_PWM_Config+0x70>)
 80012d2:	f043 0305 	orr.w	r3, r3, #5
 80012d6:	6093      	str	r3, [r2, #8]
	//resets the Servos' PUPD register.
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0 | GPIO_PUPDR_PUPDR1);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <Servo_PWM_Config+0x70>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <Servo_PWM_Config+0x70>)
 80012de:	f023 030f 	bic.w	r3, r3, #15
 80012e2:	60d3      	str	r3, [r2, #12]

	//resets the high alternate function for pin PB0 & PB1.
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <Servo_PWM_Config+0x70>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <Servo_PWM_Config+0x70>)
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ee:	6213      	str	r3, [r2, #32]
	/*activate alternate function 2 (AF2) to use timer 3 on channel 3 & 4 for PB0
	 & PB1 in AFRL0 & AFRL1.*/
	GPIOB->AFR[0] |= ((0b0010 << GPIO_AFRL_AFRL1_Pos)
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <Servo_PWM_Config+0x70>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <Servo_PWM_Config+0x70>)
 80012f6:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80012fa:	6213      	str	r3, [r2, #32]
			| (0b0010 << GPIO_AFRL_AFRL0_Pos));
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	48000400 	.word	0x48000400

0800130c <Ultrasonic_Trigger_Config>:

void Ultrasonic_Trigger_Config() {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	//resets the Servos' pin MODE. (PB3)
	GPIOB->MODER &= ~GPIO_MODER_MODER3;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001316:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800131a:	6013      	str	r3, [r2, #0]
	//resets the Servos' pin OTYPE to 0 as push-pull.
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001322:	f023 0308 	bic.w	r3, r3, #8
 8001326:	6053      	str	r3, [r2, #4]
	//resets the Servos' pin SPEED.
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800132e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001332:	6093      	str	r3, [r2, #8]

	//sets the Servos' pin MODE to 0b10 as an alternated output.
	GPIOB->MODER |= GPIO_MODER_MODER3_1;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133e:	6013      	str	r3, [r2, #0]
	//sets the Servos' pin SPEED to medium.
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_0;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	6093      	str	r3, [r2, #8]
	//resets the Servos' PUPD register.
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR3;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001352:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001356:	60d3      	str	r3, [r2, #12]

	//resets the high alternate function for pin PB3.
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL3;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800135e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001362:	6213      	str	r3, [r2, #32]
	//activate alternate function 1 (AF1) to use timer 2 on channel 2 PB3
	GPIOB->AFR[0] |= 0b0001 << GPIO_AFRL_AFRL3_Pos;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <Ultrasonic_Trigger_Config+0x70>)
 800136a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800136e:	6213      	str	r3, [r2, #32]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	48000400 	.word	0x48000400

08001380 <Ultrasonic_Echo_Config>:

void Ultrasonic_Echo_Config() {
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	//resets the Servos' pin MODE. (PB6)
	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 800138a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138e:	6013      	str	r3, [r2, #0]
	//resets the Servos' pin SPEED.
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 8001396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139a:	6093      	str	r3, [r2, #8]
	//resets the Servos' PUPD register.
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR6;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a6:	60d3      	str	r3, [r2, #12]

	//sets the Servos' pin MODE to 0b10 as an alternated input.
	GPIOB->MODER |= GPIO_MODER_MODER6_1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b2:	6013      	str	r3, [r2, #0]
	//sets the Servos' pin SPEED to medium.
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013be:	6093      	str	r3, [r2, #8]
	//set PUPD to pull-down.
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR6_0;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ca:	60d3      	str	r3, [r2, #12]

	//resets the high alternate function for pin PB6.
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL6;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80013d6:	6213      	str	r3, [r2, #32]
	//activate alternate function 2 (AF2) to use timer 4 on channel 1 PB6
	GPIOB->AFR[0] |= 0b0010 << GPIO_AFRL_AFRL6_Pos;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <Ultrasonic_Echo_Config+0x70>)
 80013de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e2:	6213      	str	r3, [r2, #32]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	48000400 	.word	0x48000400

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <Timer2_Init>:
 *      Author: farro
 */

#include "robot_timers.h"

void Timer2_Init(void) {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	// Enable clock for TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <Timer2_Init+0xa8>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <Timer2_Init+0xa8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	61d3      	str	r3, [r2, #28]

	// Prescaler to divide the clock to 1MHz (assuming a 16MHz clock)
	TIM2->PSC = 15;
 8001440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001444:	220f      	movs	r2, #15
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
	// Max auto-reload value to allow for maximum timer count
	TIM2->ARR = 0xFFFF;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the compare value for 10μs pulse
	TIM2->CCR2 = 10;
 8001452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001456:	220a      	movs	r2, #10
 8001458:	639a      	str	r2, [r3, #56]	; 0x38

	// Clear output compare mode bits for channel 2
	TIM2->CCMR1 &= ~TIM_CCMR1_OC2M;
 800145a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800146c:	6193      	str	r3, [r2, #24]
	// PWM mode 1
	TIM2->CCMR1 |= (0x6 << TIM_CCMR1_OC2M_Pos);
 800146e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800147c:	6193      	str	r3, [r2, #24]

	// Enable preload for CCR2 to allow CCR2 to be loaded with a new value
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;
 800147e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800148c:	6193      	str	r3, [r2, #24]

	// Clear polarity bit to make output active high
	TIM2->CCER &= ~(TIM_CCER_CC2P);
 800148e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	f023 0320 	bic.w	r3, r3, #32
 800149c:	6213      	str	r3, [r2, #32]
	// Enable output for CH2
	TIM2->CCER |= TIM_CCER_CC2E;
 800149e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6213      	str	r3, [r2, #32]

	// Generate an update event to load the prescaler and ARR values
	TIM2->EGR |= TIM_EGR_UG;
 80014ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6153      	str	r3, [r2, #20]

	// Start the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 80014be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <Timer3_Init>:

/**
 * @brief setting up Timer 3 for both left & right Servos.
 *
 */
void Timer3_Init(void) {
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	//Activate Timer 3 in APB register.
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <Timer3_Init+0xe4>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <Timer3_Init+0xe4>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	61d3      	str	r3, [r2, #28]

	//disable the timer.
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <Timer3_Init+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <Timer3_Init+0xe8>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

	//prescale the system using 16MHz frequency.
	TIM3->PSC = 16 - 1;
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <Timer3_Init+0xe8>)
 80014fa:	220f      	movs	r2, #15
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
	//set the PWM period in 20 ms.
	TIM3->ARR = 20000 - 1;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <Timer3_Init+0xe8>)
 8001500:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c

	//reset counter of Timer 2 to 0.
	TIM3->CNT &= ~TIM_CNT_CNT;
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <Timer3_Init+0xe8>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <Timer3_Init+0xe8>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

	//clean bits the channel 3 in timer 3 register.
	TIM3->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <Timer3_Init+0xe8>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	4a2b      	ldr	r2, [pc, #172]	; (80015c4 <Timer3_Init+0xe8>)
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 &= ~TIM_CCMR2_OC3M;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <Timer3_Init+0xe8>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <Timer3_Init+0xe8>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152a:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 &= ~TIM_CCMR2_OC3PE;
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <Timer3_Init+0xe8>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <Timer3_Init+0xe8>)
 8001532:	f023 0308 	bic.w	r3, r3, #8
 8001536:	61d3      	str	r3, [r2, #28]

	//set enable the compare register of channel 3 in timer 3.
	TIM3->CCER |= TIM_CCER_CC3E;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <Timer3_Init+0xe8>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <Timer3_Init+0xe8>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6213      	str	r3, [r2, #32]
	//set the PWM in channel 3 of timer 3 as the output compare mode.
	TIM3->CCMR2 |= (TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2);
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <Timer3_Init+0xe8>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <Timer3_Init+0xe8>)
 800154a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800154e:	61d3      	str	r3, [r2, #28]
	//enable the preload.
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <Timer3_Init+0xe8>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <Timer3_Init+0xe8>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	61d3      	str	r3, [r2, #28]

	//clean bits the channel 4 in timer 3 register.
	TIM3->CCMR2 &= ~TIM_CCMR2_CC4S;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <Timer3_Init+0xe8>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <Timer3_Init+0xe8>)
 8001562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001566:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 &= ~TIM_CCMR2_OC4M;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <Timer3_Init+0xe8>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <Timer3_Init+0xe8>)
 800156e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001576:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <Timer3_Init+0xe8>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <Timer3_Init+0xe8>)
 800157e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001582:	61d3      	str	r3, [r2, #28]

	//set enable the compare register of channel 3 in timer 3.
	TIM3->CCER |= TIM_CCER_CC4E;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <Timer3_Init+0xe8>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <Timer3_Init+0xe8>)
 800158a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158e:	6213      	str	r3, [r2, #32]
	//set the PWM in channel 4 of timer 3 as the output compare mode.
	TIM3->CCMR2 |= (TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2);
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <Timer3_Init+0xe8>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <Timer3_Init+0xe8>)
 8001596:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800159a:	61d3      	str	r3, [r2, #28]
	//enable the preload.
	TIM3->CCMR2 |= TIM_CCMR2_OC4PE;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <Timer3_Init+0xe8>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <Timer3_Init+0xe8>)
 80015a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a6:	61d3      	str	r3, [r2, #28]
	//enable the timer.
	TIM3->CR1 |= TIM_CR1_CEN;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <Timer3_Init+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <Timer3_Init+0xe8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40000400 	.word	0x40000400

080015c8 <Timer4_Init>:

void Timer4_Init(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	// Enable clock for TIM4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <Timer4_Init+0x64>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a16      	ldr	r2, [pc, #88]	; (800162c <Timer4_Init+0x64>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	61d3      	str	r3, [r2, #28]

	// Prescaler
	TIM4->PSC = 15;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <Timer4_Init+0x68>)
 80015da:	220f      	movs	r2, #15
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
	// Max auto-reload value
	TIM4->ARR = 0xFFFF;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <Timer4_Init+0x68>)
 80015e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set channel as input, IC1 is mapped on TI1
	TIM4->CCMR1 |= (1 << TIM_CCMR1_CC1S_Pos);
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <Timer4_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <Timer4_Init+0x68>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <Timer4_Init+0x68>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <Timer4_Init+0x68>)
 80015f8:	f023 030a 	bic.w	r3, r3, #10
 80015fc:	6213      	str	r3, [r2, #32]
	// Enable the capture
	TIM4->CCER |= TIM_CCER_CC1E;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <Timer4_Init+0x68>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <Timer4_Init+0x68>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]

	// Enable the TIM4 interrupt for capture on CH1
	TIM4->DIER |= TIM_DIER_CC1IE;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <Timer4_Init+0x68>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <Timer4_Init+0x68>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM4_IRQn);
 8001616:	201e      	movs	r0, #30
 8001618:	f7ff feec 	bl	80013f4 <__NVIC_EnableIRQ>

	// Start TIM4
	TIM4->CR1 |= TIM_CR1_CEN;
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <Timer4_Init+0x68>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <Timer4_Init+0x68>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	40000800 	.word	0x40000800
 8001634:	00000000 	.word	0x00000000

08001638 <move_forward>:
#include "servo.h"

void move_forward(double pid_power) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0b00 	vstr	d0, [r7]
    TIM3->CCR3 = ANTI_CLOCKWISE + pid_power;
 8001642:	a316      	add	r3, pc, #88	; (adr r3, 800169c <move_forward+0x64>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164c:	f7fe fe26 	bl	800029c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4c10      	ldr	r4, [pc, #64]	; (8001698 <move_forward+0x60>)
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faad 	bl	8000bb8 <__aeabi_d2uiz>
 800165e:	4603      	mov	r3, r0
 8001660:	63e3      	str	r3, [r4, #60]	; 0x3c
    TIM3->CCR4 = CLOCKWISE - pid_power;
 8001662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001666:	a10a      	add	r1, pc, #40	; (adr r1, 8001690 <move_forward+0x58>)
 8001668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800166c:	f7fe fe14 	bl	8000298 <__aeabi_dsub>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4c08      	ldr	r4, [pc, #32]	; (8001698 <move_forward+0x60>)
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa9d 	bl	8000bb8 <__aeabi_d2uiz>
 800167e:	4603      	mov	r3, r0
 8001680:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	00000000 	.word	0x00000000
 8001694:	40967000 	.word	0x40967000
 8001698:	40000400 	.word	0x40000400
 800169c:	00000000 	.word	0x00000000
 80016a0:	40988800 	.word	0x40988800

080016a4 <move_backward>:

void move_backward(void) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
    uint16_t reverse_counter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	80fb      	strh	r3, [r7, #6]
    while (reverse_counter < MAX_MOVE_BACK_COUNTER) {
 80016ae:	e00a      	b.n	80016c6 <move_backward+0x22>
        TIM3->CCR3 = CLOCKWISE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <move_backward+0x38>)
 80016b2:	f240 529c 	movw	r2, #1436	; 0x59c
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR4 = ANTI_CLOCKWISE;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <move_backward+0x38>)
 80016ba:	f240 6222 	movw	r2, #1570	; 0x622
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
        reverse_counter++;
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	3301      	adds	r3, #1
 80016c4:	80fb      	strh	r3, [r7, #6]
    while (reverse_counter < MAX_MOVE_BACK_COUNTER) {
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2b63      	cmp	r3, #99	; 0x63
 80016ca:	d9f1      	bls.n	80016b0 <move_backward+0xc>
    }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40000400 	.word	0x40000400

080016e0 <turn_right>:

void turn_right(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
    uint16_t turning_counter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	80fb      	strh	r3, [r7, #6]
    while (turning_counter < MAX_TURNING_COUNTER) {
 80016ea:	e00a      	b.n	8001702 <turn_right+0x22>
        TIM3->CCR3 = ANTI_CLOCKWISE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <turn_right+0x38>)
 80016ee:	f240 6222 	movw	r2, #1570	; 0x622
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR4 = STOP_SERVO;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <turn_right+0x38>)
 80016f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
        turning_counter++;
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	3301      	adds	r3, #1
 8001700:	80fb      	strh	r3, [r7, #6]
    while (turning_counter < MAX_TURNING_COUNTER) {
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001708:	d3f0      	bcc.n	80016ec <turn_right+0xc>
    }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40000400 	.word	0x40000400

0800171c <turn_left>:

void turn_left(void) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
    uint16_t turning_counter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	80fb      	strh	r3, [r7, #6]
    while (turning_counter < MAX_TURNING_COUNTER) {
 8001726:	e00a      	b.n	800173e <turn_left+0x22>
        TIM3->CCR3 = STOP_SERVO;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <turn_left+0x38>)
 800172a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR4 = CLOCKWISE;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <turn_left+0x38>)
 8001732:	f240 529c 	movw	r2, #1436	; 0x59c
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
        turning_counter++;
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	3301      	adds	r3, #1
 800173c:	80fb      	strh	r3, [r7, #6]
    while (turning_counter < MAX_TURNING_COUNTER) {
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001744:	d3f0      	bcc.n	8001728 <turn_left+0xc>
    }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40000400 	.word	0x40000400

08001758 <stop>:

void stop(void) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
    uint16_t stop_counter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	80fb      	strh	r3, [r7, #6]
    while (stop_counter < MAX_STOP_COUNTER) {
 8001762:	e00a      	b.n	800177a <stop+0x22>
        TIM3->CCR3 = STOP_SERVO;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <stop+0x38>)
 8001766:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM3->CCR4 = STOP_SERVO;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <stop+0x38>)
 800176e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
        stop_counter++;
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	3301      	adds	r3, #1
 8001778:	80fb      	strh	r3, [r7, #6]
    while (stop_counter < MAX_STOP_COUNTER) {
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2bf9      	cmp	r3, #249	; 0xf9
 800177e:	d9f1      	bls.n	8001764 <stop+0xc>
    }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40000400 	.word	0x40000400

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x44>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_MspInit+0x44>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_MspInit+0x44>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_MspInit+0x44>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_UART_MspInit+0x8c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d130      	bne.n	8001860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_UART_MspInit+0x90>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_UART_MspInit+0x90>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0x90>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0x90>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_UART_MspInit+0x90>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_UART_MspInit+0x90>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182e:	230c      	movs	r3, #12
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f000 fc56 	bl	80020fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2026      	movs	r0, #38	; 0x26
 8001856:	f000 fba4 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800185a:	2026      	movs	r0, #38	; 0x26
 800185c:	f000 fbbd 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40004400 	.word	0x40004400
 800186c:	40021000 	.word	0x40021000

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:
void SysTick_Init(void) {
    SysTick_Config(SystemCoreClock / 1000);
}

void SysTick_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	millis++;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Handler+0x18>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <SysTick_Handler+0x18>)
 80018c4:	6013      	str	r3, [r2, #0]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000230 	.word	0x20000230

080018d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART2_IRQHandler+0x10>)
 80018da:	f002 fb19 	bl	8003f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002c0 	.word	0x200002c0

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001902:	f004 fa6b 	bl	8005ddc <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800192a:	e7fe      	b.n	800192a <_exit+0x12>

0800192c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
  }

  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
  }
  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f004 f9d0 	bl	8005ddc <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20010000 	.word	0x20010000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000234 	.word	0x20000234
 8001a70:	20000498 	.word	0x20000498

08001a74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <configure_UART>:
#include "uart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void configure_UART(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <configure_UART+0xa8>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <configure_UART+0xa8>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <configure_UART+0xa8>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae4:	f000 fb0a 	bl	80020fc <HAL_GPIO_Init>

	__HAL_RCC_USART2_CLK_ENABLE();
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <configure_UART+0xa8>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <configure_UART+0xa8>)
 8001aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <configure_UART+0xa8>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
	huart2.Instance = USART2;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <configure_UART+0xac>)
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <configure_UART+0xb0>)
 8001b04:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <configure_UART+0xac>)
 8001b08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b0c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <configure_UART+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <configure_UART+0xac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <configure_UART+0xac>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <configure_UART+0xac>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <configure_UART+0xac>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <configure_UART+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8001b32:	4804      	ldr	r0, [pc, #16]	; (8001b44 <configure_UART+0xac>)
 8001b34:	f002 f914 	bl	8003d60 <HAL_UART_Init>
}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	200002c0 	.word	0x200002c0
 8001b48:	40004400 	.word	0x40004400

08001b4c <configure_extern_UART>:

void configure_extern_UART(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <configure_extern_UART+0xac>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <configure_extern_UART+0xac>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <configure_extern_UART+0xac>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

	// Configure USART1 Tx (PA9) and Rx (PA10) pins
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Use AF7 for USART1
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f000 faaf 	bl	80020fc <HAL_GPIO_Init>

	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <configure_extern_UART+0xac>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <configure_extern_UART+0xac>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <configure_extern_UART+0xac>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

	// Configure USART1 settings
	huart1.Instance = USART1;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <configure_extern_UART+0xb4>)
 8001bba:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bbe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc2:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bd8:	220c      	movs	r2, #12
 8001bda:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <configure_extern_UART+0xb0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]

	// Initialize USART1
	HAL_UART_Init(&huart1);
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <configure_extern_UART+0xb0>)
 8001bea:	f002 f8b9 	bl	8003d60 <HAL_UART_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000238 	.word	0x20000238
 8001c00:	40013800 	.word	0x40013800

08001c04 <UART_send_speed_to_extern>:
	// Format double with 2 decimal places
	sprintf(buffer, "%.2lf\r\n", data);
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 1000);
}

void UART_send_speed_to_extern(double speed_val) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	ed87 0b00 	vstr	d0, [r7]
	// Increased buffer size for double
	char buffer[20];
	// Format double with 2 decimal places
	sprintf(buffer, "#Speed:%.2lf;\r\n", speed_val);
 8001c0e:	f107 000c 	add.w	r0, r7, #12
 8001c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <UART_send_speed_to_extern+0x3c>)
 8001c18:	f004 f82a 	bl	8005c70 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fb2d 	bl	8000280 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	f107 010c 	add.w	r1, r7, #12
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <UART_send_speed_to_extern+0x40>)
 8001c34:	f002 f8e2 	bl	8003dfc <HAL_UART_Transmit>
}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	080095d0 	.word	0x080095d0
 8001c44:	20000238 	.word	0x20000238

08001c48 <UART_send_direction_to_extern>:

void UART_send_direction_to_extern(int state) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	char buffer[20];
	// Format double with 2 decimal places
	switch (state) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d82f      	bhi.n	8001cb6 <UART_send_direction_to_extern+0x6e>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <UART_send_direction_to_extern+0x14>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c71 	.word	0x08001c71
 8001c60:	08001c7f 	.word	0x08001c7f
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	08001c9b 	.word	0x08001c9b
 8001c6c:	08001ca9 	.word	0x08001ca9
		case 0:
			sprintf(buffer, "#Forward;\r\n");
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4919      	ldr	r1, [pc, #100]	; (8001cdc <UART_send_direction_to_extern+0x94>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fffa 	bl	8005c70 <siprintf>
			break;
 8001c7c:	e01c      	b.n	8001cb8 <UART_send_direction_to_extern+0x70>
		case 1:
			sprintf(buffer, "#Stop;\r\n");
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4917      	ldr	r1, [pc, #92]	; (8001ce0 <UART_send_direction_to_extern+0x98>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fff3 	bl	8005c70 <siprintf>
			break;
 8001c8a:	e015      	b.n	8001cb8 <UART_send_direction_to_extern+0x70>
		case 2:
			sprintf(buffer, "#Reverse;\r\n");
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4914      	ldr	r1, [pc, #80]	; (8001ce4 <UART_send_direction_to_extern+0x9c>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 ffec 	bl	8005c70 <siprintf>
			break;
 8001c98:	e00e      	b.n	8001cb8 <UART_send_direction_to_extern+0x70>
		case 3:
			sprintf(buffer, "#Left;\r\n");
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4912      	ldr	r1, [pc, #72]	; (8001ce8 <UART_send_direction_to_extern+0xa0>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 ffe5 	bl	8005c70 <siprintf>
			break;
 8001ca6:	e007      	b.n	8001cb8 <UART_send_direction_to_extern+0x70>
		case 4:
			sprintf(buffer, "#Right;\r\n");
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	490f      	ldr	r1, [pc, #60]	; (8001cec <UART_send_direction_to_extern+0xa4>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 ffde 	bl	8005c70 <siprintf>
			break;
 8001cb4:	e000      	b.n	8001cb8 <UART_send_direction_to_extern+0x70>

		default:
			break;
 8001cb6:	bf00      	nop
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fadf 	bl	8000280 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 010c 	add.w	r1, r7, #12
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <UART_send_direction_to_extern+0xa8>)
 8001cd0:	f002 f894 	bl	8003dfc <HAL_UART_Transmit>
}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	080095e0 	.word	0x080095e0
 8001ce0:	080095ec 	.word	0x080095ec
 8001ce4:	080095f8 	.word	0x080095f8
 8001ce8:	08009604 	.word	0x08009604
 8001cec:	08009610 	.word	0x08009610
 8001cf0:	20000238 	.word	0x20000238

08001cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf8:	f7ff febc 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	; (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f004 f861 	bl	8005de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d26:	f7ff f83b 	bl	8000da0 <main>

08001d2a <LoopForever>:

LoopForever:
    b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d38:	08009adc 	.word	0x08009adc
  ldr r2, =_sbss
 8001d3c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d40:	20000498 	.word	0x20000498

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x28>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x28>)
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f917 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fd16 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f92f 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f8f7 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	20000014 	.word	0x20000014
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000348 	.word	0x20000348

08001dec <__NVIC_SetPriorityGrouping>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800201c:	2b02      	cmp	r3, #2
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2204      	movs	r2, #4
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e020      	b.n	8002074 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 020e 	bic.w	r2, r2, #14
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002092:	2b02      	cmp	r3, #2
 8002094:	d005      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e027      	b.n	80020f2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020e 	bic.w	r2, r2, #14
 80020b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    } 
  }
  return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e160      	b.n	80023ce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8152 	beq.w	80023c8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d017      	beq.n	80021da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d123      	bne.n	800222e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80ac 	beq.w	80023c8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002270:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002288:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b2:	d025      	beq.n	8002300 <HAL_GPIO_Init+0x204>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x2f8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01f      	beq.n	80022fc <HAL_GPIO_Init+0x200>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d019      	beq.n	80022f8 <HAL_GPIO_Init+0x1fc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x300>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1f8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x304>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x308>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1f0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x30c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022e4:	2306      	movs	r3, #6
 80022e6:	e00c      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022e8:	2307      	movs	r3, #7
 80022ea:	e00a      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022ec:	2305      	movs	r3, #5
 80022ee:	e008      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e006      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f4:	2303      	movs	r3, #3
 80022f6:	e004      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_GPIO_Init+0x206>
 8002300:	2300      	movs	r3, #0
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	f002 0203 	and.w	r2, r2, #3
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	4093      	lsls	r3, r2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002312:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <HAL_GPIO_Init+0x310>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_GPIO_Init+0x310>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_GPIO_Init+0x310>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_GPIO_Init+0x310>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_GPIO_Init+0x310>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_GPIO_Init+0x310>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x310>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_GPIO_Init+0x310>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ae97 	bne.w	800210c <HAL_GPIO_Init+0x10>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	48000c00 	.word	0x48000c00
 8002400:	48001000 	.word	0x48001000
 8002404:	48001400 	.word	0x48001400
 8002408:	48001800 	.word	0x48001800
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002416:	af00      	add	r7, sp, #0
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002420:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f001 b83a 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 816f 	beq.w	800272a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800244c:	4bb5      	ldr	r3, [pc, #724]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b04      	cmp	r3, #4
 8002456:	d00c      	beq.n	8002472 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002458:	4bb2      	ldr	r3, [pc, #712]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d15c      	bne.n	800251e <HAL_RCC_OscConfig+0x10e>
 8002464:	4baf      	ldr	r3, [pc, #700]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d155      	bne.n	800251e <HAL_RCC_OscConfig+0x10e>
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002486:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x94>
 800249e:	4ba1      	ldr	r3, [pc, #644]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e015      	b.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024cc:	4b95      	ldr	r3, [pc, #596]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80024d8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80024dc:	fa92 f2a2 	rbit	r2, r2
 80024e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80024e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8111 	beq.w	8002728 <HAL_RCC_OscConfig+0x318>
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8108 	bne.w	8002728 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	f000 bfc6 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002522:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x12e>
 8002530:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7b      	ldr	r2, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e036      	b.n	80025ac <HAL_RCC_OscConfig+0x19c>
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x158>
 800254e:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a74      	ldr	r2, [pc, #464]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a71      	ldr	r2, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e021      	b.n	80025ac <HAL_RCC_OscConfig+0x19c>
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x184>
 800257a:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a69      	ldr	r2, [pc, #420]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a66      	ldr	r2, [pc, #408]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0x19c>
 8002594:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b60      	ldr	r3, [pc, #384]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5f      	ldr	r2, [pc, #380]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d059      	beq.n	8002670 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fc0a 	bl	8001dd4 <HAL_GetTick>
 80025c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c6:	f7ff fc05 	bl	8001dd4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d902      	bls.n	80025dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	f000 bf67 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 80025dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80025f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <HAL_RCC_OscConfig+0x1fe>
 8002608:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x22a>
 800260e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002612:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002626:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800262a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800263e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002642:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002646:	fa92 f2a2 	rbit	r2, r2
 800264a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800264e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002652:	fab2 f282 	clz	r2, r2
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f042 0220 	orr.w	r2, r2, #32
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f002 021f 	and.w	r2, r2, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ab      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b6>
 800266e:	e05c      	b.n	800272a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fbb0 	bl	8001dd4 <HAL_GetTick>
 8002674:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267a:	f7ff fbab 	bl	8001dd4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d902      	bls.n	8002690 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	f000 bf0d 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 8002690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002694:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80026a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2b2>
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x2de>
 80026c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80026d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCC_OscConfig+0x314>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80026f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002702:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ab      	bne.n	800267a <HAL_RCC_OscConfig+0x26a>
 8002722:	e002      	b.n	800272a <HAL_RCC_OscConfig+0x31a>
 8002724:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 817f 	beq.w	8002a3e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002740:	4ba7      	ldr	r3, [pc, #668]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800274c:	4ba4      	ldr	r3, [pc, #656]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d173      	bne.n	8002840 <HAL_RCC_OscConfig+0x430>
 8002758:	4ba1      	ldr	r3, [pc, #644]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002764:	d16c      	bne.n	8002840 <HAL_RCC_OscConfig+0x430>
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002778:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0x386>
 8002790:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e013      	b.n	80027be <HAL_RCC_OscConfig+0x3ae>
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2202      	movs	r2, #2
 80027c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80027c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80027d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCC_OscConfig+0x3f6>
 80027f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f000 be52 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	21f8      	movs	r1, #248	; 0xf8
 800281c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002824:	fa91 f1a1 	rbit	r1, r1
 8002828:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800282c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002830:	fab1 f181 	clz	r1, r1
 8002834:	b2c9      	uxtb	r1, r1
 8002836:	408b      	lsls	r3, r1
 8002838:	4969      	ldr	r1, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e0fe      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8088 	beq.w	8002962 <HAL_RCC_OscConfig+0x552>
 8002852:	2301      	movs	r3, #1
 8002854:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002864:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	461a      	mov	r2, r3
 800287a:	2301      	movs	r3, #1
 800287c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff faa9 	bl	8001dd4 <HAL_GetTick>
 8002882:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff faa4 	bl	8001dd4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	f000 be06 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 800289e:	2302      	movs	r3, #2
 80028a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80028b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_OscConfig+0x4be>
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e013      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e6>
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2202      	movs	r2, #2
 80028f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002900:	fa92 f2a2 	rbit	r2, r2
 8002904:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002908:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0af      	beq.n	8002888 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	21f8      	movs	r1, #248	; 0xf8
 800293e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002946:	fa91 f1a1 	rbit	r1, r1
 800294a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800294e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002952:	fab1 f181 	clz	r1, r1
 8002956:	b2c9      	uxtb	r1, r1
 8002958:	408b      	lsls	r3, r1
 800295a:	4921      	ldr	r1, [pc, #132]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e06d      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
 8002962:	2301      	movs	r3, #1
 8002964:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002974:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7ff fa21 	bl	8001dd4 <HAL_GetTick>
 8002992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7ff fa1c 	bl	8001dd4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f000 bd7e 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80029c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5d4>
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <HAL_RCC_OscConfig+0x5d0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	e016      	b.n	8002a0c <HAL_RCC_OscConfig+0x5fc>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	2302      	movs	r3, #2
 80029e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029f6:	2302      	movs	r3, #2
 80029f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a08:	4bbf      	ldr	r3, [pc, #764]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a12:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002a1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ac      	bne.n	8002998 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8113 	beq.w	8002c7a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d07c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x74e>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4ba2      	ldr	r3, [pc, #648]	; (8002d0c <HAL_RCC_OscConfig+0x8fc>)
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff f9a1 	bl	8001dd4 <HAL_GetTick>
 8002a92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff f99c 	bl	8001dd4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f000 bcfe 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ace:	2202      	movs	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002af2:	2202      	movs	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	6019      	str	r1, [r3, #0]
 8002b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f1a3 	rbit	r1, r3
 8002b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b34:	6019      	str	r1, [r3, #0]
  return result;
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d09d      	beq.n	8002a98 <HAL_RCC_OscConfig+0x688>
 8002b5c:	e08d      	b.n	8002c7a <HAL_RCC_OscConfig+0x86a>
 8002b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b80:	601a      	str	r2, [r3, #0]
  return result;
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCC_OscConfig+0x8fc>)
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f918 	bl	8001dd4 <HAL_GetTick>
 8002ba4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff f913 	bl	8001dd4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f000 bc75 	b.w	80034aa <HAL_RCC_OscConfig+0x109a>
 8002bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c38:	2102      	movs	r1, #2
 8002c3a:	6019      	str	r1, [r3, #0]
 8002c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f1a3 	rbit	r1, r3
 8002c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c52:	6019      	str	r1, [r3, #0]
  return result;
 8002c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d197      	bne.n	8002baa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 81a5 	beq.w	8002fda <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	61d3      	str	r3, [r2, #28]
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCC_OscConfig+0x8f8>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCC_OscConfig+0x900>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d121      	bne.n	8002d20 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_OscConfig+0x900>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x900>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f874 	bl	8001dd4 <HAL_GetTick>
 8002cec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e010      	b.n	8002d14 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7ff f86f 	bl	8001dd4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d908      	bls.n	8002d14 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e3d1      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	10908120 	.word	0x10908120
 8002d10:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b8d      	ldr	r3, [pc, #564]	; (8002f4c <HAL_RCC_OscConfig+0xb3c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0e8      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x92e>
 8002d30:	4b87      	ldr	r3, [pc, #540]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a86      	ldr	r2, [pc, #536]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e035      	b.n	8002daa <HAL_RCC_OscConfig+0x99a>
 8002d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x958>
 8002d4e:	4b80      	ldr	r3, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a7f      	ldr	r2, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e020      	b.n	8002daa <HAL_RCC_OscConfig+0x99a>
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x982>
 8002d78:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	4b72      	ldr	r3, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0x99a>
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a6e      	ldr	r2, [pc, #440]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a6b      	ldr	r2, [pc, #428]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8081 	beq.w	8002ebe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7ff f80a 	bl	8001dd4 <HAL_GetTick>
 8002dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7ff f805 	bl	8001dd4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e365      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 8002dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002de6:	2202      	movs	r2, #2
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e24:	601a      	str	r2, [r3, #0]
  return result;
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d102      	bne.n	8002e4a <HAL_RCC_OscConfig+0xa3a>
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	e013      	b.n	8002e72 <HAL_RCC_OscConfig+0xa62>
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e52:	2202      	movs	r2, #2
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e68:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	fa92 f1a2 	rbit	r1, r2
 8002e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e90:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e94:	6011      	str	r1, [r2, #0]
  return result;
 8002e96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e9a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d084      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x9b6>
 8002ebc:	e083      	b.n	8002fc6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe ff89 	bl	8001dd4 <HAL_GetTick>
 8002ec2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe ff84 	bl	8001dd4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e2e4      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 8002ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0xb44>
 8002f46:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <HAL_RCC_OscConfig+0xb40>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	e017      	b.n	8002f7c <HAL_RCC_OscConfig+0xb6c>
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4bb3      	ldr	r3, [pc, #716]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f80:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f84:	2102      	movs	r1, #2
 8002f86:	6011      	str	r1, [r2, #0]
 8002f88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	fa92 f1a2 	rbit	r1, r2
 8002f96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f9a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002f9e:	6011      	str	r1, [r2, #0]
  return result;
 8002fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fa4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d180      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b9e      	ldr	r3, [pc, #632]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a9d      	ldr	r2, [pc, #628]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 825e 	beq.w	80034a8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	f000 821f 	beq.w	8003438 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b02      	cmp	r3, #2
 8003008:	f040 8170 	bne.w	80032ec <HAL_RCC_OscConfig+0xedc>
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003030:	601a      	str	r2, [r3, #0]
  return result;
 8003032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003036:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800303a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe febf 	bl	8001dd4 <HAL_GetTick>
 8003056:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305a:	e009      	b.n	8003070 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe feba 	bl	8001dd4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e21c      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 8003070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003074:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003082:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003094:	601a      	str	r2, [r3, #0]
  return result;
 8003096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800309e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0xcaa>
 80030b4:	4b64      	ldr	r3, [pc, #400]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e027      	b.n	800310a <HAL_RCC_OscConfig+0xcfa>
 80030ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030cc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003100:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800310e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003112:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003116:	6011      	str	r1, [r2, #0]
 8003118:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800311c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	fa92 f1a2 	rbit	r1, r2
 8003126:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800312a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800312e:	6011      	str	r1, [r2, #0]
  return result;
 8003130:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003134:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d182      	bne.n	800305c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003156:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	f023 020f 	bic.w	r2, r3, #15
 800315e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 800316c:	4313      	orrs	r3, r2
 800316e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003170:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a19      	ldr	r1, [r3, #32]
 8003184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	430b      	orrs	r3, r1
 8003192:	492d      	ldr	r1, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031bc:	601a      	str	r2, [r3, #0]
  return result;
 80031be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	2301      	movs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fdf9 	bl	8001dd4 <HAL_GetTick>
 80031e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e6:	e009      	b.n	80031fc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fdf4 	bl	8001dd4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e156      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 80031fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003200:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003220:	601a      	str	r2, [r3, #0]
  return result;
 8003222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003226:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800322a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0xe3c>
 8003240:	4b01      	ldr	r3, [pc, #4]	; (8003248 <HAL_RCC_OscConfig+0xe38>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e02a      	b.n	800329c <HAL_RCC_OscConfig+0xe8c>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003250:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003276:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800327a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <HAL_RCC_OscConfig+0x10a4>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a8:	6011      	str	r1, [r2, #0]
 80032aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fa92 f1a2 	rbit	r1, r2
 80032b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032bc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80032c0:	6011      	str	r1, [r2, #0]
  return result;
 80032c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032c6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f042 0220 	orr.w	r2, r2, #32
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f002 021f 	and.w	r2, r2, #31
 80032dc:	2101      	movs	r1, #1
 80032de:	fa01 f202 	lsl.w	r2, r1, r2
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f43f af7f 	beq.w	80031e8 <HAL_RCC_OscConfig+0xdd8>
 80032ea:	e0dd      	b.n	80034a8 <HAL_RCC_OscConfig+0x1098>
 80032ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003310:	601a      	str	r2, [r3, #0]
  return result;
 8003312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003316:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800331a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	2300      	movs	r3, #0
 8003330:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fd4f 	bl	8001dd4 <HAL_GetTick>
 8003336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333a:	e009      	b.n	8003350 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fd4a 	bl	8001dd4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0ac      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
 8003350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003354:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003362:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003370:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003374:	601a      	str	r2, [r3, #0]
  return result;
 8003376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800337e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_RCC_OscConfig+0xf8a>
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_OscConfig+0x10a4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	e027      	b.n	80033ea <HAL_RCC_OscConfig+0xfda>
 800339a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x10a4>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f6:	6011      	str	r1, [r2, #0]
 80033f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	fa92 f1a2 	rbit	r1, r2
 8003406:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800340a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800340e:	6011      	str	r1, [r2, #0]
  return result;
 8003410:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003414:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d182      	bne.n	800333c <HAL_RCC_OscConfig+0xf2c>
 8003436:	e037      	b.n	80034a8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e02e      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x10a4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_RCC_OscConfig+0x10a4>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800345c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003460:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d117      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003474:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003478:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800347c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003480:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003488:	429a      	cmp	r2, r3
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800348c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003498:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b09e      	sub	sp, #120	; 0x78
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e162      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b90      	ldr	r3, [pc, #576]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b8d      	ldr	r3, [pc, #564]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	498b      	ldr	r1, [pc, #556]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b89      	ldr	r3, [pc, #548]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e14a      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b82      	ldr	r3, [pc, #520]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	497f      	ldr	r1, [pc, #508]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80dc 	beq.w	80036e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d13c      	bne.n	80035ae <HAL_RCC_ClockConfig+0xf6>
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_RCC_ClockConfig+0xa6>
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e00f      	b.n	800357e <HAL_RCC_ClockConfig+0xc6>
 800355e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003562:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
 800356c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003570:	663b      	str	r3, [r7, #96]	; 0x60
 8003572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800357a:	4b67      	ldr	r3, [pc, #412]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003582:	65ba      	str	r2, [r7, #88]	; 0x58
 8003584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800358c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800358e:	fab2 f282 	clz	r2, r2
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f042 0220 	orr.w	r2, r2, #32
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f002 021f 	and.w	r2, r2, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d17b      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0f3      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d13c      	bne.n	8003630 <HAL_RCC_ClockConfig+0x178>
 80035b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x128>
 80035da:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	e00f      	b.n	8003600 <HAL_RCC_ClockConfig+0x148>
 80035e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
 80035f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003604:	63ba      	str	r2, [r7, #56]	; 0x38
 8003606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003608:	fa92 f2a2 	rbit	r2, r2
 800360c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800360e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f042 0220 	orr.w	r2, r2, #32
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d13a      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b2      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
 8003630:	2302      	movs	r3, #2
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_RCC_ClockConfig+0x1a0>
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e00d      	b.n	8003674 <HAL_RCC_ClockConfig+0x1bc>
 8003658:	2302      	movs	r3, #2
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	2302      	movs	r3, #2
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2202      	movs	r2, #2
 8003676:	61ba      	str	r2, [r7, #24]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	fa92 f2a2 	rbit	r2, r2
 800367e:	617a      	str	r2, [r7, #20]
  return result;
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0220 	orr.w	r2, r2, #32
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e079      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	491a      	ldr	r1, [pc, #104]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fb8e 	bl	8001dd4 <HAL_GetTick>
 80036b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fe fb8a 	bl	8001dd4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e061      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_ClockConfig+0x260>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d214      	bcs.n	800371c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4906      	ldr	r1, [pc, #24]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_ClockConfig+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e040      	b.n	8003796 <HAL_RCC_ClockConfig+0x2de>
 8003714:	40022000 	.word	0x40022000
 8003718:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800375a:	f000 f829 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800375e:	4601      	mov	r1, r0
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003768:	22f0      	movs	r2, #240	; 0xf0
 800376a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	60fa      	str	r2, [r7, #12]
  return result;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	40d3      	lsrs	r3, r2
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	fa21 f303 	lsr.w	r3, r1, r3
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCC_ClockConfig+0x2f4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe faf0 	bl	8001d74 <HAL_InitTick>
  
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3778      	adds	r7, #120	; 0x78
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	0800961c 	.word	0x0800961c
 80037a8:	2000000c 	.word	0x2000000c
 80037ac:	20000010 	.word	0x20000010

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b08b      	sub	sp, #44	; 0x2c
 80037b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d002      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x30>
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x36>
 80037de:	e03f      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037e2:	623b      	str	r3, [r7, #32]
      break;
 80037e4:	e03f      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	fa92 f2a2 	rbit	r2, r2
 80037f8:	607a      	str	r2, [r7, #4]
  return result;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	fab2 f282 	clz	r2, r2
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	40d3      	lsrs	r3, r2
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	220f      	movs	r2, #15
 8003814:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	60fa      	str	r2, [r7, #12]
  return result;
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	40d3      	lsrs	r3, r2
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <HAL_RCC_GetSysClockFreq+0xd0>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	e007      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	623b      	str	r3, [r7, #32]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003862:	623b      	str	r3, [r7, #32]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6a3b      	ldr	r3, [r7, #32]
}
 8003868:	4618      	mov	r0, r3
 800386a:	372c      	adds	r7, #44	; 0x2c
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40021000 	.word	0x40021000
 8003878:	007a1200 	.word	0x007a1200
 800387c:	08009634 	.word	0x08009634
 8003880:	08009644 	.word	0x08009644

08003884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	2000000c 	.word	0x2000000c

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038a2:	f7ff ffef 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a6:	4601      	mov	r1, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	603a      	str	r2, [r7, #0]
  return result;
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	40d3      	lsrs	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800962c 	.word	0x0800962c

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038e6:	f7ff ffcd 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038ea:	4601      	mov	r1, r0
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	603a      	str	r2, [r7, #0]
  return result;
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x40>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	0800962c 	.word	0x0800962c

08003924 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b092      	sub	sp, #72	; 0x48
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80d4 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003948:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10e      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	61d3      	str	r3, [r2, #28]
 8003960:	4b48      	ldr	r3, [pc, #288]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fe fa23 	bl	8001dd4 <HAL_GetTick>
 800398e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe fa1f 	bl	8001dd4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1d6      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8084 	beq.w	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d07c      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	461a      	mov	r2, r3
 80039fa:	2301      	movs	r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04b      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fe f9cf 	bl	8001dd4 <HAL_GetTick>
 8003a36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe f9cb 	bl	8001dd4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e180      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	61fb      	str	r3, [r7, #28]
  return result;
 8003a68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d108      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a7e:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	e00d      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	10908100 	.word	0x10908100
 8003a90:	2302      	movs	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	4b9a      	ldr	r3, [pc, #616]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	613a      	str	r2, [r7, #16]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	fa92 f2a2 	rbit	r2, r2
 8003aaa:	60fa      	str	r2, [r7, #12]
  return result;
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	fab2 f282 	clz	r2, r2
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f002 021f 	and.w	r2, r2, #31
 8003abe:	2101      	movs	r1, #1
 8003ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0b7      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003aca:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	498c      	ldr	r1, [pc, #560]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003adc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae4:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4a87      	ldr	r2, [pc, #540]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003afc:	4b82      	ldr	r3, [pc, #520]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f023 0203 	bic.w	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	497f      	ldr	r1, [pc, #508]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1a:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4978      	ldr	r1, [pc, #480]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b38:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4970      	ldr	r1, [pc, #448]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b56:	4b6c      	ldr	r3, [pc, #432]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f023 0210 	bic.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4969      	ldr	r1, [pc, #420]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b74:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	4961      	ldr	r1, [pc, #388]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b92:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f023 0220 	bic.w	r2, r3, #32
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	495a      	ldr	r1, [pc, #360]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb0:	4b55      	ldr	r3, [pc, #340]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	4952      	ldr	r1, [pc, #328]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bce:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	494b      	ldr	r1, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bec:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4943      	ldr	r1, [pc, #268]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	493c      	ldr	r1, [pc, #240]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	492d      	ldr	r1, [pc, #180]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	4925      	ldr	r1, [pc, #148]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	491e      	ldr	r1, [pc, #120]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	490f      	ldr	r1, [pc, #60]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cfa:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0e:	4913      	ldr	r1, [pc, #76]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	490b      	ldr	r1, [pc, #44]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3748      	adds	r7, #72	; 0x48
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e040      	b.n	8003df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fd2a 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fbbc 	bl	800451c <UART_SetConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e022      	b.n	8003df4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fd84 	bl	80048c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fe0b 	bl	8004a08 <UART_CheckIdleState>
 8003df2:	4603      	mov	r3, r0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d178      	bne.n	8003f06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_Transmit+0x24>
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e071      	b.n	8003f08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e32:	f7fd ffcf 	bl	8001dd4 <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d108      	bne.n	8003e64 <HAL_UART_Transmit+0x68>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e003      	b.n	8003e6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e6c:	e030      	b.n	8003ed0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fe6d 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e03c      	b.n	8003f08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	881a      	ldrh	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e008      	b.n	8003ebe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1c8      	bne.n	8003e6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fe36 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e005      	b.n	8003f08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0ba      	sub	sp, #232	; 0xe8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f3e:	4013      	ands	r3, r2
 8003f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 82ab 	beq.w	80044c4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
      }
      return;
 8003f76:	e2a5      	b.n	80044c4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8117 	beq.w	80041b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_UART_IRQHandler+0x298>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 810a 	beq.w	80041b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_UART_IRQHandler+0xbc>
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_UART_IRQHandler+0xec>
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HAL_UART_IRQHandler+0x11c>
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2204      	movs	r2, #4
 800401a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2208      	movs	r2, #8
 8004056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x18a>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8211 	beq.w	80044c8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04f      	beq.n	8004192 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fd97 	bl	8004c26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d141      	bne.n	800418a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800411c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800413e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800414a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	2b00      	cmp	r3, #0
 8004158:	d013      	beq.n	8004182 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <HAL_UART_IRQHandler+0x29c>)
 8004160:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd ff8a 	bl	8002080 <HAL_DMA_Abort_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d017      	beq.n	80041a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	e00f      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9b4 	bl	80044f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00b      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9b0 	bl	80044f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e007      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9ac 	bl	80044f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80041a0:	e192      	b.n	80044c8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a2:	bf00      	nop
    return;
 80041a4:	e190      	b.n	80044c8 <HAL_UART_IRQHandler+0x5b8>
 80041a6:	bf00      	nop
 80041a8:	04000120 	.word	0x04000120
 80041ac:	08004cef 	.word	0x08004cef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	f040 814b 	bne.w	8004450 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8144 	beq.w	8004450 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 813d 	beq.w	8004450 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	f040 80b5 	bne.w	8004358 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8164 	beq.w	80044cc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420e:	429a      	cmp	r2, r3
 8004210:	f080 815c 	bcs.w	80044cc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800421a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b20      	cmp	r3, #32
 8004226:	f000 8086 	beq.w	8004336 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800423e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004258:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800426c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1da      	bne.n	800422a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004298:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800429c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e1      	bne.n	8004274 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e3      	bne.n	80042b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004318:	65bb      	str	r3, [r7, #88]	; 0x58
 800431a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e4      	bne.n	80042f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fe6c 	bl	800200e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004348:	b29b      	uxth	r3, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8d7 	bl	8004504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004356:	e0b9      	b.n	80044cc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80ab 	beq.w	80044d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800437a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a6 	beq.w	80044d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043a6:	647b      	str	r3, [r7, #68]	; 0x44
 80043a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043de:	633a      	str	r2, [r7, #48]	; 0x30
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60fb      	str	r3, [r7, #12]
   return(result);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0310 	bic.w	r3, r3, #16
 800441a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	617b      	str	r3, [r7, #20]
   return(result);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e4      	bne.n	8004406 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f85b 	bl	8004504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800444e:	e03f      	b.n	80044d0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <HAL_UART_IRQHandler+0x56a>
 800445c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fc7b 	bl	8004d6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004478:	e02d      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00e      	beq.n	80044a4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01c      	beq.n	80044d4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
    }
    return;
 80044a2:	e017      	b.n	80044d4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d012      	beq.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
 80044b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00c      	beq.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fc2c 	bl	8004d1a <UART_EndTransmit_IT>
    return;
 80044c2:	e008      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044c4:	bf00      	nop
 80044c6:	e006      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80044c8:	bf00      	nop
 80044ca:	e004      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044cc:	bf00      	nop
 80044ce:	e002      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044d0:	bf00      	nop
 80044d2:	e000      	b.n	80044d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80044d4:	bf00      	nop
  }

}
 80044d6:	37e8      	adds	r7, #232	; 0xe8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b92      	ldr	r3, [pc, #584]	; (8004790 <UART_SetConfig+0x274>)
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	430b      	orrs	r3, r1
 8004552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a80      	ldr	r2, [pc, #512]	; (8004794 <UART_SetConfig+0x278>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d120      	bne.n	80045da <UART_SetConfig+0xbe>
 8004598:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <UART_SetConfig+0x27c>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d817      	bhi.n	80045d4 <UART_SetConfig+0xb8>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x90>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045cf 	.word	0x080045cf
 80045b8:	080045c3 	.word	0x080045c3
 80045bc:	2301      	movs	r3, #1
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e0b5      	b.n	800472e <UART_SetConfig+0x212>
 80045c2:	2302      	movs	r3, #2
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e0b2      	b.n	800472e <UART_SetConfig+0x212>
 80045c8:	2304      	movs	r3, #4
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e0af      	b.n	800472e <UART_SetConfig+0x212>
 80045ce:	2308      	movs	r3, #8
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e0ac      	b.n	800472e <UART_SetConfig+0x212>
 80045d4:	2310      	movs	r3, #16
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e0a9      	b.n	800472e <UART_SetConfig+0x212>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6f      	ldr	r2, [pc, #444]	; (800479c <UART_SetConfig+0x280>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d124      	bne.n	800462e <UART_SetConfig+0x112>
 80045e4:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <UART_SetConfig+0x27c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f0:	d011      	beq.n	8004616 <UART_SetConfig+0xfa>
 80045f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f6:	d817      	bhi.n	8004628 <UART_SetConfig+0x10c>
 80045f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045fc:	d011      	beq.n	8004622 <UART_SetConfig+0x106>
 80045fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004602:	d811      	bhi.n	8004628 <UART_SetConfig+0x10c>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <UART_SetConfig+0xf4>
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460c:	d006      	beq.n	800461c <UART_SetConfig+0x100>
 800460e:	e00b      	b.n	8004628 <UART_SetConfig+0x10c>
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e08b      	b.n	800472e <UART_SetConfig+0x212>
 8004616:	2302      	movs	r3, #2
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e088      	b.n	800472e <UART_SetConfig+0x212>
 800461c:	2304      	movs	r3, #4
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e085      	b.n	800472e <UART_SetConfig+0x212>
 8004622:	2308      	movs	r3, #8
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e082      	b.n	800472e <UART_SetConfig+0x212>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e07f      	b.n	800472e <UART_SetConfig+0x212>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5b      	ldr	r2, [pc, #364]	; (80047a0 <UART_SetConfig+0x284>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d124      	bne.n	8004682 <UART_SetConfig+0x166>
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <UART_SetConfig+0x27c>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004640:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004644:	d011      	beq.n	800466a <UART_SetConfig+0x14e>
 8004646:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800464a:	d817      	bhi.n	800467c <UART_SetConfig+0x160>
 800464c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004650:	d011      	beq.n	8004676 <UART_SetConfig+0x15a>
 8004652:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004656:	d811      	bhi.n	800467c <UART_SetConfig+0x160>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <UART_SetConfig+0x148>
 800465c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004660:	d006      	beq.n	8004670 <UART_SetConfig+0x154>
 8004662:	e00b      	b.n	800467c <UART_SetConfig+0x160>
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e061      	b.n	800472e <UART_SetConfig+0x212>
 800466a:	2302      	movs	r3, #2
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e05e      	b.n	800472e <UART_SetConfig+0x212>
 8004670:	2304      	movs	r3, #4
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e05b      	b.n	800472e <UART_SetConfig+0x212>
 8004676:	2308      	movs	r3, #8
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e058      	b.n	800472e <UART_SetConfig+0x212>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e055      	b.n	800472e <UART_SetConfig+0x212>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a47      	ldr	r2, [pc, #284]	; (80047a4 <UART_SetConfig+0x288>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d124      	bne.n	80046d6 <UART_SetConfig+0x1ba>
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <UART_SetConfig+0x27c>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004698:	d011      	beq.n	80046be <UART_SetConfig+0x1a2>
 800469a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800469e:	d817      	bhi.n	80046d0 <UART_SetConfig+0x1b4>
 80046a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a4:	d011      	beq.n	80046ca <UART_SetConfig+0x1ae>
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046aa:	d811      	bhi.n	80046d0 <UART_SetConfig+0x1b4>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0x19c>
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	d006      	beq.n	80046c4 <UART_SetConfig+0x1a8>
 80046b6:	e00b      	b.n	80046d0 <UART_SetConfig+0x1b4>
 80046b8:	2300      	movs	r3, #0
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e037      	b.n	800472e <UART_SetConfig+0x212>
 80046be:	2302      	movs	r3, #2
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e034      	b.n	800472e <UART_SetConfig+0x212>
 80046c4:	2304      	movs	r3, #4
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e031      	b.n	800472e <UART_SetConfig+0x212>
 80046ca:	2308      	movs	r3, #8
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e02e      	b.n	800472e <UART_SetConfig+0x212>
 80046d0:	2310      	movs	r3, #16
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e02b      	b.n	800472e <UART_SetConfig+0x212>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <UART_SetConfig+0x28c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d124      	bne.n	800472a <UART_SetConfig+0x20e>
 80046e0:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <UART_SetConfig+0x27c>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80046e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ec:	d011      	beq.n	8004712 <UART_SetConfig+0x1f6>
 80046ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f2:	d817      	bhi.n	8004724 <UART_SetConfig+0x208>
 80046f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f8:	d011      	beq.n	800471e <UART_SetConfig+0x202>
 80046fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fe:	d811      	bhi.n	8004724 <UART_SetConfig+0x208>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x1f0>
 8004704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004708:	d006      	beq.n	8004718 <UART_SetConfig+0x1fc>
 800470a:	e00b      	b.n	8004724 <UART_SetConfig+0x208>
 800470c:	2300      	movs	r3, #0
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e00d      	b.n	800472e <UART_SetConfig+0x212>
 8004712:	2302      	movs	r3, #2
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e00a      	b.n	800472e <UART_SetConfig+0x212>
 8004718:	2304      	movs	r3, #4
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e007      	b.n	800472e <UART_SetConfig+0x212>
 800471e:	2308      	movs	r3, #8
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e004      	b.n	800472e <UART_SetConfig+0x212>
 8004724:	2310      	movs	r3, #16
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e001      	b.n	800472e <UART_SetConfig+0x212>
 800472a:	2310      	movs	r3, #16
 800472c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004736:	d16b      	bne.n	8004810 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004738:	7ffb      	ldrb	r3, [r7, #31]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d838      	bhi.n	80047b0 <UART_SetConfig+0x294>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x228>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	080047b1 	.word	0x080047b1
 8004754:	0800477f 	.word	0x0800477f
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047b1 	.word	0x080047b1
 8004760:	080047b1 	.word	0x080047b1
 8004764:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7ff f898 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800476c:	61b8      	str	r0, [r7, #24]
        break;
 800476e:	e024      	b.n	80047ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7ff f8b6 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004774:	61b8      	str	r0, [r7, #24]
        break;
 8004776:	e020      	b.n	80047ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <UART_SetConfig+0x290>)
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e01d      	b.n	80047ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7ff f817 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8004782:	61b8      	str	r0, [r7, #24]
        break;
 8004784:	e019      	b.n	80047ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	61bb      	str	r3, [r7, #24]
        break;
 800478c:	e015      	b.n	80047ba <UART_SetConfig+0x29e>
 800478e:	bf00      	nop
 8004790:	efff69f3 	.word	0xefff69f3
 8004794:	40013800 	.word	0x40013800
 8004798:	40021000 	.word	0x40021000
 800479c:	40004400 	.word	0x40004400
 80047a0:	40004800 	.word	0x40004800
 80047a4:	40004c00 	.word	0x40004c00
 80047a8:	40005000 	.word	0x40005000
 80047ac:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	77bb      	strb	r3, [r7, #30]
        break;
 80047b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d073      	beq.n	80048a8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	005a      	lsls	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	441a      	add	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b0f      	cmp	r3, #15
 80047da:	d916      	bls.n	800480a <UART_SetConfig+0x2ee>
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e2:	d212      	bcs.n	800480a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f023 030f 	bic.w	r3, r3, #15
 80047ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	89fb      	ldrh	r3, [r7, #14]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	89fa      	ldrh	r2, [r7, #14]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e04e      	b.n	80048a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	77bb      	strb	r3, [r7, #30]
 800480e:	e04b      	b.n	80048a8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d827      	bhi.n	8004866 <UART_SetConfig+0x34a>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x300>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff f82c 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004844:	61b8      	str	r0, [r7, #24]
        break;
 8004846:	e013      	b.n	8004870 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7ff f84a 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 800484c:	61b8      	str	r0, [r7, #24]
        break;
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <UART_SetConfig+0x3a4>)
 8004852:	61bb      	str	r3, [r7, #24]
        break;
 8004854:	e00c      	b.n	8004870 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe ffab 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800485a:	61b8      	str	r0, [r7, #24]
        break;
 800485c:	e008      	b.n	8004870 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	61bb      	str	r3, [r7, #24]
        break;
 8004864:	e004      	b.n	8004870 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	77bb      	strb	r3, [r7, #30]
        break;
 800486e:	bf00      	nop
    }

    if (pclk != 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d018      	beq.n	80048a8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	085a      	lsrs	r2, r3, #1
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	441a      	add	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b0f      	cmp	r3, #15
 800488e:	d909      	bls.n	80048a4 <UART_SetConfig+0x388>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d205      	bcs.n	80048a4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e001      	b.n	80048a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	007a1200 	.word	0x007a1200

080048c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01a      	beq.n	80049da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	d10a      	bne.n	80049da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b098      	sub	sp, #96	; 0x60
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a18:	f7fd f9dc 	bl	8001dd4 <HAL_GetTick>
 8004a1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d12e      	bne.n	8004a8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f88c 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d021      	beq.n	8004a8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e062      	b.n	8004b50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d149      	bne.n	8004b2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f856 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d03c      	beq.n	8004b2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b04:	61fa      	str	r2, [r7, #28]
 8004b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	617b      	str	r3, [r7, #20]
   return(result);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e011      	b.n	8004b50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3758      	adds	r7, #88	; 0x58
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	e049      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d045      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fd f92f 	bl	8001dd4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e048      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d031      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d110      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2208      	movs	r2, #8
 8004bae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f838 	bl	8004c26 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e029      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd8:	d111      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f81e 	bl	8004c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00f      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0a6      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b095      	sub	sp, #84	; 0x54
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d118      	bne.n	8004cce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ce2:	bf00      	nop
 8004ce4:	3754      	adds	r7, #84	; 0x54
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fbef 	bl	80044f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e6      	bne.n	8004d22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fbbb 	bl	80044dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <rand>:
 8004d84:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <rand+0x5c>)
 8004d86:	b510      	push	{r4, lr}
 8004d88:	681c      	ldr	r4, [r3, #0]
 8004d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8c:	b9b3      	cbnz	r3, 8004dbc <rand+0x38>
 8004d8e:	2018      	movs	r0, #24
 8004d90:	f001 ff3c 	bl	8006c0c <malloc>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6320      	str	r0, [r4, #48]	; 0x30
 8004d98:	b920      	cbnz	r0, 8004da4 <rand+0x20>
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <rand+0x60>)
 8004d9c:	4812      	ldr	r0, [pc, #72]	; (8004de8 <rand+0x64>)
 8004d9e:	2152      	movs	r1, #82	; 0x52
 8004da0:	f001 f850 	bl	8005e44 <__assert_func>
 8004da4:	4911      	ldr	r1, [pc, #68]	; (8004dec <rand+0x68>)
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <rand+0x6c>)
 8004da8:	e9c0 1300 	strd	r1, r3, [r0]
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <rand+0x70>)
 8004dae:	6083      	str	r3, [r0, #8]
 8004db0:	230b      	movs	r3, #11
 8004db2:	8183      	strh	r3, [r0, #12]
 8004db4:	2100      	movs	r1, #0
 8004db6:	2001      	movs	r0, #1
 8004db8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004dbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004dbe:	480e      	ldr	r0, [pc, #56]	; (8004df8 <rand+0x74>)
 8004dc0:	690b      	ldr	r3, [r1, #16]
 8004dc2:	694c      	ldr	r4, [r1, #20]
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <rand+0x78>)
 8004dc6:	4358      	muls	r0, r3
 8004dc8:	fb02 0004 	mla	r0, r2, r4, r0
 8004dcc:	fba3 3202 	umull	r3, r2, r3, r2
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	eb40 0002 	adc.w	r0, r0, r2
 8004dd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004dda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004dde:	bd10      	pop	{r4, pc}
 8004de0:	20000070 	.word	0x20000070
 8004de4:	08009654 	.word	0x08009654
 8004de8:	0800966b 	.word	0x0800966b
 8004dec:	abcd330e 	.word	0xabcd330e
 8004df0:	e66d1234 	.word	0xe66d1234
 8004df4:	0005deec 	.word	0x0005deec
 8004df8:	5851f42d 	.word	0x5851f42d
 8004dfc:	4c957f2d 	.word	0x4c957f2d

08004e00 <__cvt>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	ec55 4b10 	vmov	r4, r5, d0
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	460e      	mov	r6, r1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	462b      	mov	r3, r5
 8004e10:	bfbb      	ittet	lt
 8004e12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e16:	461d      	movlt	r5, r3
 8004e18:	2300      	movge	r3, #0
 8004e1a:	232d      	movlt	r3, #45	; 0x2d
 8004e1c:	700b      	strb	r3, [r1, #0]
 8004e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e24:	4691      	mov	r9, r2
 8004e26:	f023 0820 	bic.w	r8, r3, #32
 8004e2a:	bfbc      	itt	lt
 8004e2c:	4622      	movlt	r2, r4
 8004e2e:	4614      	movlt	r4, r2
 8004e30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e34:	d005      	beq.n	8004e42 <__cvt+0x42>
 8004e36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e3a:	d100      	bne.n	8004e3e <__cvt+0x3e>
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	2102      	movs	r1, #2
 8004e40:	e000      	b.n	8004e44 <__cvt+0x44>
 8004e42:	2103      	movs	r1, #3
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	ab02      	add	r3, sp, #8
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	ec45 4b10 	vmov	d0, r4, r5
 8004e50:	4653      	mov	r3, sl
 8004e52:	4632      	mov	r2, r6
 8004e54:	f001 f89c 	bl	8005f90 <_dtoa_r>
 8004e58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	d102      	bne.n	8004e66 <__cvt+0x66>
 8004e60:	f019 0f01 	tst.w	r9, #1
 8004e64:	d022      	beq.n	8004eac <__cvt+0xac>
 8004e66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e6a:	eb07 0906 	add.w	r9, r7, r6
 8004e6e:	d110      	bne.n	8004e92 <__cvt+0x92>
 8004e70:	783b      	ldrb	r3, [r7, #0]
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d10a      	bne.n	8004e8c <__cvt+0x8c>
 8004e76:	2200      	movs	r2, #0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e82:	b918      	cbnz	r0, 8004e8c <__cvt+0x8c>
 8004e84:	f1c6 0601 	rsb	r6, r6, #1
 8004e88:	f8ca 6000 	str.w	r6, [sl]
 8004e8c:	f8da 3000 	ldr.w	r3, [sl]
 8004e90:	4499      	add	r9, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	2300      	movs	r3, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fe1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e9e:	b108      	cbz	r0, 8004ea4 <__cvt+0xa4>
 8004ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ea4:	2230      	movs	r2, #48	; 0x30
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	454b      	cmp	r3, r9
 8004eaa:	d307      	bcc.n	8004ebc <__cvt+0xbc>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb0:	1bdb      	subs	r3, r3, r7
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	b004      	add	sp, #16
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e7f0      	b.n	8004ea6 <__cvt+0xa6>

08004ec4 <__exponent>:
 8004ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	bfb8      	it	lt
 8004ecc:	4249      	neglt	r1, r1
 8004ece:	f803 2b02 	strb.w	r2, [r3], #2
 8004ed2:	bfb4      	ite	lt
 8004ed4:	222d      	movlt	r2, #45	; 0x2d
 8004ed6:	222b      	movge	r2, #43	; 0x2b
 8004ed8:	2909      	cmp	r1, #9
 8004eda:	7042      	strb	r2, [r0, #1]
 8004edc:	dd2a      	ble.n	8004f34 <__exponent+0x70>
 8004ede:	f10d 0207 	add.w	r2, sp, #7
 8004ee2:	4617      	mov	r7, r2
 8004ee4:	260a      	movs	r6, #10
 8004ee6:	4694      	mov	ip, r2
 8004ee8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004eec:	fb06 1415 	mls	r4, r6, r5, r1
 8004ef0:	3430      	adds	r4, #48	; 0x30
 8004ef2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	2c63      	cmp	r4, #99	; 0x63
 8004efa:	f102 32ff 	add.w	r2, r2, #4294967295
 8004efe:	4629      	mov	r1, r5
 8004f00:	dcf1      	bgt.n	8004ee6 <__exponent+0x22>
 8004f02:	3130      	adds	r1, #48	; 0x30
 8004f04:	f1ac 0402 	sub.w	r4, ip, #2
 8004f08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f0c:	1c41      	adds	r1, r0, #1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	42ba      	cmp	r2, r7
 8004f12:	d30a      	bcc.n	8004f2a <__exponent+0x66>
 8004f14:	f10d 0209 	add.w	r2, sp, #9
 8004f18:	eba2 020c 	sub.w	r2, r2, ip
 8004f1c:	42bc      	cmp	r4, r7
 8004f1e:	bf88      	it	hi
 8004f20:	2200      	movhi	r2, #0
 8004f22:	4413      	add	r3, r2
 8004f24:	1a18      	subs	r0, r3, r0
 8004f26:	b003      	add	sp, #12
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f32:	e7ed      	b.n	8004f10 <__exponent+0x4c>
 8004f34:	2330      	movs	r3, #48	; 0x30
 8004f36:	3130      	adds	r1, #48	; 0x30
 8004f38:	7083      	strb	r3, [r0, #2]
 8004f3a:	70c1      	strb	r1, [r0, #3]
 8004f3c:	1d03      	adds	r3, r0, #4
 8004f3e:	e7f1      	b.n	8004f24 <__exponent+0x60>

08004f40 <_printf_float>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	ed2d 8b02 	vpush	{d8}
 8004f48:	b08d      	sub	sp, #52	; 0x34
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f50:	4616      	mov	r6, r2
 8004f52:	461f      	mov	r7, r3
 8004f54:	4605      	mov	r5, r0
 8004f56:	f000 fef7 	bl	8005d48 <_localeconv_r>
 8004f5a:	f8d0 a000 	ldr.w	sl, [r0]
 8004f5e:	4650      	mov	r0, sl
 8004f60:	f7fb f98e 	bl	8000280 <strlen>
 8004f64:	2300      	movs	r3, #0
 8004f66:	930a      	str	r3, [sp, #40]	; 0x28
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	9305      	str	r3, [sp, #20]
 8004f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	f103 0208 	add.w	r2, r3, #8
 8004f7e:	f8c8 2000 	str.w	r2, [r8]
 8004f82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f8a:	9307      	str	r3, [sp, #28]
 8004f8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f90:	ee08 0a10 	vmov	s16, r0
 8004f94:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f9c:	4b9e      	ldr	r3, [pc, #632]	; (8005218 <_printf_float+0x2d8>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	f7fb fdcb 	bl	8000b3c <__aeabi_dcmpun>
 8004fa6:	bb88      	cbnz	r0, 800500c <_printf_float+0xcc>
 8004fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fac:	4b9a      	ldr	r3, [pc, #616]	; (8005218 <_printf_float+0x2d8>)
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	f7fb fda5 	bl	8000b00 <__aeabi_dcmple>
 8004fb6:	bb48      	cbnz	r0, 800500c <_printf_float+0xcc>
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	f7fb fd94 	bl	8000aec <__aeabi_dcmplt>
 8004fc4:	b110      	cbz	r0, 8004fcc <_printf_float+0x8c>
 8004fc6:	232d      	movs	r3, #45	; 0x2d
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	4a93      	ldr	r2, [pc, #588]	; (800521c <_printf_float+0x2dc>)
 8004fce:	4b94      	ldr	r3, [pc, #592]	; (8005220 <_printf_float+0x2e0>)
 8004fd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fd4:	bf94      	ite	ls
 8004fd6:	4690      	movls	r8, r2
 8004fd8:	4698      	movhi	r8, r3
 8004fda:	2303      	movs	r3, #3
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	9b05      	ldr	r3, [sp, #20]
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	f04f 0900 	mov.w	r9, #0
 8004fea:	9700      	str	r7, [sp, #0]
 8004fec:	4633      	mov	r3, r6
 8004fee:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 f9da 	bl	80053ac <_printf_common>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f040 8090 	bne.w	800511e <_printf_float+0x1de>
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	b00d      	add	sp, #52	; 0x34
 8005004:	ecbd 8b02 	vpop	{d8}
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fd92 	bl	8000b3c <__aeabi_dcmpun>
 8005018:	b140      	cbz	r0, 800502c <_printf_float+0xec>
 800501a:	464b      	mov	r3, r9
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbc      	itt	lt
 8005020:	232d      	movlt	r3, #45	; 0x2d
 8005022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005026:	4a7f      	ldr	r2, [pc, #508]	; (8005224 <_printf_float+0x2e4>)
 8005028:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <_printf_float+0x2e8>)
 800502a:	e7d1      	b.n	8004fd0 <_printf_float+0x90>
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005032:	9206      	str	r2, [sp, #24]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	d13f      	bne.n	80050b8 <_printf_float+0x178>
 8005038:	2306      	movs	r3, #6
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	9b05      	ldr	r3, [sp, #20]
 800503e:	6861      	ldr	r1, [r4, #4]
 8005040:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005044:	2300      	movs	r3, #0
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	ab0a      	add	r3, sp, #40	; 0x28
 800504a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800504e:	ab09      	add	r3, sp, #36	; 0x24
 8005050:	ec49 8b10 	vmov	d0, r8, r9
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6022      	str	r2, [r4, #0]
 8005058:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fecf 	bl	8004e00 <__cvt>
 8005062:	9b06      	ldr	r3, [sp, #24]
 8005064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005066:	2b47      	cmp	r3, #71	; 0x47
 8005068:	4680      	mov	r8, r0
 800506a:	d108      	bne.n	800507e <_printf_float+0x13e>
 800506c:	1cc8      	adds	r0, r1, #3
 800506e:	db02      	blt.n	8005076 <_printf_float+0x136>
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	4299      	cmp	r1, r3
 8005074:	dd41      	ble.n	80050fa <_printf_float+0x1ba>
 8005076:	f1ab 0302 	sub.w	r3, fp, #2
 800507a:	fa5f fb83 	uxtb.w	fp, r3
 800507e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005082:	d820      	bhi.n	80050c6 <_printf_float+0x186>
 8005084:	3901      	subs	r1, #1
 8005086:	465a      	mov	r2, fp
 8005088:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800508c:	9109      	str	r1, [sp, #36]	; 0x24
 800508e:	f7ff ff19 	bl	8004ec4 <__exponent>
 8005092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005094:	1813      	adds	r3, r2, r0
 8005096:	2a01      	cmp	r2, #1
 8005098:	4681      	mov	r9, r0
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	dc02      	bgt.n	80050a4 <_printf_float+0x164>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	07d2      	lsls	r2, r2, #31
 80050a2:	d501      	bpl.n	80050a8 <_printf_float+0x168>
 80050a4:	3301      	adds	r3, #1
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d09c      	beq.n	8004fea <_printf_float+0xaa>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b6:	e798      	b.n	8004fea <_printf_float+0xaa>
 80050b8:	9a06      	ldr	r2, [sp, #24]
 80050ba:	2a47      	cmp	r2, #71	; 0x47
 80050bc:	d1be      	bne.n	800503c <_printf_float+0xfc>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1bc      	bne.n	800503c <_printf_float+0xfc>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7b9      	b.n	800503a <_printf_float+0xfa>
 80050c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050ca:	d118      	bne.n	80050fe <_printf_float+0x1be>
 80050cc:	2900      	cmp	r1, #0
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	dd0b      	ble.n	80050ea <_printf_float+0x1aa>
 80050d2:	6121      	str	r1, [r4, #16]
 80050d4:	b913      	cbnz	r3, 80050dc <_printf_float+0x19c>
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	07d0      	lsls	r0, r2, #31
 80050da:	d502      	bpl.n	80050e2 <_printf_float+0x1a2>
 80050dc:	3301      	adds	r3, #1
 80050de:	440b      	add	r3, r1
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050e4:	f04f 0900 	mov.w	r9, #0
 80050e8:	e7de      	b.n	80050a8 <_printf_float+0x168>
 80050ea:	b913      	cbnz	r3, 80050f2 <_printf_float+0x1b2>
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	07d2      	lsls	r2, r2, #31
 80050f0:	d501      	bpl.n	80050f6 <_printf_float+0x1b6>
 80050f2:	3302      	adds	r3, #2
 80050f4:	e7f4      	b.n	80050e0 <_printf_float+0x1a0>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7f2      	b.n	80050e0 <_printf_float+0x1a0>
 80050fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005100:	4299      	cmp	r1, r3
 8005102:	db05      	blt.n	8005110 <_printf_float+0x1d0>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	6121      	str	r1, [r4, #16]
 8005108:	07d8      	lsls	r0, r3, #31
 800510a:	d5ea      	bpl.n	80050e2 <_printf_float+0x1a2>
 800510c:	1c4b      	adds	r3, r1, #1
 800510e:	e7e7      	b.n	80050e0 <_printf_float+0x1a0>
 8005110:	2900      	cmp	r1, #0
 8005112:	bfd4      	ite	le
 8005114:	f1c1 0202 	rsble	r2, r1, #2
 8005118:	2201      	movgt	r2, #1
 800511a:	4413      	add	r3, r2
 800511c:	e7e0      	b.n	80050e0 <_printf_float+0x1a0>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	055a      	lsls	r2, r3, #21
 8005122:	d407      	bmi.n	8005134 <_printf_float+0x1f4>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	4642      	mov	r2, r8
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d12c      	bne.n	800518c <_printf_float+0x24c>
 8005132:	e764      	b.n	8004ffe <_printf_float+0xbe>
 8005134:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005138:	f240 80e0 	bls.w	80052fc <_printf_float+0x3bc>
 800513c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	f7fb fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005148:	2800      	cmp	r0, #0
 800514a:	d034      	beq.n	80051b6 <_printf_float+0x276>
 800514c:	4a37      	ldr	r2, [pc, #220]	; (800522c <_printf_float+0x2ec>)
 800514e:	2301      	movs	r3, #1
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f af51 	beq.w	8004ffe <_printf_float+0xbe>
 800515c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005160:	429a      	cmp	r2, r3
 8005162:	db02      	blt.n	800516a <_printf_float+0x22a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07d8      	lsls	r0, r3, #31
 8005168:	d510      	bpl.n	800518c <_printf_float+0x24c>
 800516a:	ee18 3a10 	vmov	r3, s16
 800516e:	4652      	mov	r2, sl
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	f43f af41 	beq.w	8004ffe <_printf_float+0xbe>
 800517c:	f04f 0800 	mov.w	r8, #0
 8005180:	f104 091a 	add.w	r9, r4, #26
 8005184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005186:	3b01      	subs	r3, #1
 8005188:	4543      	cmp	r3, r8
 800518a:	dc09      	bgt.n	80051a0 <_printf_float+0x260>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	079b      	lsls	r3, r3, #30
 8005190:	f100 8107 	bmi.w	80053a2 <_printf_float+0x462>
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005198:	4298      	cmp	r0, r3
 800519a:	bfb8      	it	lt
 800519c:	4618      	movlt	r0, r3
 800519e:	e730      	b.n	8005002 <_printf_float+0xc2>
 80051a0:	2301      	movs	r3, #1
 80051a2:	464a      	mov	r2, r9
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f af27 	beq.w	8004ffe <_printf_float+0xbe>
 80051b0:	f108 0801 	add.w	r8, r8, #1
 80051b4:	e7e6      	b.n	8005184 <_printf_float+0x244>
 80051b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dc39      	bgt.n	8005230 <_printf_float+0x2f0>
 80051bc:	4a1b      	ldr	r2, [pc, #108]	; (800522c <_printf_float+0x2ec>)
 80051be:	2301      	movs	r3, #1
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af19 	beq.w	8004ffe <_printf_float+0xbe>
 80051cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d102      	bne.n	80051da <_printf_float+0x29a>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d5d8      	bpl.n	800518c <_printf_float+0x24c>
 80051da:	ee18 3a10 	vmov	r3, s16
 80051de:	4652      	mov	r2, sl
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f af09 	beq.w	8004ffe <_printf_float+0xbe>
 80051ec:	f04f 0900 	mov.w	r9, #0
 80051f0:	f104 0a1a 	add.w	sl, r4, #26
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	425b      	negs	r3, r3
 80051f8:	454b      	cmp	r3, r9
 80051fa:	dc01      	bgt.n	8005200 <_printf_float+0x2c0>
 80051fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fe:	e792      	b.n	8005126 <_printf_float+0x1e6>
 8005200:	2301      	movs	r3, #1
 8005202:	4652      	mov	r2, sl
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f aef7 	beq.w	8004ffe <_printf_float+0xbe>
 8005210:	f109 0901 	add.w	r9, r9, #1
 8005214:	e7ee      	b.n	80051f4 <_printf_float+0x2b4>
 8005216:	bf00      	nop
 8005218:	7fefffff 	.word	0x7fefffff
 800521c:	080096c3 	.word	0x080096c3
 8005220:	080096c7 	.word	0x080096c7
 8005224:	080096cb 	.word	0x080096cb
 8005228:	080096cf 	.word	0x080096cf
 800522c:	080096d3 	.word	0x080096d3
 8005230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005234:	429a      	cmp	r2, r3
 8005236:	bfa8      	it	ge
 8005238:	461a      	movge	r2, r3
 800523a:	2a00      	cmp	r2, #0
 800523c:	4691      	mov	r9, r2
 800523e:	dc37      	bgt.n	80052b0 <_printf_float+0x370>
 8005240:	f04f 0b00 	mov.w	fp, #0
 8005244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005248:	f104 021a 	add.w	r2, r4, #26
 800524c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	eba3 0309 	sub.w	r3, r3, r9
 8005254:	455b      	cmp	r3, fp
 8005256:	dc33      	bgt.n	80052c0 <_printf_float+0x380>
 8005258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800525c:	429a      	cmp	r2, r3
 800525e:	db3b      	blt.n	80052d8 <_printf_float+0x398>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07da      	lsls	r2, r3, #31
 8005264:	d438      	bmi.n	80052d8 <_printf_float+0x398>
 8005266:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800526a:	eba2 0903 	sub.w	r9, r2, r3
 800526e:	9b05      	ldr	r3, [sp, #20]
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	4591      	cmp	r9, r2
 8005274:	bfa8      	it	ge
 8005276:	4691      	movge	r9, r2
 8005278:	f1b9 0f00 	cmp.w	r9, #0
 800527c:	dc35      	bgt.n	80052ea <_printf_float+0x3aa>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005286:	f104 0a1a 	add.w	sl, r4, #26
 800528a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	eba3 0309 	sub.w	r3, r3, r9
 8005294:	4543      	cmp	r3, r8
 8005296:	f77f af79 	ble.w	800518c <_printf_float+0x24c>
 800529a:	2301      	movs	r3, #1
 800529c:	4652      	mov	r2, sl
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f aeaa 	beq.w	8004ffe <_printf_float+0xbe>
 80052aa:	f108 0801 	add.w	r8, r8, #1
 80052ae:	e7ec      	b.n	800528a <_printf_float+0x34a>
 80052b0:	4613      	mov	r3, r2
 80052b2:	4631      	mov	r1, r6
 80052b4:	4642      	mov	r2, r8
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	d1c0      	bne.n	8005240 <_printf_float+0x300>
 80052be:	e69e      	b.n	8004ffe <_printf_float+0xbe>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4631      	mov	r1, r6
 80052c4:	4628      	mov	r0, r5
 80052c6:	9205      	str	r2, [sp, #20]
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f ae97 	beq.w	8004ffe <_printf_float+0xbe>
 80052d0:	9a05      	ldr	r2, [sp, #20]
 80052d2:	f10b 0b01 	add.w	fp, fp, #1
 80052d6:	e7b9      	b.n	800524c <_printf_float+0x30c>
 80052d8:	ee18 3a10 	vmov	r3, s16
 80052dc:	4652      	mov	r2, sl
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1be      	bne.n	8005266 <_printf_float+0x326>
 80052e8:	e689      	b.n	8004ffe <_printf_float+0xbe>
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	464b      	mov	r3, r9
 80052ee:	4442      	add	r2, r8
 80052f0:	4631      	mov	r1, r6
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b8      	blx	r7
 80052f6:	3001      	adds	r0, #1
 80052f8:	d1c1      	bne.n	800527e <_printf_float+0x33e>
 80052fa:	e680      	b.n	8004ffe <_printf_float+0xbe>
 80052fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fe:	2a01      	cmp	r2, #1
 8005300:	dc01      	bgt.n	8005306 <_printf_float+0x3c6>
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d53a      	bpl.n	800537c <_printf_float+0x43c>
 8005306:	2301      	movs	r3, #1
 8005308:	4642      	mov	r2, r8
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f ae74 	beq.w	8004ffe <_printf_float+0xbe>
 8005316:	ee18 3a10 	vmov	r3, s16
 800531a:	4652      	mov	r2, sl
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae6b 	beq.w	8004ffe <_printf_float+0xbe>
 8005328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005334:	f7fb fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005338:	b9d8      	cbnz	r0, 8005372 <_printf_float+0x432>
 800533a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800533e:	f108 0201 	add.w	r2, r8, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	d10e      	bne.n	800536a <_printf_float+0x42a>
 800534c:	e657      	b.n	8004ffe <_printf_float+0xbe>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae50 	beq.w	8004ffe <_printf_float+0xbe>
 800535e:	f108 0801 	add.w	r8, r8, #1
 8005362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005364:	3b01      	subs	r3, #1
 8005366:	4543      	cmp	r3, r8
 8005368:	dcf1      	bgt.n	800534e <_printf_float+0x40e>
 800536a:	464b      	mov	r3, r9
 800536c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005370:	e6da      	b.n	8005128 <_printf_float+0x1e8>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	f104 0a1a 	add.w	sl, r4, #26
 800537a:	e7f2      	b.n	8005362 <_printf_float+0x422>
 800537c:	2301      	movs	r3, #1
 800537e:	4642      	mov	r2, r8
 8005380:	e7df      	b.n	8005342 <_printf_float+0x402>
 8005382:	2301      	movs	r3, #1
 8005384:	464a      	mov	r2, r9
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae36 	beq.w	8004ffe <_printf_float+0xbe>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	4543      	cmp	r3, r8
 800539e:	dcf0      	bgt.n	8005382 <_printf_float+0x442>
 80053a0:	e6f8      	b.n	8005194 <_printf_float+0x254>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	f104 0919 	add.w	r9, r4, #25
 80053aa:	e7f4      	b.n	8005396 <_printf_float+0x456>

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4699      	mov	r9, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f8:	1e13      	subs	r3, r2, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf02      	ittt	eq
 800541e:	68e5      	ldreq	r5, [r4, #12]
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	1aed      	subeq	r5, r5, r3
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4649      	mov	r1, r9
 8005448:	4638      	mov	r0, r7
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	; 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	47c0      	blx	r8
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005490:	2f78      	cmp	r7, #120	; 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	; 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d4 	beq.w	8005652 <_printf_i+0x1ca>
 80054aa:	2f58      	cmp	r7, #88	; 0x58
 80054ac:	f000 80c0 	beq.w	8005630 <_printf_i+0x1a8>
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	; (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005639 	.word	0x08005639
 80054f8:	08005561 	.word	0x08005561
 80054fc:	080055f3 	.word	0x080055f3
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	0800565b 	.word	0x0800565b
 800550c:	080054b1 	.word	0x080054b1
 8005510:	08005561 	.word	0x08005561
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055fb 	.word	0x080055fb
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	602a      	str	r2, [r5, #0]
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e09f      	b.n	8005674 <_printf_i+0x1ec>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	0607      	lsls	r7, r0, #24
 800553a:	f103 0104 	add.w	r1, r3, #4
 800553e:	6029      	str	r1, [r5, #0]
 8005540:	d501      	bpl.n	8005546 <_printf_i+0xbe>
 8005542:	681e      	ldr	r6, [r3, #0]
 8005544:	e003      	b.n	800554e <_printf_i+0xc6>
 8005546:	0646      	lsls	r6, r0, #25
 8005548:	d5fb      	bpl.n	8005542 <_printf_i+0xba>
 800554a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800554e:	2e00      	cmp	r6, #0
 8005550:	da03      	bge.n	800555a <_printf_i+0xd2>
 8005552:	232d      	movs	r3, #45	; 0x2d
 8005554:	4276      	negs	r6, r6
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555a:	485a      	ldr	r0, [pc, #360]	; (80056c4 <_printf_i+0x23c>)
 800555c:	230a      	movs	r3, #10
 800555e:	e012      	b.n	8005586 <_printf_i+0xfe>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	6820      	ldr	r0, [r4, #0]
 8005564:	1d19      	adds	r1, r3, #4
 8005566:	6029      	str	r1, [r5, #0]
 8005568:	0605      	lsls	r5, r0, #24
 800556a:	d501      	bpl.n	8005570 <_printf_i+0xe8>
 800556c:	681e      	ldr	r6, [r3, #0]
 800556e:	e002      	b.n	8005576 <_printf_i+0xee>
 8005570:	0641      	lsls	r1, r0, #25
 8005572:	d5fb      	bpl.n	800556c <_printf_i+0xe4>
 8005574:	881e      	ldrh	r6, [r3, #0]
 8005576:	4853      	ldr	r0, [pc, #332]	; (80056c4 <_printf_i+0x23c>)
 8005578:	2f6f      	cmp	r7, #111	; 0x6f
 800557a:	bf0c      	ite	eq
 800557c:	2308      	moveq	r3, #8
 800557e:	230a      	movne	r3, #10
 8005580:	2100      	movs	r1, #0
 8005582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005586:	6865      	ldr	r5, [r4, #4]
 8005588:	60a5      	str	r5, [r4, #8]
 800558a:	2d00      	cmp	r5, #0
 800558c:	bfa2      	ittt	ge
 800558e:	6821      	ldrge	r1, [r4, #0]
 8005590:	f021 0104 	bicge.w	r1, r1, #4
 8005594:	6021      	strge	r1, [r4, #0]
 8005596:	b90e      	cbnz	r6, 800559c <_printf_i+0x114>
 8005598:	2d00      	cmp	r5, #0
 800559a:	d04b      	beq.n	8005634 <_printf_i+0x1ac>
 800559c:	4615      	mov	r5, r2
 800559e:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a2:	fb03 6711 	mls	r7, r3, r1, r6
 80055a6:	5dc7      	ldrb	r7, [r0, r7]
 80055a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055ac:	4637      	mov	r7, r6
 80055ae:	42bb      	cmp	r3, r7
 80055b0:	460e      	mov	r6, r1
 80055b2:	d9f4      	bls.n	800559e <_printf_i+0x116>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10b      	bne.n	80055d0 <_printf_i+0x148>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07de      	lsls	r6, r3, #31
 80055bc:	d508      	bpl.n	80055d0 <_printf_i+0x148>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6861      	ldr	r1, [r4, #4]
 80055c2:	4299      	cmp	r1, r3
 80055c4:	bfde      	ittt	le
 80055c6:	2330      	movle	r3, #48	; 0x30
 80055c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d0:	1b52      	subs	r2, r2, r5
 80055d2:	6122      	str	r2, [r4, #16]
 80055d4:	f8cd a000 	str.w	sl, [sp]
 80055d8:	464b      	mov	r3, r9
 80055da:	aa03      	add	r2, sp, #12
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fee4 	bl	80053ac <_printf_common>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d14a      	bne.n	800567e <_printf_i+0x1f6>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	b004      	add	sp, #16
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f043 0320 	orr.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	4833      	ldr	r0, [pc, #204]	; (80056c8 <_printf_i+0x240>)
 80055fc:	2778      	movs	r7, #120	; 0x78
 80055fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6829      	ldr	r1, [r5, #0]
 8005606:	061f      	lsls	r7, r3, #24
 8005608:	f851 6b04 	ldr.w	r6, [r1], #4
 800560c:	d402      	bmi.n	8005614 <_printf_i+0x18c>
 800560e:	065f      	lsls	r7, r3, #25
 8005610:	bf48      	it	mi
 8005612:	b2b6      	uxthmi	r6, r6
 8005614:	07df      	lsls	r7, r3, #31
 8005616:	bf48      	it	mi
 8005618:	f043 0320 	orrmi.w	r3, r3, #32
 800561c:	6029      	str	r1, [r5, #0]
 800561e:	bf48      	it	mi
 8005620:	6023      	strmi	r3, [r4, #0]
 8005622:	b91e      	cbnz	r6, 800562c <_printf_i+0x1a4>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	f023 0320 	bic.w	r3, r3, #32
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	2310      	movs	r3, #16
 800562e:	e7a7      	b.n	8005580 <_printf_i+0xf8>
 8005630:	4824      	ldr	r0, [pc, #144]	; (80056c4 <_printf_i+0x23c>)
 8005632:	e7e4      	b.n	80055fe <_printf_i+0x176>
 8005634:	4615      	mov	r5, r2
 8005636:	e7bd      	b.n	80055b4 <_printf_i+0x12c>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	6826      	ldr	r6, [r4, #0]
 800563c:	6961      	ldr	r1, [r4, #20]
 800563e:	1d18      	adds	r0, r3, #4
 8005640:	6028      	str	r0, [r5, #0]
 8005642:	0635      	lsls	r5, r6, #24
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	d501      	bpl.n	800564c <_printf_i+0x1c4>
 8005648:	6019      	str	r1, [r3, #0]
 800564a:	e002      	b.n	8005652 <_printf_i+0x1ca>
 800564c:	0670      	lsls	r0, r6, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0x1c0>
 8005650:	8019      	strh	r1, [r3, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	4615      	mov	r5, r2
 8005658:	e7bc      	b.n	80055d4 <_printf_i+0x14c>
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	2100      	movs	r1, #0
 8005666:	4628      	mov	r0, r5
 8005668:	f7fa fdba 	bl	80001e0 <memchr>
 800566c:	b108      	cbz	r0, 8005672 <_printf_i+0x1ea>
 800566e:	1b40      	subs	r0, r0, r5
 8005670:	6060      	str	r0, [r4, #4]
 8005672:	6863      	ldr	r3, [r4, #4]
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567c:	e7aa      	b.n	80055d4 <_printf_i+0x14c>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	462a      	mov	r2, r5
 8005682:	4649      	mov	r1, r9
 8005684:	4640      	mov	r0, r8
 8005686:	47d0      	blx	sl
 8005688:	3001      	adds	r0, #1
 800568a:	d0ad      	beq.n	80055e8 <_printf_i+0x160>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	079b      	lsls	r3, r3, #30
 8005690:	d413      	bmi.n	80056ba <_printf_i+0x232>
 8005692:	68e0      	ldr	r0, [r4, #12]
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	4298      	cmp	r0, r3
 8005698:	bfb8      	it	lt
 800569a:	4618      	movlt	r0, r3
 800569c:	e7a6      	b.n	80055ec <_printf_i+0x164>
 800569e:	2301      	movs	r3, #1
 80056a0:	4632      	mov	r2, r6
 80056a2:	4649      	mov	r1, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	47d0      	blx	sl
 80056a8:	3001      	adds	r0, #1
 80056aa:	d09d      	beq.n	80055e8 <_printf_i+0x160>
 80056ac:	3501      	adds	r5, #1
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	9903      	ldr	r1, [sp, #12]
 80056b2:	1a5b      	subs	r3, r3, r1
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dcf2      	bgt.n	800569e <_printf_i+0x216>
 80056b8:	e7eb      	b.n	8005692 <_printf_i+0x20a>
 80056ba:	2500      	movs	r5, #0
 80056bc:	f104 0619 	add.w	r6, r4, #25
 80056c0:	e7f5      	b.n	80056ae <_printf_i+0x226>
 80056c2:	bf00      	nop
 80056c4:	080096d5 	.word	0x080096d5
 80056c8:	080096e6 	.word	0x080096e6

080056cc <_scanf_float>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	b087      	sub	sp, #28
 80056d2:	4617      	mov	r7, r2
 80056d4:	9303      	str	r3, [sp, #12]
 80056d6:	688b      	ldr	r3, [r1, #8]
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056de:	bf83      	ittte	hi
 80056e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056e4:	195b      	addhi	r3, r3, r5
 80056e6:	9302      	strhi	r3, [sp, #8]
 80056e8:	2300      	movls	r3, #0
 80056ea:	bf86      	itte	hi
 80056ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056f0:	608b      	strhi	r3, [r1, #8]
 80056f2:	9302      	strls	r3, [sp, #8]
 80056f4:	680b      	ldr	r3, [r1, #0]
 80056f6:	468b      	mov	fp, r1
 80056f8:	2500      	movs	r5, #0
 80056fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80056fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005702:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005706:	4680      	mov	r8, r0
 8005708:	460c      	mov	r4, r1
 800570a:	465e      	mov	r6, fp
 800570c:	46aa      	mov	sl, r5
 800570e:	46a9      	mov	r9, r5
 8005710:	9501      	str	r5, [sp, #4]
 8005712:	68a2      	ldr	r2, [r4, #8]
 8005714:	b152      	cbz	r2, 800572c <_scanf_float+0x60>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b4e      	cmp	r3, #78	; 0x4e
 800571c:	d864      	bhi.n	80057e8 <_scanf_float+0x11c>
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d83c      	bhi.n	800579c <_scanf_float+0xd0>
 8005722:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005726:	b2c8      	uxtb	r0, r1
 8005728:	280e      	cmp	r0, #14
 800572a:	d93a      	bls.n	80057a2 <_scanf_float+0xd6>
 800572c:	f1b9 0f00 	cmp.w	r9, #0
 8005730:	d003      	beq.n	800573a <_scanf_float+0x6e>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800573e:	f1ba 0f01 	cmp.w	sl, #1
 8005742:	f200 8113 	bhi.w	800596c <_scanf_float+0x2a0>
 8005746:	455e      	cmp	r6, fp
 8005748:	f200 8105 	bhi.w	8005956 <_scanf_float+0x28a>
 800574c:	2501      	movs	r5, #1
 800574e:	4628      	mov	r0, r5
 8005750:	b007      	add	sp, #28
 8005752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005756:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800575a:	2a0d      	cmp	r2, #13
 800575c:	d8e6      	bhi.n	800572c <_scanf_float+0x60>
 800575e:	a101      	add	r1, pc, #4	; (adr r1, 8005764 <_scanf_float+0x98>)
 8005760:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005764:	080058a3 	.word	0x080058a3
 8005768:	0800572d 	.word	0x0800572d
 800576c:	0800572d 	.word	0x0800572d
 8005770:	0800572d 	.word	0x0800572d
 8005774:	08005903 	.word	0x08005903
 8005778:	080058db 	.word	0x080058db
 800577c:	0800572d 	.word	0x0800572d
 8005780:	0800572d 	.word	0x0800572d
 8005784:	080058b1 	.word	0x080058b1
 8005788:	0800572d 	.word	0x0800572d
 800578c:	0800572d 	.word	0x0800572d
 8005790:	0800572d 	.word	0x0800572d
 8005794:	0800572d 	.word	0x0800572d
 8005798:	08005869 	.word	0x08005869
 800579c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80057a0:	e7db      	b.n	800575a <_scanf_float+0x8e>
 80057a2:	290e      	cmp	r1, #14
 80057a4:	d8c2      	bhi.n	800572c <_scanf_float+0x60>
 80057a6:	a001      	add	r0, pc, #4	; (adr r0, 80057ac <_scanf_float+0xe0>)
 80057a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057ac:	0800585b 	.word	0x0800585b
 80057b0:	0800572d 	.word	0x0800572d
 80057b4:	0800585b 	.word	0x0800585b
 80057b8:	080058ef 	.word	0x080058ef
 80057bc:	0800572d 	.word	0x0800572d
 80057c0:	08005809 	.word	0x08005809
 80057c4:	08005845 	.word	0x08005845
 80057c8:	08005845 	.word	0x08005845
 80057cc:	08005845 	.word	0x08005845
 80057d0:	08005845 	.word	0x08005845
 80057d4:	08005845 	.word	0x08005845
 80057d8:	08005845 	.word	0x08005845
 80057dc:	08005845 	.word	0x08005845
 80057e0:	08005845 	.word	0x08005845
 80057e4:	08005845 	.word	0x08005845
 80057e8:	2b6e      	cmp	r3, #110	; 0x6e
 80057ea:	d809      	bhi.n	8005800 <_scanf_float+0x134>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d8b2      	bhi.n	8005756 <_scanf_float+0x8a>
 80057f0:	2b54      	cmp	r3, #84	; 0x54
 80057f2:	d077      	beq.n	80058e4 <_scanf_float+0x218>
 80057f4:	2b59      	cmp	r3, #89	; 0x59
 80057f6:	d199      	bne.n	800572c <_scanf_float+0x60>
 80057f8:	2d07      	cmp	r5, #7
 80057fa:	d197      	bne.n	800572c <_scanf_float+0x60>
 80057fc:	2508      	movs	r5, #8
 80057fe:	e029      	b.n	8005854 <_scanf_float+0x188>
 8005800:	2b74      	cmp	r3, #116	; 0x74
 8005802:	d06f      	beq.n	80058e4 <_scanf_float+0x218>
 8005804:	2b79      	cmp	r3, #121	; 0x79
 8005806:	e7f6      	b.n	80057f6 <_scanf_float+0x12a>
 8005808:	6821      	ldr	r1, [r4, #0]
 800580a:	05c8      	lsls	r0, r1, #23
 800580c:	d51a      	bpl.n	8005844 <_scanf_float+0x178>
 800580e:	9b02      	ldr	r3, [sp, #8]
 8005810:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005814:	6021      	str	r1, [r4, #0]
 8005816:	f109 0901 	add.w	r9, r9, #1
 800581a:	b11b      	cbz	r3, 8005824 <_scanf_float+0x158>
 800581c:	3b01      	subs	r3, #1
 800581e:	3201      	adds	r2, #1
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	60a2      	str	r2, [r4, #8]
 8005824:	68a3      	ldr	r3, [r4, #8]
 8005826:	3b01      	subs	r3, #1
 8005828:	60a3      	str	r3, [r4, #8]
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	3301      	adds	r3, #1
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	f340 8084 	ble.w	8005944 <_scanf_float+0x278>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	e766      	b.n	8005712 <_scanf_float+0x46>
 8005844:	eb1a 0f05 	cmn.w	sl, r5
 8005848:	f47f af70 	bne.w	800572c <_scanf_float+0x60>
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	f806 3b01 	strb.w	r3, [r6], #1
 8005858:	e7e4      	b.n	8005824 <_scanf_float+0x158>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	0610      	lsls	r0, r2, #24
 800585e:	f57f af65 	bpl.w	800572c <_scanf_float+0x60>
 8005862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005866:	e7f4      	b.n	8005852 <_scanf_float+0x186>
 8005868:	f1ba 0f00 	cmp.w	sl, #0
 800586c:	d10e      	bne.n	800588c <_scanf_float+0x1c0>
 800586e:	f1b9 0f00 	cmp.w	r9, #0
 8005872:	d10e      	bne.n	8005892 <_scanf_float+0x1c6>
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800587a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800587e:	d108      	bne.n	8005892 <_scanf_float+0x1c6>
 8005880:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	f04f 0a01 	mov.w	sl, #1
 800588a:	e7e3      	b.n	8005854 <_scanf_float+0x188>
 800588c:	f1ba 0f02 	cmp.w	sl, #2
 8005890:	d055      	beq.n	800593e <_scanf_float+0x272>
 8005892:	2d01      	cmp	r5, #1
 8005894:	d002      	beq.n	800589c <_scanf_float+0x1d0>
 8005896:	2d04      	cmp	r5, #4
 8005898:	f47f af48 	bne.w	800572c <_scanf_float+0x60>
 800589c:	3501      	adds	r5, #1
 800589e:	b2ed      	uxtb	r5, r5
 80058a0:	e7d8      	b.n	8005854 <_scanf_float+0x188>
 80058a2:	f1ba 0f01 	cmp.w	sl, #1
 80058a6:	f47f af41 	bne.w	800572c <_scanf_float+0x60>
 80058aa:	f04f 0a02 	mov.w	sl, #2
 80058ae:	e7d1      	b.n	8005854 <_scanf_float+0x188>
 80058b0:	b97d      	cbnz	r5, 80058d2 <_scanf_float+0x206>
 80058b2:	f1b9 0f00 	cmp.w	r9, #0
 80058b6:	f47f af3c 	bne.w	8005732 <_scanf_float+0x66>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058c4:	f47f af39 	bne.w	800573a <_scanf_float+0x6e>
 80058c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	2501      	movs	r5, #1
 80058d0:	e7c0      	b.n	8005854 <_scanf_float+0x188>
 80058d2:	2d03      	cmp	r5, #3
 80058d4:	d0e2      	beq.n	800589c <_scanf_float+0x1d0>
 80058d6:	2d05      	cmp	r5, #5
 80058d8:	e7de      	b.n	8005898 <_scanf_float+0x1cc>
 80058da:	2d02      	cmp	r5, #2
 80058dc:	f47f af26 	bne.w	800572c <_scanf_float+0x60>
 80058e0:	2503      	movs	r5, #3
 80058e2:	e7b7      	b.n	8005854 <_scanf_float+0x188>
 80058e4:	2d06      	cmp	r5, #6
 80058e6:	f47f af21 	bne.w	800572c <_scanf_float+0x60>
 80058ea:	2507      	movs	r5, #7
 80058ec:	e7b2      	b.n	8005854 <_scanf_float+0x188>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	0591      	lsls	r1, r2, #22
 80058f2:	f57f af1b 	bpl.w	800572c <_scanf_float+0x60>
 80058f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80058fa:	6022      	str	r2, [r4, #0]
 80058fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005900:	e7a8      	b.n	8005854 <_scanf_float+0x188>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005908:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800590c:	d006      	beq.n	800591c <_scanf_float+0x250>
 800590e:	0550      	lsls	r0, r2, #21
 8005910:	f57f af0c 	bpl.w	800572c <_scanf_float+0x60>
 8005914:	f1b9 0f00 	cmp.w	r9, #0
 8005918:	f43f af0f 	beq.w	800573a <_scanf_float+0x6e>
 800591c:	0591      	lsls	r1, r2, #22
 800591e:	bf58      	it	pl
 8005920:	9901      	ldrpl	r1, [sp, #4]
 8005922:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005926:	bf58      	it	pl
 8005928:	eba9 0101 	subpl.w	r1, r9, r1
 800592c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005930:	bf58      	it	pl
 8005932:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005936:	6022      	str	r2, [r4, #0]
 8005938:	f04f 0900 	mov.w	r9, #0
 800593c:	e78a      	b.n	8005854 <_scanf_float+0x188>
 800593e:	f04f 0a03 	mov.w	sl, #3
 8005942:	e787      	b.n	8005854 <_scanf_float+0x188>
 8005944:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005948:	4639      	mov	r1, r7
 800594a:	4640      	mov	r0, r8
 800594c:	4798      	blx	r3
 800594e:	2800      	cmp	r0, #0
 8005950:	f43f aedf 	beq.w	8005712 <_scanf_float+0x46>
 8005954:	e6ea      	b.n	800572c <_scanf_float+0x60>
 8005956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800595a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800595e:	463a      	mov	r2, r7
 8005960:	4640      	mov	r0, r8
 8005962:	4798      	blx	r3
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	3b01      	subs	r3, #1
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	e6ec      	b.n	8005746 <_scanf_float+0x7a>
 800596c:	1e6b      	subs	r3, r5, #1
 800596e:	2b06      	cmp	r3, #6
 8005970:	d825      	bhi.n	80059be <_scanf_float+0x2f2>
 8005972:	2d02      	cmp	r5, #2
 8005974:	d836      	bhi.n	80059e4 <_scanf_float+0x318>
 8005976:	455e      	cmp	r6, fp
 8005978:	f67f aee8 	bls.w	800574c <_scanf_float+0x80>
 800597c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005980:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005984:	463a      	mov	r2, r7
 8005986:	4640      	mov	r0, r8
 8005988:	4798      	blx	r3
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	3b01      	subs	r3, #1
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	e7f1      	b.n	8005976 <_scanf_float+0x2aa>
 8005992:	9802      	ldr	r0, [sp, #8]
 8005994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005998:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	463a      	mov	r2, r7
 80059a0:	4640      	mov	r0, r8
 80059a2:	4798      	blx	r3
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ae:	fa5f fa8a 	uxtb.w	sl, sl
 80059b2:	f1ba 0f02 	cmp.w	sl, #2
 80059b6:	d1ec      	bne.n	8005992 <_scanf_float+0x2c6>
 80059b8:	3d03      	subs	r5, #3
 80059ba:	b2ed      	uxtb	r5, r5
 80059bc:	1b76      	subs	r6, r6, r5
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	05da      	lsls	r2, r3, #23
 80059c2:	d52f      	bpl.n	8005a24 <_scanf_float+0x358>
 80059c4:	055b      	lsls	r3, r3, #21
 80059c6:	d510      	bpl.n	80059ea <_scanf_float+0x31e>
 80059c8:	455e      	cmp	r6, fp
 80059ca:	f67f aebf 	bls.w	800574c <_scanf_float+0x80>
 80059ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059d6:	463a      	mov	r2, r7
 80059d8:	4640      	mov	r0, r8
 80059da:	4798      	blx	r3
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	3b01      	subs	r3, #1
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	e7f1      	b.n	80059c8 <_scanf_float+0x2fc>
 80059e4:	46aa      	mov	sl, r5
 80059e6:	9602      	str	r6, [sp, #8]
 80059e8:	e7df      	b.n	80059aa <_scanf_float+0x2de>
 80059ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	2965      	cmp	r1, #101	; 0x65
 80059f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80059f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	d00c      	beq.n	8005a18 <_scanf_float+0x34c>
 80059fe:	2945      	cmp	r1, #69	; 0x45
 8005a00:	d00a      	beq.n	8005a18 <_scanf_float+0x34c>
 8005a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a06:	463a      	mov	r2, r7
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4798      	blx	r3
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	1eb5      	subs	r5, r6, #2
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a1c:	463a      	mov	r2, r7
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4798      	blx	r3
 8005a22:	462e      	mov	r6, r5
 8005a24:	6825      	ldr	r5, [r4, #0]
 8005a26:	f015 0510 	ands.w	r5, r5, #16
 8005a2a:	d158      	bne.n	8005ade <_scanf_float+0x412>
 8005a2c:	7035      	strb	r5, [r6, #0]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a38:	d11c      	bne.n	8005a74 <_scanf_float+0x3a8>
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	454b      	cmp	r3, r9
 8005a3e:	eba3 0209 	sub.w	r2, r3, r9
 8005a42:	d124      	bne.n	8005a8e <_scanf_float+0x3c2>
 8005a44:	2200      	movs	r2, #0
 8005a46:	4659      	mov	r1, fp
 8005a48:	4640      	mov	r0, r8
 8005a4a:	f002 fc4d 	bl	80082e8 <_strtod_r>
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	6821      	ldr	r1, [r4, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f011 0f02 	tst.w	r1, #2
 8005a58:	ec57 6b10 	vmov	r6, r7, d0
 8005a5c:	f103 0204 	add.w	r2, r3, #4
 8005a60:	d020      	beq.n	8005aa4 <_scanf_float+0x3d8>
 8005a62:	9903      	ldr	r1, [sp, #12]
 8005a64:	600a      	str	r2, [r1, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	e9c3 6700 	strd	r6, r7, [r3]
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60e3      	str	r3, [r4, #12]
 8005a72:	e66c      	b.n	800574e <_scanf_float+0x82>
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0e4      	beq.n	8005a44 <_scanf_float+0x378>
 8005a7a:	9905      	ldr	r1, [sp, #20]
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	462a      	mov	r2, r5
 8005a80:	3101      	adds	r1, #1
 8005a82:	4640      	mov	r0, r8
 8005a84:	f002 fcb8 	bl	80083f8 <_strtol_r>
 8005a88:	9b04      	ldr	r3, [sp, #16]
 8005a8a:	9e05      	ldr	r6, [sp, #20]
 8005a8c:	1ac2      	subs	r2, r0, r3
 8005a8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a92:	429e      	cmp	r6, r3
 8005a94:	bf28      	it	cs
 8005a96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a9a:	4912      	ldr	r1, [pc, #72]	; (8005ae4 <_scanf_float+0x418>)
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f8e7 	bl	8005c70 <siprintf>
 8005aa2:	e7cf      	b.n	8005a44 <_scanf_float+0x378>
 8005aa4:	f011 0f04 	tst.w	r1, #4
 8005aa8:	9903      	ldr	r1, [sp, #12]
 8005aaa:	600a      	str	r2, [r1, #0]
 8005aac:	d1db      	bne.n	8005a66 <_scanf_float+0x39a>
 8005aae:	f8d3 8000 	ldr.w	r8, [r3]
 8005ab2:	ee10 2a10 	vmov	r2, s0
 8005ab6:	ee10 0a10 	vmov	r0, s0
 8005aba:	463b      	mov	r3, r7
 8005abc:	4639      	mov	r1, r7
 8005abe:	f7fb f83d 	bl	8000b3c <__aeabi_dcmpun>
 8005ac2:	b128      	cbz	r0, 8005ad0 <_scanf_float+0x404>
 8005ac4:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <_scanf_float+0x41c>)
 8005ac6:	f000 f9b7 	bl	8005e38 <nanf>
 8005aca:	ed88 0a00 	vstr	s0, [r8]
 8005ace:	e7cd      	b.n	8005a6c <_scanf_float+0x3a0>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fb f890 	bl	8000bf8 <__aeabi_d2f>
 8005ad8:	f8c8 0000 	str.w	r0, [r8]
 8005adc:	e7c6      	b.n	8005a6c <_scanf_float+0x3a0>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	e635      	b.n	800574e <_scanf_float+0x82>
 8005ae2:	bf00      	nop
 8005ae4:	080096f7 	.word	0x080096f7
 8005ae8:	08009737 	.word	0x08009737

08005aec <std>:
 8005aec:	2300      	movs	r3, #0
 8005aee:	b510      	push	{r4, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	e9c0 3300 	strd	r3, r3, [r0]
 8005af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afa:	6083      	str	r3, [r0, #8]
 8005afc:	8181      	strh	r1, [r0, #12]
 8005afe:	6643      	str	r3, [r0, #100]	; 0x64
 8005b00:	81c2      	strh	r2, [r0, #14]
 8005b02:	6183      	str	r3, [r0, #24]
 8005b04:	4619      	mov	r1, r3
 8005b06:	2208      	movs	r2, #8
 8005b08:	305c      	adds	r0, #92	; 0x5c
 8005b0a:	f000 f914 	bl	8005d36 <memset>
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <std+0x58>)
 8005b10:	6263      	str	r3, [r4, #36]	; 0x24
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <std+0x5c>)
 8005b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <std+0x60>)
 8005b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <std+0x64>)
 8005b1c:	6323      	str	r3, [r4, #48]	; 0x30
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <std+0x68>)
 8005b20:	6224      	str	r4, [r4, #32]
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d006      	beq.n	8005b34 <std+0x48>
 8005b26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b2a:	4294      	cmp	r4, r2
 8005b2c:	d002      	beq.n	8005b34 <std+0x48>
 8005b2e:	33d0      	adds	r3, #208	; 0xd0
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d105      	bne.n	8005b40 <std+0x54>
 8005b34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3c:	f000 b978 	b.w	8005e30 <__retarget_lock_init_recursive>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	08005cb1 	.word	0x08005cb1
 8005b48:	08005cd3 	.word	0x08005cd3
 8005b4c:	08005d0b 	.word	0x08005d0b
 8005b50:	08005d2f 	.word	0x08005d2f
 8005b54:	2000034c 	.word	0x2000034c

08005b58 <stdio_exit_handler>:
 8005b58:	4a02      	ldr	r2, [pc, #8]	; (8005b64 <stdio_exit_handler+0xc>)
 8005b5a:	4903      	ldr	r1, [pc, #12]	; (8005b68 <stdio_exit_handler+0x10>)
 8005b5c:	4803      	ldr	r0, [pc, #12]	; (8005b6c <stdio_exit_handler+0x14>)
 8005b5e:	f000 b869 	b.w	8005c34 <_fwalk_sglue>
 8005b62:	bf00      	nop
 8005b64:	20000018 	.word	0x20000018
 8005b68:	080087b9 	.word	0x080087b9
 8005b6c:	20000024 	.word	0x20000024

08005b70 <cleanup_stdio>:
 8005b70:	6841      	ldr	r1, [r0, #4]
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <cleanup_stdio+0x34>)
 8005b74:	4299      	cmp	r1, r3
 8005b76:	b510      	push	{r4, lr}
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d001      	beq.n	8005b80 <cleanup_stdio+0x10>
 8005b7c:	f002 fe1c 	bl	80087b8 <_fflush_r>
 8005b80:	68a1      	ldr	r1, [r4, #8]
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <cleanup_stdio+0x38>)
 8005b84:	4299      	cmp	r1, r3
 8005b86:	d002      	beq.n	8005b8e <cleanup_stdio+0x1e>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f002 fe15 	bl	80087b8 <_fflush_r>
 8005b8e:	68e1      	ldr	r1, [r4, #12]
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <cleanup_stdio+0x3c>)
 8005b92:	4299      	cmp	r1, r3
 8005b94:	d004      	beq.n	8005ba0 <cleanup_stdio+0x30>
 8005b96:	4620      	mov	r0, r4
 8005b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9c:	f002 be0c 	b.w	80087b8 <_fflush_r>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000034c 	.word	0x2000034c
 8005ba8:	200003b4 	.word	0x200003b4
 8005bac:	2000041c 	.word	0x2000041c

08005bb0 <global_stdio_init.part.0>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <global_stdio_init.part.0+0x30>)
 8005bb4:	4c0b      	ldr	r4, [pc, #44]	; (8005be4 <global_stdio_init.part.0+0x34>)
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <global_stdio_init.part.0+0x38>)
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	4620      	mov	r0, r4
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	f7ff ff94 	bl	8005aec <std>
 8005bc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2109      	movs	r1, #9
 8005bcc:	f7ff ff8e 	bl	8005aec <std>
 8005bd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bda:	2112      	movs	r1, #18
 8005bdc:	f7ff bf86 	b.w	8005aec <std>
 8005be0:	20000484 	.word	0x20000484
 8005be4:	2000034c 	.word	0x2000034c
 8005be8:	08005b59 	.word	0x08005b59

08005bec <__sfp_lock_acquire>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sfp_lock_acquire+0x8>)
 8005bee:	f000 b920 	b.w	8005e32 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000048d 	.word	0x2000048d

08005bf8 <__sfp_lock_release>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sfp_lock_release+0x8>)
 8005bfa:	f000 b91b 	b.w	8005e34 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	2000048d 	.word	0x2000048d

08005c04 <__sinit>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4604      	mov	r4, r0
 8005c08:	f7ff fff0 	bl	8005bec <__sfp_lock_acquire>
 8005c0c:	6a23      	ldr	r3, [r4, #32]
 8005c0e:	b11b      	cbz	r3, 8005c18 <__sinit+0x14>
 8005c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c14:	f7ff bff0 	b.w	8005bf8 <__sfp_lock_release>
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__sinit+0x28>)
 8005c1a:	6223      	str	r3, [r4, #32]
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__sinit+0x2c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f5      	bne.n	8005c10 <__sinit+0xc>
 8005c24:	f7ff ffc4 	bl	8005bb0 <global_stdio_init.part.0>
 8005c28:	e7f2      	b.n	8005c10 <__sinit+0xc>
 8005c2a:	bf00      	nop
 8005c2c:	08005b71 	.word	0x08005b71
 8005c30:	20000484 	.word	0x20000484

08005c34 <_fwalk_sglue>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4607      	mov	r7, r0
 8005c3a:	4688      	mov	r8, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	2600      	movs	r6, #0
 8005c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c44:	f1b9 0901 	subs.w	r9, r9, #1
 8005c48:	d505      	bpl.n	8005c56 <_fwalk_sglue+0x22>
 8005c4a:	6824      	ldr	r4, [r4, #0]
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	d1f7      	bne.n	8005c40 <_fwalk_sglue+0xc>
 8005c50:	4630      	mov	r0, r6
 8005c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d907      	bls.n	8005c6c <_fwalk_sglue+0x38>
 8005c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c60:	3301      	adds	r3, #1
 8005c62:	d003      	beq.n	8005c6c <_fwalk_sglue+0x38>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c0      	blx	r8
 8005c6a:	4306      	orrs	r6, r0
 8005c6c:	3568      	adds	r5, #104	; 0x68
 8005c6e:	e7e9      	b.n	8005c44 <_fwalk_sglue+0x10>

08005c70 <siprintf>:
 8005c70:	b40e      	push	{r1, r2, r3}
 8005c72:	b500      	push	{lr}
 8005c74:	b09c      	sub	sp, #112	; 0x70
 8005c76:	ab1d      	add	r3, sp, #116	; 0x74
 8005c78:	9002      	str	r0, [sp, #8]
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <siprintf+0x38>)
 8005c82:	9107      	str	r1, [sp, #28]
 8005c84:	9104      	str	r1, [sp, #16]
 8005c86:	4909      	ldr	r1, [pc, #36]	; (8005cac <siprintf+0x3c>)
 8005c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c8c:	9105      	str	r1, [sp, #20]
 8005c8e:	6800      	ldr	r0, [r0, #0]
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	a902      	add	r1, sp, #8
 8005c94:	f002 fc0c 	bl	80084b0 <_svfiprintf_r>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	b01c      	add	sp, #112	; 0x70
 8005ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca4:	b003      	add	sp, #12
 8005ca6:	4770      	bx	lr
 8005ca8:	20000070 	.word	0x20000070
 8005cac:	ffff0208 	.word	0xffff0208

08005cb0 <__sread>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	f000 f86c 	bl	8005d94 <_read_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	bfab      	itete	ge
 8005cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc4:	181b      	addge	r3, r3, r0
 8005cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cca:	bfac      	ite	ge
 8005ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cce:	81a3      	strhlt	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__swrite>:
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	05db      	lsls	r3, r3, #23
 8005cdc:	4605      	mov	r5, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	d505      	bpl.n	8005cf0 <__swrite+0x1e>
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	2200      	movs	r2, #0
 8005cec:	f000 f840 	bl	8005d70 <_lseek_r>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	463b      	mov	r3, r7
 8005d00:	4628      	mov	r0, r5
 8005d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	f000 b857 	b.w	8005db8 <_write_r>

08005d0a <__sseek>:
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 f82d 	bl	8005d70 <_lseek_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	bf15      	itete	ne
 8005d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d26:	81a3      	strheq	r3, [r4, #12]
 8005d28:	bf18      	it	ne
 8005d2a:	81a3      	strhne	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__sclose>:
 8005d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d32:	f000 b80d 	b.w	8005d50 <_close_r>

08005d36 <memset>:
 8005d36:	4402      	add	r2, r0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d100      	bne.n	8005d40 <memset+0xa>
 8005d3e:	4770      	bx	lr
 8005d40:	f803 1b01 	strb.w	r1, [r3], #1
 8005d44:	e7f9      	b.n	8005d3a <memset+0x4>
	...

08005d48 <_localeconv_r>:
 8005d48:	4800      	ldr	r0, [pc, #0]	; (8005d4c <_localeconv_r+0x4>)
 8005d4a:	4770      	bx	lr
 8005d4c:	20000164 	.word	0x20000164

08005d50 <_close_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_close_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fb fe1f 	bl	800199e <_close>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_close_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_close_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000488 	.word	0x20000488

08005d70 <_lseek_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	; (8005d90 <_lseek_r+0x20>)
 8005d74:	4604      	mov	r4, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	4611      	mov	r1, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fb fe34 	bl	80019ec <_lseek>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_lseek_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_lseek_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20000488 	.word	0x20000488

08005d94 <_read_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	; (8005db4 <_read_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fb fdc2 	bl	800192c <_read>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_read_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_read_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000488 	.word	0x20000488

08005db8 <_write_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	; (8005dd8 <_write_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fb fdcd 	bl	8001966 <_write>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_write_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_write_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20000488 	.word	0x20000488

08005ddc <__errno>:
 8005ddc:	4b01      	ldr	r3, [pc, #4]	; (8005de4 <__errno+0x8>)
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000070 	.word	0x20000070

08005de8 <__libc_init_array>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4d0d      	ldr	r5, [pc, #52]	; (8005e20 <__libc_init_array+0x38>)
 8005dec:	4c0d      	ldr	r4, [pc, #52]	; (8005e24 <__libc_init_array+0x3c>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	2600      	movs	r6, #0
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	d109      	bne.n	8005e0c <__libc_init_array+0x24>
 8005df8:	4d0b      	ldr	r5, [pc, #44]	; (8005e28 <__libc_init_array+0x40>)
 8005dfa:	4c0c      	ldr	r4, [pc, #48]	; (8005e2c <__libc_init_array+0x44>)
 8005dfc:	f003 fbd2 	bl	80095a4 <_init>
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	2600      	movs	r6, #0
 8005e06:	42a6      	cmp	r6, r4
 8005e08:	d105      	bne.n	8005e16 <__libc_init_array+0x2e>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e10:	4798      	blx	r3
 8005e12:	3601      	adds	r6, #1
 8005e14:	e7ee      	b.n	8005df4 <__libc_init_array+0xc>
 8005e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1a:	4798      	blx	r3
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	e7f2      	b.n	8005e06 <__libc_init_array+0x1e>
 8005e20:	08009ad4 	.word	0x08009ad4
 8005e24:	08009ad4 	.word	0x08009ad4
 8005e28:	08009ad4 	.word	0x08009ad4
 8005e2c:	08009ad8 	.word	0x08009ad8

08005e30 <__retarget_lock_init_recursive>:
 8005e30:	4770      	bx	lr

08005e32 <__retarget_lock_acquire_recursive>:
 8005e32:	4770      	bx	lr

08005e34 <__retarget_lock_release_recursive>:
 8005e34:	4770      	bx	lr
	...

08005e38 <nanf>:
 8005e38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005e40 <nanf+0x8>
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	7fc00000 	.word	0x7fc00000

08005e44 <__assert_func>:
 8005e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e46:	4614      	mov	r4, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <__assert_func+0x2c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4605      	mov	r5, r0
 8005e50:	68d8      	ldr	r0, [r3, #12]
 8005e52:	b14c      	cbz	r4, 8005e68 <__assert_func+0x24>
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <__assert_func+0x30>)
 8005e56:	9100      	str	r1, [sp, #0]
 8005e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e5c:	4906      	ldr	r1, [pc, #24]	; (8005e78 <__assert_func+0x34>)
 8005e5e:	462b      	mov	r3, r5
 8005e60:	f002 fcd2 	bl	8008808 <fiprintf>
 8005e64:	f002 fd34 	bl	80088d0 <abort>
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <__assert_func+0x38>)
 8005e6a:	461c      	mov	r4, r3
 8005e6c:	e7f3      	b.n	8005e56 <__assert_func+0x12>
 8005e6e:	bf00      	nop
 8005e70:	20000070 	.word	0x20000070
 8005e74:	080096fc 	.word	0x080096fc
 8005e78:	08009709 	.word	0x08009709
 8005e7c:	08009737 	.word	0x08009737

08005e80 <quorem>:
 8005e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	6903      	ldr	r3, [r0, #16]
 8005e86:	690c      	ldr	r4, [r1, #16]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	db7e      	blt.n	8005f8c <quorem+0x10c>
 8005e8e:	3c01      	subs	r4, #1
 8005e90:	f101 0814 	add.w	r8, r1, #20
 8005e94:	f100 0514 	add.w	r5, r0, #20
 8005e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb6:	d331      	bcc.n	8005f1c <quorem+0x9c>
 8005eb8:	f04f 0e00 	mov.w	lr, #0
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	46ac      	mov	ip, r5
 8005ec0:	46f2      	mov	sl, lr
 8005ec2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ec6:	b293      	uxth	r3, r2
 8005ec8:	fb06 e303 	mla	r3, r6, r3, lr
 8005ecc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ed0:	0c1a      	lsrs	r2, r3, #16
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ed8:	f8dc a000 	ldr.w	sl, [ip]
 8005edc:	fa13 f38a 	uxtah	r3, r3, sl
 8005ee0:	fb06 220e 	mla	r2, r6, lr, r2
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eec:	b292      	uxth	r2, r2
 8005eee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ef6:	f8bd 3000 	ldrh.w	r3, [sp]
 8005efa:	4581      	cmp	r9, r0
 8005efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f00:	f84c 3b04 	str.w	r3, [ip], #4
 8005f04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f08:	d2db      	bcs.n	8005ec2 <quorem+0x42>
 8005f0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f0e:	b92b      	cbnz	r3, 8005f1c <quorem+0x9c>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	3b04      	subs	r3, #4
 8005f14:	429d      	cmp	r5, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	d32c      	bcc.n	8005f74 <quorem+0xf4>
 8005f1a:	613c      	str	r4, [r7, #16]
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f001 f9ef 	bl	8007300 <__mcmp>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	db22      	blt.n	8005f6c <quorem+0xec>
 8005f26:	3601      	adds	r6, #1
 8005f28:	4629      	mov	r1, r5
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f30:	f8d1 c000 	ldr.w	ip, [r1]
 8005f34:	b293      	uxth	r3, r2
 8005f36:	1ac3      	subs	r3, r0, r3
 8005f38:	0c12      	lsrs	r2, r2, #16
 8005f3a:	fa13 f38c 	uxtah	r3, r3, ip
 8005f3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4c:	45c1      	cmp	r9, r8
 8005f4e:	f841 3b04 	str.w	r3, [r1], #4
 8005f52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f56:	d2e9      	bcs.n	8005f2c <quorem+0xac>
 8005f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f60:	b922      	cbnz	r2, 8005f6c <quorem+0xec>
 8005f62:	3b04      	subs	r3, #4
 8005f64:	429d      	cmp	r5, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	d30a      	bcc.n	8005f80 <quorem+0x100>
 8005f6a:	613c      	str	r4, [r7, #16]
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	b003      	add	sp, #12
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	3b04      	subs	r3, #4
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d1ce      	bne.n	8005f1a <quorem+0x9a>
 8005f7c:	3c01      	subs	r4, #1
 8005f7e:	e7c9      	b.n	8005f14 <quorem+0x94>
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	3b04      	subs	r3, #4
 8005f84:	2a00      	cmp	r2, #0
 8005f86:	d1f0      	bne.n	8005f6a <quorem+0xea>
 8005f88:	3c01      	subs	r4, #1
 8005f8a:	e7eb      	b.n	8005f64 <quorem+0xe4>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7ee      	b.n	8005f6e <quorem+0xee>

08005f90 <_dtoa_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	ed2d 8b04 	vpush	{d8-d9}
 8005f98:	69c5      	ldr	r5, [r0, #28]
 8005f9a:	b093      	sub	sp, #76	; 0x4c
 8005f9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fa0:	ec57 6b10 	vmov	r6, r7, d0
 8005fa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fa8:	9107      	str	r1, [sp, #28]
 8005faa:	4604      	mov	r4, r0
 8005fac:	920a      	str	r2, [sp, #40]	; 0x28
 8005fae:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb0:	b975      	cbnz	r5, 8005fd0 <_dtoa_r+0x40>
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	f000 fe2a 	bl	8006c0c <malloc>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	61e0      	str	r0, [r4, #28]
 8005fbc:	b920      	cbnz	r0, 8005fc8 <_dtoa_r+0x38>
 8005fbe:	4bae      	ldr	r3, [pc, #696]	; (8006278 <_dtoa_r+0x2e8>)
 8005fc0:	21ef      	movs	r1, #239	; 0xef
 8005fc2:	48ae      	ldr	r0, [pc, #696]	; (800627c <_dtoa_r+0x2ec>)
 8005fc4:	f7ff ff3e 	bl	8005e44 <__assert_func>
 8005fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fcc:	6005      	str	r5, [r0, #0]
 8005fce:	60c5      	str	r5, [r0, #12]
 8005fd0:	69e3      	ldr	r3, [r4, #28]
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	b151      	cbz	r1, 8005fec <_dtoa_r+0x5c>
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	604a      	str	r2, [r1, #4]
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4093      	lsls	r3, r2
 8005fde:	608b      	str	r3, [r1, #8]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 ff07 	bl	8006df4 <_Bfree>
 8005fe6:	69e3      	ldr	r3, [r4, #28]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	1e3b      	subs	r3, r7, #0
 8005fee:	bfbb      	ittet	lt
 8005ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ff4:	9303      	strlt	r3, [sp, #12]
 8005ff6:	2300      	movge	r3, #0
 8005ff8:	2201      	movlt	r2, #1
 8005ffa:	bfac      	ite	ge
 8005ffc:	f8c8 3000 	strge.w	r3, [r8]
 8006000:	f8c8 2000 	strlt.w	r2, [r8]
 8006004:	4b9e      	ldr	r3, [pc, #632]	; (8006280 <_dtoa_r+0x2f0>)
 8006006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800600a:	ea33 0308 	bics.w	r3, r3, r8
 800600e:	d11b      	bne.n	8006048 <_dtoa_r+0xb8>
 8006010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006012:	f242 730f 	movw	r3, #9999	; 0x270f
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800601c:	4333      	orrs	r3, r6
 800601e:	f000 8593 	beq.w	8006b48 <_dtoa_r+0xbb8>
 8006022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006024:	b963      	cbnz	r3, 8006040 <_dtoa_r+0xb0>
 8006026:	4b97      	ldr	r3, [pc, #604]	; (8006284 <_dtoa_r+0x2f4>)
 8006028:	e027      	b.n	800607a <_dtoa_r+0xea>
 800602a:	4b97      	ldr	r3, [pc, #604]	; (8006288 <_dtoa_r+0x2f8>)
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	9800      	ldr	r0, [sp, #0]
 8006036:	b013      	add	sp, #76	; 0x4c
 8006038:	ecbd 8b04 	vpop	{d8-d9}
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	4b90      	ldr	r3, [pc, #576]	; (8006284 <_dtoa_r+0x2f4>)
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	3303      	adds	r3, #3
 8006046:	e7f3      	b.n	8006030 <_dtoa_r+0xa0>
 8006048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800604c:	2200      	movs	r2, #0
 800604e:	ec51 0b17 	vmov	r0, r1, d7
 8006052:	eeb0 8a47 	vmov.f32	s16, s14
 8006056:	eef0 8a67 	vmov.f32	s17, s15
 800605a:	2300      	movs	r3, #0
 800605c:	f7fa fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006060:	4681      	mov	r9, r0
 8006062:	b160      	cbz	r0, 800607e <_dtoa_r+0xee>
 8006064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006066:	2301      	movs	r3, #1
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8568 	beq.w	8006b42 <_dtoa_r+0xbb2>
 8006072:	4b86      	ldr	r3, [pc, #536]	; (800628c <_dtoa_r+0x2fc>)
 8006074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	3b01      	subs	r3, #1
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	e7da      	b.n	8006034 <_dtoa_r+0xa4>
 800607e:	aa10      	add	r2, sp, #64	; 0x40
 8006080:	a911      	add	r1, sp, #68	; 0x44
 8006082:	4620      	mov	r0, r4
 8006084:	eeb0 0a48 	vmov.f32	s0, s16
 8006088:	eef0 0a68 	vmov.f32	s1, s17
 800608c:	f001 fa4e 	bl	800752c <__d2b>
 8006090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006094:	4682      	mov	sl, r0
 8006096:	2d00      	cmp	r5, #0
 8006098:	d07f      	beq.n	800619a <_dtoa_r+0x20a>
 800609a:	ee18 3a90 	vmov	r3, s17
 800609e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060a6:	ec51 0b18 	vmov	r0, r1, d8
 80060aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060b6:	4619      	mov	r1, r3
 80060b8:	2200      	movs	r2, #0
 80060ba:	4b75      	ldr	r3, [pc, #468]	; (8006290 <_dtoa_r+0x300>)
 80060bc:	f7fa f8ec 	bl	8000298 <__aeabi_dsub>
 80060c0:	a367      	add	r3, pc, #412	; (adr r3, 8006260 <_dtoa_r+0x2d0>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fa fa9f 	bl	8000608 <__aeabi_dmul>
 80060ca:	a367      	add	r3, pc, #412	; (adr r3, 8006268 <_dtoa_r+0x2d8>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f8e4 	bl	800029c <__adddf3>
 80060d4:	4606      	mov	r6, r0
 80060d6:	4628      	mov	r0, r5
 80060d8:	460f      	mov	r7, r1
 80060da:	f7fa fa2b 	bl	8000534 <__aeabi_i2d>
 80060de:	a364      	add	r3, pc, #400	; (adr r3, 8006270 <_dtoa_r+0x2e0>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa fa90 	bl	8000608 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	f7fa f8d4 	bl	800029c <__adddf3>
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	f7fa fd36 	bl	8000b68 <__aeabi_d2iz>
 80060fc:	2200      	movs	r2, #0
 80060fe:	4683      	mov	fp, r0
 8006100:	2300      	movs	r3, #0
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa fcf1 	bl	8000aec <__aeabi_dcmplt>
 800610a:	b148      	cbz	r0, 8006120 <_dtoa_r+0x190>
 800610c:	4658      	mov	r0, fp
 800610e:	f7fa fa11 	bl	8000534 <__aeabi_i2d>
 8006112:	4632      	mov	r2, r6
 8006114:	463b      	mov	r3, r7
 8006116:	f7fa fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800611a:	b908      	cbnz	r0, 8006120 <_dtoa_r+0x190>
 800611c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006120:	f1bb 0f16 	cmp.w	fp, #22
 8006124:	d857      	bhi.n	80061d6 <_dtoa_r+0x246>
 8006126:	4b5b      	ldr	r3, [pc, #364]	; (8006294 <_dtoa_r+0x304>)
 8006128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	ec51 0b18 	vmov	r0, r1, d8
 8006134:	f7fa fcda 	bl	8000aec <__aeabi_dcmplt>
 8006138:	2800      	cmp	r0, #0
 800613a:	d04e      	beq.n	80061da <_dtoa_r+0x24a>
 800613c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006140:	2300      	movs	r3, #0
 8006142:	930c      	str	r3, [sp, #48]	; 0x30
 8006144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006146:	1b5b      	subs	r3, r3, r5
 8006148:	1e5a      	subs	r2, r3, #1
 800614a:	bf45      	ittet	mi
 800614c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006150:	9305      	strmi	r3, [sp, #20]
 8006152:	2300      	movpl	r3, #0
 8006154:	2300      	movmi	r3, #0
 8006156:	9206      	str	r2, [sp, #24]
 8006158:	bf54      	ite	pl
 800615a:	9305      	strpl	r3, [sp, #20]
 800615c:	9306      	strmi	r3, [sp, #24]
 800615e:	f1bb 0f00 	cmp.w	fp, #0
 8006162:	db3c      	blt.n	80061de <_dtoa_r+0x24e>
 8006164:	9b06      	ldr	r3, [sp, #24]
 8006166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800616a:	445b      	add	r3, fp
 800616c:	9306      	str	r3, [sp, #24]
 800616e:	2300      	movs	r3, #0
 8006170:	9308      	str	r3, [sp, #32]
 8006172:	9b07      	ldr	r3, [sp, #28]
 8006174:	2b09      	cmp	r3, #9
 8006176:	d868      	bhi.n	800624a <_dtoa_r+0x2ba>
 8006178:	2b05      	cmp	r3, #5
 800617a:	bfc4      	itt	gt
 800617c:	3b04      	subgt	r3, #4
 800617e:	9307      	strgt	r3, [sp, #28]
 8006180:	9b07      	ldr	r3, [sp, #28]
 8006182:	f1a3 0302 	sub.w	r3, r3, #2
 8006186:	bfcc      	ite	gt
 8006188:	2500      	movgt	r5, #0
 800618a:	2501      	movle	r5, #1
 800618c:	2b03      	cmp	r3, #3
 800618e:	f200 8085 	bhi.w	800629c <_dtoa_r+0x30c>
 8006192:	e8df f003 	tbb	[pc, r3]
 8006196:	3b2e      	.short	0x3b2e
 8006198:	5839      	.short	0x5839
 800619a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800619e:	441d      	add	r5, r3
 80061a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	bfc1      	itttt	gt
 80061a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80061b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061b8:	bfd6      	itet	le
 80061ba:	f1c3 0320 	rsble	r3, r3, #32
 80061be:	ea48 0003 	orrgt.w	r0, r8, r3
 80061c2:	fa06 f003 	lslle.w	r0, r6, r3
 80061c6:	f7fa f9a5 	bl	8000514 <__aeabi_ui2d>
 80061ca:	2201      	movs	r2, #1
 80061cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061d0:	3d01      	subs	r5, #1
 80061d2:	920e      	str	r2, [sp, #56]	; 0x38
 80061d4:	e76f      	b.n	80060b6 <_dtoa_r+0x126>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e7b3      	b.n	8006142 <_dtoa_r+0x1b2>
 80061da:	900c      	str	r0, [sp, #48]	; 0x30
 80061dc:	e7b2      	b.n	8006144 <_dtoa_r+0x1b4>
 80061de:	9b05      	ldr	r3, [sp, #20]
 80061e0:	eba3 030b 	sub.w	r3, r3, fp
 80061e4:	9305      	str	r3, [sp, #20]
 80061e6:	f1cb 0300 	rsb	r3, fp, #0
 80061ea:	9308      	str	r3, [sp, #32]
 80061ec:	2300      	movs	r3, #0
 80061ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80061f0:	e7bf      	b.n	8006172 <_dtoa_r+0x1e2>
 80061f2:	2300      	movs	r3, #0
 80061f4:	9309      	str	r3, [sp, #36]	; 0x24
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	dc52      	bgt.n	80062a2 <_dtoa_r+0x312>
 80061fc:	2301      	movs	r3, #1
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	461a      	mov	r2, r3
 8006204:	920a      	str	r2, [sp, #40]	; 0x28
 8006206:	e00b      	b.n	8006220 <_dtoa_r+0x290>
 8006208:	2301      	movs	r3, #1
 800620a:	e7f3      	b.n	80061f4 <_dtoa_r+0x264>
 800620c:	2300      	movs	r3, #0
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006212:	445b      	add	r3, fp
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	3301      	adds	r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	bfb8      	it	lt
 800621e:	2301      	movlt	r3, #1
 8006220:	69e0      	ldr	r0, [r4, #28]
 8006222:	2100      	movs	r1, #0
 8006224:	2204      	movs	r2, #4
 8006226:	f102 0614 	add.w	r6, r2, #20
 800622a:	429e      	cmp	r6, r3
 800622c:	d93d      	bls.n	80062aa <_dtoa_r+0x31a>
 800622e:	6041      	str	r1, [r0, #4]
 8006230:	4620      	mov	r0, r4
 8006232:	f000 fd9f 	bl	8006d74 <_Balloc>
 8006236:	9000      	str	r0, [sp, #0]
 8006238:	2800      	cmp	r0, #0
 800623a:	d139      	bne.n	80062b0 <_dtoa_r+0x320>
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <_dtoa_r+0x308>)
 800623e:	4602      	mov	r2, r0
 8006240:	f240 11af 	movw	r1, #431	; 0x1af
 8006244:	e6bd      	b.n	8005fc2 <_dtoa_r+0x32>
 8006246:	2301      	movs	r3, #1
 8006248:	e7e1      	b.n	800620e <_dtoa_r+0x27e>
 800624a:	2501      	movs	r5, #1
 800624c:	2300      	movs	r3, #0
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	9509      	str	r5, [sp, #36]	; 0x24
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	2200      	movs	r2, #0
 800625c:	2312      	movs	r3, #18
 800625e:	e7d1      	b.n	8006204 <_dtoa_r+0x274>
 8006260:	636f4361 	.word	0x636f4361
 8006264:	3fd287a7 	.word	0x3fd287a7
 8006268:	8b60c8b3 	.word	0x8b60c8b3
 800626c:	3fc68a28 	.word	0x3fc68a28
 8006270:	509f79fb 	.word	0x509f79fb
 8006274:	3fd34413 	.word	0x3fd34413
 8006278:	08009654 	.word	0x08009654
 800627c:	08009745 	.word	0x08009745
 8006280:	7ff00000 	.word	0x7ff00000
 8006284:	08009741 	.word	0x08009741
 8006288:	08009738 	.word	0x08009738
 800628c:	080096d4 	.word	0x080096d4
 8006290:	3ff80000 	.word	0x3ff80000
 8006294:	08009830 	.word	0x08009830
 8006298:	0800979d 	.word	0x0800979d
 800629c:	2301      	movs	r3, #1
 800629e:	9309      	str	r3, [sp, #36]	; 0x24
 80062a0:	e7d7      	b.n	8006252 <_dtoa_r+0x2c2>
 80062a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	e7ba      	b.n	8006220 <_dtoa_r+0x290>
 80062aa:	3101      	adds	r1, #1
 80062ac:	0052      	lsls	r2, r2, #1
 80062ae:	e7ba      	b.n	8006226 <_dtoa_r+0x296>
 80062b0:	69e3      	ldr	r3, [r4, #28]
 80062b2:	9a00      	ldr	r2, [sp, #0]
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	9b04      	ldr	r3, [sp, #16]
 80062b8:	2b0e      	cmp	r3, #14
 80062ba:	f200 80a8 	bhi.w	800640e <_dtoa_r+0x47e>
 80062be:	2d00      	cmp	r5, #0
 80062c0:	f000 80a5 	beq.w	800640e <_dtoa_r+0x47e>
 80062c4:	f1bb 0f00 	cmp.w	fp, #0
 80062c8:	dd38      	ble.n	800633c <_dtoa_r+0x3ac>
 80062ca:	4bc0      	ldr	r3, [pc, #768]	; (80065cc <_dtoa_r+0x63c>)
 80062cc:	f00b 020f 	and.w	r2, fp, #15
 80062d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062e0:	d019      	beq.n	8006316 <_dtoa_r+0x386>
 80062e2:	4bbb      	ldr	r3, [pc, #748]	; (80065d0 <_dtoa_r+0x640>)
 80062e4:	ec51 0b18 	vmov	r0, r1, d8
 80062e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062ec:	f7fa fab6 	bl	800085c <__aeabi_ddiv>
 80062f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f4:	f008 080f 	and.w	r8, r8, #15
 80062f8:	2503      	movs	r5, #3
 80062fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065d0 <_dtoa_r+0x640>
 80062fe:	f1b8 0f00 	cmp.w	r8, #0
 8006302:	d10a      	bne.n	800631a <_dtoa_r+0x38a>
 8006304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006308:	4632      	mov	r2, r6
 800630a:	463b      	mov	r3, r7
 800630c:	f7fa faa6 	bl	800085c <__aeabi_ddiv>
 8006310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006314:	e02b      	b.n	800636e <_dtoa_r+0x3de>
 8006316:	2502      	movs	r5, #2
 8006318:	e7ef      	b.n	80062fa <_dtoa_r+0x36a>
 800631a:	f018 0f01 	tst.w	r8, #1
 800631e:	d008      	beq.n	8006332 <_dtoa_r+0x3a2>
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006328:	f7fa f96e 	bl	8000608 <__aeabi_dmul>
 800632c:	3501      	adds	r5, #1
 800632e:	4606      	mov	r6, r0
 8006330:	460f      	mov	r7, r1
 8006332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006336:	f109 0908 	add.w	r9, r9, #8
 800633a:	e7e0      	b.n	80062fe <_dtoa_r+0x36e>
 800633c:	f000 809f 	beq.w	800647e <_dtoa_r+0x4ee>
 8006340:	f1cb 0600 	rsb	r6, fp, #0
 8006344:	4ba1      	ldr	r3, [pc, #644]	; (80065cc <_dtoa_r+0x63c>)
 8006346:	4fa2      	ldr	r7, [pc, #648]	; (80065d0 <_dtoa_r+0x640>)
 8006348:	f006 020f 	and.w	r2, r6, #15
 800634c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	ec51 0b18 	vmov	r0, r1, d8
 8006358:	f7fa f956 	bl	8000608 <__aeabi_dmul>
 800635c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006360:	1136      	asrs	r6, r6, #4
 8006362:	2300      	movs	r3, #0
 8006364:	2502      	movs	r5, #2
 8006366:	2e00      	cmp	r6, #0
 8006368:	d17e      	bne.n	8006468 <_dtoa_r+0x4d8>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d0      	bne.n	8006310 <_dtoa_r+0x380>
 800636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8084 	beq.w	8006482 <_dtoa_r+0x4f2>
 800637a:	4b96      	ldr	r3, [pc, #600]	; (80065d4 <_dtoa_r+0x644>)
 800637c:	2200      	movs	r2, #0
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7fa fbb3 	bl	8000aec <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d07b      	beq.n	8006482 <_dtoa_r+0x4f2>
 800638a:	9b04      	ldr	r3, [sp, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d078      	beq.n	8006482 <_dtoa_r+0x4f2>
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	dd39      	ble.n	800640a <_dtoa_r+0x47a>
 8006396:	4b90      	ldr	r3, [pc, #576]	; (80065d8 <_dtoa_r+0x648>)
 8006398:	2200      	movs	r2, #0
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7fa f933 	bl	8000608 <__aeabi_dmul>
 80063a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a6:	9e01      	ldr	r6, [sp, #4]
 80063a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063ac:	3501      	adds	r5, #1
 80063ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063b2:	4628      	mov	r0, r5
 80063b4:	f7fa f8be 	bl	8000534 <__aeabi_i2d>
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	f7fa f924 	bl	8000608 <__aeabi_dmul>
 80063c0:	4b86      	ldr	r3, [pc, #536]	; (80065dc <_dtoa_r+0x64c>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	f7f9 ff6a 	bl	800029c <__adddf3>
 80063c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	d158      	bne.n	8006488 <_dtoa_r+0x4f8>
 80063d6:	4b82      	ldr	r3, [pc, #520]	; (80065e0 <_dtoa_r+0x650>)
 80063d8:	2200      	movs	r2, #0
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7f9 ff5b 	bl	8000298 <__aeabi_dsub>
 80063e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e6:	4680      	mov	r8, r0
 80063e8:	4689      	mov	r9, r1
 80063ea:	f7fa fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f040 8296 	bne.w	8006920 <_dtoa_r+0x990>
 80063f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063f8:	4640      	mov	r0, r8
 80063fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa fb74 	bl	8000aec <__aeabi_dcmplt>
 8006404:	2800      	cmp	r0, #0
 8006406:	f040 8289 	bne.w	800691c <_dtoa_r+0x98c>
 800640a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800640e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006410:	2b00      	cmp	r3, #0
 8006412:	f2c0 814e 	blt.w	80066b2 <_dtoa_r+0x722>
 8006416:	f1bb 0f0e 	cmp.w	fp, #14
 800641a:	f300 814a 	bgt.w	80066b2 <_dtoa_r+0x722>
 800641e:	4b6b      	ldr	r3, [pc, #428]	; (80065cc <_dtoa_r+0x63c>)
 8006420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	f280 80dc 	bge.w	80065e8 <_dtoa_r+0x658>
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f300 80d8 	bgt.w	80065e8 <_dtoa_r+0x658>
 8006438:	f040 826f 	bne.w	800691a <_dtoa_r+0x98a>
 800643c:	4b68      	ldr	r3, [pc, #416]	; (80065e0 <_dtoa_r+0x650>)
 800643e:	2200      	movs	r2, #0
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7fa f8e0 	bl	8000608 <__aeabi_dmul>
 8006448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800644c:	f7fa fb62 	bl	8000b14 <__aeabi_dcmpge>
 8006450:	9e04      	ldr	r6, [sp, #16]
 8006452:	4637      	mov	r7, r6
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 8245 	bne.w	80068e4 <_dtoa_r+0x954>
 800645a:	9d00      	ldr	r5, [sp, #0]
 800645c:	2331      	movs	r3, #49	; 0x31
 800645e:	f805 3b01 	strb.w	r3, [r5], #1
 8006462:	f10b 0b01 	add.w	fp, fp, #1
 8006466:	e241      	b.n	80068ec <_dtoa_r+0x95c>
 8006468:	07f2      	lsls	r2, r6, #31
 800646a:	d505      	bpl.n	8006478 <_dtoa_r+0x4e8>
 800646c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006470:	f7fa f8ca 	bl	8000608 <__aeabi_dmul>
 8006474:	3501      	adds	r5, #1
 8006476:	2301      	movs	r3, #1
 8006478:	1076      	asrs	r6, r6, #1
 800647a:	3708      	adds	r7, #8
 800647c:	e773      	b.n	8006366 <_dtoa_r+0x3d6>
 800647e:	2502      	movs	r5, #2
 8006480:	e775      	b.n	800636e <_dtoa_r+0x3de>
 8006482:	9e04      	ldr	r6, [sp, #16]
 8006484:	465f      	mov	r7, fp
 8006486:	e792      	b.n	80063ae <_dtoa_r+0x41e>
 8006488:	9900      	ldr	r1, [sp, #0]
 800648a:	4b50      	ldr	r3, [pc, #320]	; (80065cc <_dtoa_r+0x63c>)
 800648c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006490:	4431      	add	r1, r6
 8006492:	9102      	str	r1, [sp, #8]
 8006494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006496:	eeb0 9a47 	vmov.f32	s18, s14
 800649a:	eef0 9a67 	vmov.f32	s19, s15
 800649e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064a6:	2900      	cmp	r1, #0
 80064a8:	d044      	beq.n	8006534 <_dtoa_r+0x5a4>
 80064aa:	494e      	ldr	r1, [pc, #312]	; (80065e4 <_dtoa_r+0x654>)
 80064ac:	2000      	movs	r0, #0
 80064ae:	f7fa f9d5 	bl	800085c <__aeabi_ddiv>
 80064b2:	ec53 2b19 	vmov	r2, r3, d9
 80064b6:	f7f9 feef 	bl	8000298 <__aeabi_dsub>
 80064ba:	9d00      	ldr	r5, [sp, #0]
 80064bc:	ec41 0b19 	vmov	d9, r0, r1
 80064c0:	4649      	mov	r1, r9
 80064c2:	4640      	mov	r0, r8
 80064c4:	f7fa fb50 	bl	8000b68 <__aeabi_d2iz>
 80064c8:	4606      	mov	r6, r0
 80064ca:	f7fa f833 	bl	8000534 <__aeabi_i2d>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7f9 fedf 	bl	8000298 <__aeabi_dsub>
 80064da:	3630      	adds	r6, #48	; 0x30
 80064dc:	f805 6b01 	strb.w	r6, [r5], #1
 80064e0:	ec53 2b19 	vmov	r2, r3, d9
 80064e4:	4680      	mov	r8, r0
 80064e6:	4689      	mov	r9, r1
 80064e8:	f7fa fb00 	bl	8000aec <__aeabi_dcmplt>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d164      	bne.n	80065ba <_dtoa_r+0x62a>
 80064f0:	4642      	mov	r2, r8
 80064f2:	464b      	mov	r3, r9
 80064f4:	4937      	ldr	r1, [pc, #220]	; (80065d4 <_dtoa_r+0x644>)
 80064f6:	2000      	movs	r0, #0
 80064f8:	f7f9 fece 	bl	8000298 <__aeabi_dsub>
 80064fc:	ec53 2b19 	vmov	r2, r3, d9
 8006500:	f7fa faf4 	bl	8000aec <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	f040 80b6 	bne.w	8006676 <_dtoa_r+0x6e6>
 800650a:	9b02      	ldr	r3, [sp, #8]
 800650c:	429d      	cmp	r5, r3
 800650e:	f43f af7c 	beq.w	800640a <_dtoa_r+0x47a>
 8006512:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <_dtoa_r+0x648>)
 8006514:	ec51 0b19 	vmov	r0, r1, d9
 8006518:	2200      	movs	r2, #0
 800651a:	f7fa f875 	bl	8000608 <__aeabi_dmul>
 800651e:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <_dtoa_r+0x648>)
 8006520:	ec41 0b19 	vmov	d9, r0, r1
 8006524:	2200      	movs	r2, #0
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7fa f86d 	bl	8000608 <__aeabi_dmul>
 800652e:	4680      	mov	r8, r0
 8006530:	4689      	mov	r9, r1
 8006532:	e7c5      	b.n	80064c0 <_dtoa_r+0x530>
 8006534:	ec51 0b17 	vmov	r0, r1, d7
 8006538:	f7fa f866 	bl	8000608 <__aeabi_dmul>
 800653c:	9b02      	ldr	r3, [sp, #8]
 800653e:	9d00      	ldr	r5, [sp, #0]
 8006540:	930f      	str	r3, [sp, #60]	; 0x3c
 8006542:	ec41 0b19 	vmov	d9, r0, r1
 8006546:	4649      	mov	r1, r9
 8006548:	4640      	mov	r0, r8
 800654a:	f7fa fb0d 	bl	8000b68 <__aeabi_d2iz>
 800654e:	4606      	mov	r6, r0
 8006550:	f7f9 fff0 	bl	8000534 <__aeabi_i2d>
 8006554:	3630      	adds	r6, #48	; 0x30
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7f9 fe9b 	bl	8000298 <__aeabi_dsub>
 8006562:	f805 6b01 	strb.w	r6, [r5], #1
 8006566:	9b02      	ldr	r3, [sp, #8]
 8006568:	429d      	cmp	r5, r3
 800656a:	4680      	mov	r8, r0
 800656c:	4689      	mov	r9, r1
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	d124      	bne.n	80065be <_dtoa_r+0x62e>
 8006574:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <_dtoa_r+0x654>)
 8006576:	ec51 0b19 	vmov	r0, r1, d9
 800657a:	f7f9 fe8f 	bl	800029c <__adddf3>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7fa facf 	bl	8000b28 <__aeabi_dcmpgt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d173      	bne.n	8006676 <_dtoa_r+0x6e6>
 800658e:	ec53 2b19 	vmov	r2, r3, d9
 8006592:	4914      	ldr	r1, [pc, #80]	; (80065e4 <_dtoa_r+0x654>)
 8006594:	2000      	movs	r0, #0
 8006596:	f7f9 fe7f 	bl	8000298 <__aeabi_dsub>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4640      	mov	r0, r8
 80065a0:	4649      	mov	r1, r9
 80065a2:	f7fa faa3 	bl	8000aec <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f43f af2f 	beq.w	800640a <_dtoa_r+0x47a>
 80065ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065ae:	1e6b      	subs	r3, r5, #1
 80065b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065b6:	2b30      	cmp	r3, #48	; 0x30
 80065b8:	d0f8      	beq.n	80065ac <_dtoa_r+0x61c>
 80065ba:	46bb      	mov	fp, r7
 80065bc:	e04a      	b.n	8006654 <_dtoa_r+0x6c4>
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <_dtoa_r+0x648>)
 80065c0:	f7fa f822 	bl	8000608 <__aeabi_dmul>
 80065c4:	4680      	mov	r8, r0
 80065c6:	4689      	mov	r9, r1
 80065c8:	e7bd      	b.n	8006546 <_dtoa_r+0x5b6>
 80065ca:	bf00      	nop
 80065cc:	08009830 	.word	0x08009830
 80065d0:	08009808 	.word	0x08009808
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	40240000 	.word	0x40240000
 80065dc:	401c0000 	.word	0x401c0000
 80065e0:	40140000 	.word	0x40140000
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065ec:	9d00      	ldr	r5, [sp, #0]
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	4630      	mov	r0, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	f7fa f931 	bl	800085c <__aeabi_ddiv>
 80065fa:	f7fa fab5 	bl	8000b68 <__aeabi_d2iz>
 80065fe:	9001      	str	r0, [sp, #4]
 8006600:	f7f9 ff98 	bl	8000534 <__aeabi_i2d>
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	f7f9 fffe 	bl	8000608 <__aeabi_dmul>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4630      	mov	r0, r6
 8006612:	4639      	mov	r1, r7
 8006614:	f7f9 fe40 	bl	8000298 <__aeabi_dsub>
 8006618:	9e01      	ldr	r6, [sp, #4]
 800661a:	9f04      	ldr	r7, [sp, #16]
 800661c:	3630      	adds	r6, #48	; 0x30
 800661e:	f805 6b01 	strb.w	r6, [r5], #1
 8006622:	9e00      	ldr	r6, [sp, #0]
 8006624:	1bae      	subs	r6, r5, r6
 8006626:	42b7      	cmp	r7, r6
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	d134      	bne.n	8006698 <_dtoa_r+0x708>
 800662e:	f7f9 fe35 	bl	800029c <__adddf3>
 8006632:	4642      	mov	r2, r8
 8006634:	464b      	mov	r3, r9
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	f7fa fa75 	bl	8000b28 <__aeabi_dcmpgt>
 800663e:	b9c8      	cbnz	r0, 8006674 <_dtoa_r+0x6e4>
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7fa fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800664c:	b110      	cbz	r0, 8006654 <_dtoa_r+0x6c4>
 800664e:	9b01      	ldr	r3, [sp, #4]
 8006650:	07db      	lsls	r3, r3, #31
 8006652:	d40f      	bmi.n	8006674 <_dtoa_r+0x6e4>
 8006654:	4651      	mov	r1, sl
 8006656:	4620      	mov	r0, r4
 8006658:	f000 fbcc 	bl	8006df4 <_Bfree>
 800665c:	2300      	movs	r3, #0
 800665e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006660:	702b      	strb	r3, [r5, #0]
 8006662:	f10b 0301 	add.w	r3, fp, #1
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666a:	2b00      	cmp	r3, #0
 800666c:	f43f ace2 	beq.w	8006034 <_dtoa_r+0xa4>
 8006670:	601d      	str	r5, [r3, #0]
 8006672:	e4df      	b.n	8006034 <_dtoa_r+0xa4>
 8006674:	465f      	mov	r7, fp
 8006676:	462b      	mov	r3, r5
 8006678:	461d      	mov	r5, r3
 800667a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800667e:	2a39      	cmp	r2, #57	; 0x39
 8006680:	d106      	bne.n	8006690 <_dtoa_r+0x700>
 8006682:	9a00      	ldr	r2, [sp, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d1f7      	bne.n	8006678 <_dtoa_r+0x6e8>
 8006688:	9900      	ldr	r1, [sp, #0]
 800668a:	2230      	movs	r2, #48	; 0x30
 800668c:	3701      	adds	r7, #1
 800668e:	700a      	strb	r2, [r1, #0]
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	3201      	adds	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e790      	b.n	80065ba <_dtoa_r+0x62a>
 8006698:	4ba3      	ldr	r3, [pc, #652]	; (8006928 <_dtoa_r+0x998>)
 800669a:	2200      	movs	r2, #0
 800669c:	f7f9 ffb4 	bl	8000608 <__aeabi_dmul>
 80066a0:	2200      	movs	r2, #0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	f7fa fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d09e      	beq.n	80065ee <_dtoa_r+0x65e>
 80066b0:	e7d0      	b.n	8006654 <_dtoa_r+0x6c4>
 80066b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	f000 80ca 	beq.w	800684e <_dtoa_r+0x8be>
 80066ba:	9a07      	ldr	r2, [sp, #28]
 80066bc:	2a01      	cmp	r2, #1
 80066be:	f300 80ad 	bgt.w	800681c <_dtoa_r+0x88c>
 80066c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	f000 80a5 	beq.w	8006814 <_dtoa_r+0x884>
 80066ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ce:	9e08      	ldr	r6, [sp, #32]
 80066d0:	9d05      	ldr	r5, [sp, #20]
 80066d2:	9a05      	ldr	r2, [sp, #20]
 80066d4:	441a      	add	r2, r3
 80066d6:	9205      	str	r2, [sp, #20]
 80066d8:	9a06      	ldr	r2, [sp, #24]
 80066da:	2101      	movs	r1, #1
 80066dc:	441a      	add	r2, r3
 80066de:	4620      	mov	r0, r4
 80066e0:	9206      	str	r2, [sp, #24]
 80066e2:	f000 fc87 	bl	8006ff4 <__i2b>
 80066e6:	4607      	mov	r7, r0
 80066e8:	b165      	cbz	r5, 8006704 <_dtoa_r+0x774>
 80066ea:	9b06      	ldr	r3, [sp, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	dd09      	ble.n	8006704 <_dtoa_r+0x774>
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	9a05      	ldr	r2, [sp, #20]
 80066f4:	bfa8      	it	ge
 80066f6:	462b      	movge	r3, r5
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	9205      	str	r2, [sp, #20]
 80066fc:	9a06      	ldr	r2, [sp, #24]
 80066fe:	1aed      	subs	r5, r5, r3
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	9306      	str	r3, [sp, #24]
 8006704:	9b08      	ldr	r3, [sp, #32]
 8006706:	b1f3      	cbz	r3, 8006746 <_dtoa_r+0x7b6>
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a3 	beq.w	8006856 <_dtoa_r+0x8c6>
 8006710:	2e00      	cmp	r6, #0
 8006712:	dd10      	ble.n	8006736 <_dtoa_r+0x7a6>
 8006714:	4639      	mov	r1, r7
 8006716:	4632      	mov	r2, r6
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fd2b 	bl	8007174 <__pow5mult>
 800671e:	4652      	mov	r2, sl
 8006720:	4601      	mov	r1, r0
 8006722:	4607      	mov	r7, r0
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fc7b 	bl	8007020 <__multiply>
 800672a:	4651      	mov	r1, sl
 800672c:	4680      	mov	r8, r0
 800672e:	4620      	mov	r0, r4
 8006730:	f000 fb60 	bl	8006df4 <_Bfree>
 8006734:	46c2      	mov	sl, r8
 8006736:	9b08      	ldr	r3, [sp, #32]
 8006738:	1b9a      	subs	r2, r3, r6
 800673a:	d004      	beq.n	8006746 <_dtoa_r+0x7b6>
 800673c:	4651      	mov	r1, sl
 800673e:	4620      	mov	r0, r4
 8006740:	f000 fd18 	bl	8007174 <__pow5mult>
 8006744:	4682      	mov	sl, r0
 8006746:	2101      	movs	r1, #1
 8006748:	4620      	mov	r0, r4
 800674a:	f000 fc53 	bl	8006ff4 <__i2b>
 800674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	4606      	mov	r6, r0
 8006754:	f340 8081 	ble.w	800685a <_dtoa_r+0x8ca>
 8006758:	461a      	mov	r2, r3
 800675a:	4601      	mov	r1, r0
 800675c:	4620      	mov	r0, r4
 800675e:	f000 fd09 	bl	8007174 <__pow5mult>
 8006762:	9b07      	ldr	r3, [sp, #28]
 8006764:	2b01      	cmp	r3, #1
 8006766:	4606      	mov	r6, r0
 8006768:	dd7a      	ble.n	8006860 <_dtoa_r+0x8d0>
 800676a:	f04f 0800 	mov.w	r8, #0
 800676e:	6933      	ldr	r3, [r6, #16]
 8006770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006774:	6918      	ldr	r0, [r3, #16]
 8006776:	f000 fbef 	bl	8006f58 <__hi0bits>
 800677a:	f1c0 0020 	rsb	r0, r0, #32
 800677e:	9b06      	ldr	r3, [sp, #24]
 8006780:	4418      	add	r0, r3
 8006782:	f010 001f 	ands.w	r0, r0, #31
 8006786:	f000 8094 	beq.w	80068b2 <_dtoa_r+0x922>
 800678a:	f1c0 0320 	rsb	r3, r0, #32
 800678e:	2b04      	cmp	r3, #4
 8006790:	f340 8085 	ble.w	800689e <_dtoa_r+0x90e>
 8006794:	9b05      	ldr	r3, [sp, #20]
 8006796:	f1c0 001c 	rsb	r0, r0, #28
 800679a:	4403      	add	r3, r0
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	4403      	add	r3, r0
 80067a2:	4405      	add	r5, r0
 80067a4:	9306      	str	r3, [sp, #24]
 80067a6:	9b05      	ldr	r3, [sp, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dd05      	ble.n	80067b8 <_dtoa_r+0x828>
 80067ac:	4651      	mov	r1, sl
 80067ae:	461a      	mov	r2, r3
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 fd39 	bl	8007228 <__lshift>
 80067b6:	4682      	mov	sl, r0
 80067b8:	9b06      	ldr	r3, [sp, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dd05      	ble.n	80067ca <_dtoa_r+0x83a>
 80067be:	4631      	mov	r1, r6
 80067c0:	461a      	mov	r2, r3
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fd30 	bl	8007228 <__lshift>
 80067c8:	4606      	mov	r6, r0
 80067ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d072      	beq.n	80068b6 <_dtoa_r+0x926>
 80067d0:	4631      	mov	r1, r6
 80067d2:	4650      	mov	r0, sl
 80067d4:	f000 fd94 	bl	8007300 <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	da6c      	bge.n	80068b6 <_dtoa_r+0x926>
 80067dc:	2300      	movs	r3, #0
 80067de:	4651      	mov	r1, sl
 80067e0:	220a      	movs	r2, #10
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fb28 	bl	8006e38 <__multadd>
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067ee:	4682      	mov	sl, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 81b0 	beq.w	8006b56 <_dtoa_r+0xbc6>
 80067f6:	2300      	movs	r3, #0
 80067f8:	4639      	mov	r1, r7
 80067fa:	220a      	movs	r2, #10
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fb1b 	bl	8006e38 <__multadd>
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	4607      	mov	r7, r0
 8006808:	f300 8096 	bgt.w	8006938 <_dtoa_r+0x9a8>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b02      	cmp	r3, #2
 8006810:	dc59      	bgt.n	80068c6 <_dtoa_r+0x936>
 8006812:	e091      	b.n	8006938 <_dtoa_r+0x9a8>
 8006814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800681a:	e758      	b.n	80066ce <_dtoa_r+0x73e>
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	1e5e      	subs	r6, r3, #1
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	42b3      	cmp	r3, r6
 8006824:	bfbf      	itttt	lt
 8006826:	9b08      	ldrlt	r3, [sp, #32]
 8006828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800682a:	9608      	strlt	r6, [sp, #32]
 800682c:	1af3      	sublt	r3, r6, r3
 800682e:	bfb4      	ite	lt
 8006830:	18d2      	addlt	r2, r2, r3
 8006832:	1b9e      	subge	r6, r3, r6
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	bfbc      	itt	lt
 8006838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800683a:	2600      	movlt	r6, #0
 800683c:	2b00      	cmp	r3, #0
 800683e:	bfb7      	itett	lt
 8006840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006848:	1a9d      	sublt	r5, r3, r2
 800684a:	2300      	movlt	r3, #0
 800684c:	e741      	b.n	80066d2 <_dtoa_r+0x742>
 800684e:	9e08      	ldr	r6, [sp, #32]
 8006850:	9d05      	ldr	r5, [sp, #20]
 8006852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006854:	e748      	b.n	80066e8 <_dtoa_r+0x758>
 8006856:	9a08      	ldr	r2, [sp, #32]
 8006858:	e770      	b.n	800673c <_dtoa_r+0x7ac>
 800685a:	9b07      	ldr	r3, [sp, #28]
 800685c:	2b01      	cmp	r3, #1
 800685e:	dc19      	bgt.n	8006894 <_dtoa_r+0x904>
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	b9bb      	cbnz	r3, 8006894 <_dtoa_r+0x904>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800686a:	b99b      	cbnz	r3, 8006894 <_dtoa_r+0x904>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006872:	0d1b      	lsrs	r3, r3, #20
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	b183      	cbz	r3, 800689a <_dtoa_r+0x90a>
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	3301      	adds	r3, #1
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	9b06      	ldr	r3, [sp, #24]
 8006880:	3301      	adds	r3, #1
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	f04f 0801 	mov.w	r8, #1
 8006888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688a:	2b00      	cmp	r3, #0
 800688c:	f47f af6f 	bne.w	800676e <_dtoa_r+0x7de>
 8006890:	2001      	movs	r0, #1
 8006892:	e774      	b.n	800677e <_dtoa_r+0x7ee>
 8006894:	f04f 0800 	mov.w	r8, #0
 8006898:	e7f6      	b.n	8006888 <_dtoa_r+0x8f8>
 800689a:	4698      	mov	r8, r3
 800689c:	e7f4      	b.n	8006888 <_dtoa_r+0x8f8>
 800689e:	d082      	beq.n	80067a6 <_dtoa_r+0x816>
 80068a0:	9a05      	ldr	r2, [sp, #20]
 80068a2:	331c      	adds	r3, #28
 80068a4:	441a      	add	r2, r3
 80068a6:	9205      	str	r2, [sp, #20]
 80068a8:	9a06      	ldr	r2, [sp, #24]
 80068aa:	441a      	add	r2, r3
 80068ac:	441d      	add	r5, r3
 80068ae:	9206      	str	r2, [sp, #24]
 80068b0:	e779      	b.n	80067a6 <_dtoa_r+0x816>
 80068b2:	4603      	mov	r3, r0
 80068b4:	e7f4      	b.n	80068a0 <_dtoa_r+0x910>
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	dc37      	bgt.n	800692c <_dtoa_r+0x99c>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	dd34      	ble.n	800692c <_dtoa_r+0x99c>
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	b963      	cbnz	r3, 80068e4 <_dtoa_r+0x954>
 80068ca:	4631      	mov	r1, r6
 80068cc:	2205      	movs	r2, #5
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 fab2 	bl	8006e38 <__multadd>
 80068d4:	4601      	mov	r1, r0
 80068d6:	4606      	mov	r6, r0
 80068d8:	4650      	mov	r0, sl
 80068da:	f000 fd11 	bl	8007300 <__mcmp>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f73f adbb 	bgt.w	800645a <_dtoa_r+0x4ca>
 80068e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e6:	9d00      	ldr	r5, [sp, #0]
 80068e8:	ea6f 0b03 	mvn.w	fp, r3
 80068ec:	f04f 0800 	mov.w	r8, #0
 80068f0:	4631      	mov	r1, r6
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fa7e 	bl	8006df4 <_Bfree>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f43f aeab 	beq.w	8006654 <_dtoa_r+0x6c4>
 80068fe:	f1b8 0f00 	cmp.w	r8, #0
 8006902:	d005      	beq.n	8006910 <_dtoa_r+0x980>
 8006904:	45b8      	cmp	r8, r7
 8006906:	d003      	beq.n	8006910 <_dtoa_r+0x980>
 8006908:	4641      	mov	r1, r8
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fa72 	bl	8006df4 <_Bfree>
 8006910:	4639      	mov	r1, r7
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fa6e 	bl	8006df4 <_Bfree>
 8006918:	e69c      	b.n	8006654 <_dtoa_r+0x6c4>
 800691a:	2600      	movs	r6, #0
 800691c:	4637      	mov	r7, r6
 800691e:	e7e1      	b.n	80068e4 <_dtoa_r+0x954>
 8006920:	46bb      	mov	fp, r7
 8006922:	4637      	mov	r7, r6
 8006924:	e599      	b.n	800645a <_dtoa_r+0x4ca>
 8006926:	bf00      	nop
 8006928:	40240000 	.word	0x40240000
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80c8 	beq.w	8006ac4 <_dtoa_r+0xb34>
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	2d00      	cmp	r5, #0
 800693a:	dd05      	ble.n	8006948 <_dtoa_r+0x9b8>
 800693c:	4639      	mov	r1, r7
 800693e:	462a      	mov	r2, r5
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fc71 	bl	8007228 <__lshift>
 8006946:	4607      	mov	r7, r0
 8006948:	f1b8 0f00 	cmp.w	r8, #0
 800694c:	d05b      	beq.n	8006a06 <_dtoa_r+0xa76>
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fa0f 	bl	8006d74 <_Balloc>
 8006956:	4605      	mov	r5, r0
 8006958:	b928      	cbnz	r0, 8006966 <_dtoa_r+0x9d6>
 800695a:	4b83      	ldr	r3, [pc, #524]	; (8006b68 <_dtoa_r+0xbd8>)
 800695c:	4602      	mov	r2, r0
 800695e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006962:	f7ff bb2e 	b.w	8005fc2 <_dtoa_r+0x32>
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	3202      	adds	r2, #2
 800696a:	0092      	lsls	r2, r2, #2
 800696c:	f107 010c 	add.w	r1, r7, #12
 8006970:	300c      	adds	r0, #12
 8006972:	f001 ff97 	bl	80088a4 <memcpy>
 8006976:	2201      	movs	r2, #1
 8006978:	4629      	mov	r1, r5
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fc54 	bl	8007228 <__lshift>
 8006980:	9b00      	ldr	r3, [sp, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800698a:	4413      	add	r3, r2
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	46b8      	mov	r8, r7
 8006996:	9306      	str	r3, [sp, #24]
 8006998:	4607      	mov	r7, r0
 800699a:	9b04      	ldr	r3, [sp, #16]
 800699c:	4631      	mov	r1, r6
 800699e:	3b01      	subs	r3, #1
 80069a0:	4650      	mov	r0, sl
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	f7ff fa6c 	bl	8005e80 <quorem>
 80069a8:	4641      	mov	r1, r8
 80069aa:	9002      	str	r0, [sp, #8]
 80069ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069b0:	4650      	mov	r0, sl
 80069b2:	f000 fca5 	bl	8007300 <__mcmp>
 80069b6:	463a      	mov	r2, r7
 80069b8:	9005      	str	r0, [sp, #20]
 80069ba:	4631      	mov	r1, r6
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fcbb 	bl	8007338 <__mdiff>
 80069c2:	68c2      	ldr	r2, [r0, #12]
 80069c4:	4605      	mov	r5, r0
 80069c6:	bb02      	cbnz	r2, 8006a0a <_dtoa_r+0xa7a>
 80069c8:	4601      	mov	r1, r0
 80069ca:	4650      	mov	r0, sl
 80069cc:	f000 fc98 	bl	8007300 <__mcmp>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4629      	mov	r1, r5
 80069d4:	4620      	mov	r0, r4
 80069d6:	9209      	str	r2, [sp, #36]	; 0x24
 80069d8:	f000 fa0c 	bl	8006df4 <_Bfree>
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e0:	9d04      	ldr	r5, [sp, #16]
 80069e2:	ea43 0102 	orr.w	r1, r3, r2
 80069e6:	9b06      	ldr	r3, [sp, #24]
 80069e8:	4319      	orrs	r1, r3
 80069ea:	d110      	bne.n	8006a0e <_dtoa_r+0xa7e>
 80069ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069f0:	d029      	beq.n	8006a46 <_dtoa_r+0xab6>
 80069f2:	9b05      	ldr	r3, [sp, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd02      	ble.n	80069fe <_dtoa_r+0xa6e>
 80069f8:	9b02      	ldr	r3, [sp, #8]
 80069fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	f883 9000 	strb.w	r9, [r3]
 8006a04:	e774      	b.n	80068f0 <_dtoa_r+0x960>
 8006a06:	4638      	mov	r0, r7
 8006a08:	e7ba      	b.n	8006980 <_dtoa_r+0x9f0>
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	e7e1      	b.n	80069d2 <_dtoa_r+0xa42>
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db04      	blt.n	8006a1e <_dtoa_r+0xa8e>
 8006a14:	9907      	ldr	r1, [sp, #28]
 8006a16:	430b      	orrs	r3, r1
 8006a18:	9906      	ldr	r1, [sp, #24]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	d120      	bne.n	8006a60 <_dtoa_r+0xad0>
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	dded      	ble.n	80069fe <_dtoa_r+0xa6e>
 8006a22:	4651      	mov	r1, sl
 8006a24:	2201      	movs	r2, #1
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fbfe 	bl	8007228 <__lshift>
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4682      	mov	sl, r0
 8006a30:	f000 fc66 	bl	8007300 <__mcmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	dc03      	bgt.n	8006a40 <_dtoa_r+0xab0>
 8006a38:	d1e1      	bne.n	80069fe <_dtoa_r+0xa6e>
 8006a3a:	f019 0f01 	tst.w	r9, #1
 8006a3e:	d0de      	beq.n	80069fe <_dtoa_r+0xa6e>
 8006a40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a44:	d1d8      	bne.n	80069f8 <_dtoa_r+0xa68>
 8006a46:	9a01      	ldr	r2, [sp, #4]
 8006a48:	2339      	movs	r3, #57	; 0x39
 8006a4a:	7013      	strb	r3, [r2, #0]
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	461d      	mov	r5, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a56:	2a39      	cmp	r2, #57	; 0x39
 8006a58:	d06c      	beq.n	8006b34 <_dtoa_r+0xba4>
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e747      	b.n	80068f0 <_dtoa_r+0x960>
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	dd07      	ble.n	8006a74 <_dtoa_r+0xae4>
 8006a64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a68:	d0ed      	beq.n	8006a46 <_dtoa_r+0xab6>
 8006a6a:	9a01      	ldr	r2, [sp, #4]
 8006a6c:	f109 0301 	add.w	r3, r9, #1
 8006a70:	7013      	strb	r3, [r2, #0]
 8006a72:	e73d      	b.n	80068f0 <_dtoa_r+0x960>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	9a08      	ldr	r2, [sp, #32]
 8006a78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d043      	beq.n	8006b08 <_dtoa_r+0xb78>
 8006a80:	4651      	mov	r1, sl
 8006a82:	2300      	movs	r3, #0
 8006a84:	220a      	movs	r2, #10
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 f9d6 	bl	8006e38 <__multadd>
 8006a8c:	45b8      	cmp	r8, r7
 8006a8e:	4682      	mov	sl, r0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f04f 020a 	mov.w	r2, #10
 8006a98:	4641      	mov	r1, r8
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	d107      	bne.n	8006aae <_dtoa_r+0xb1e>
 8006a9e:	f000 f9cb 	bl	8006e38 <__multadd>
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	e775      	b.n	800699a <_dtoa_r+0xa0a>
 8006aae:	f000 f9c3 	bl	8006e38 <__multadd>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	220a      	movs	r2, #10
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 f9bc 	bl	8006e38 <__multadd>
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	e7f0      	b.n	8006aa6 <_dtoa_r+0xb16>
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	9d00      	ldr	r5, [sp, #0]
 8006aca:	4631      	mov	r1, r6
 8006acc:	4650      	mov	r0, sl
 8006ace:	f7ff f9d7 	bl	8005e80 <quorem>
 8006ad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ad6:	9b00      	ldr	r3, [sp, #0]
 8006ad8:	f805 9b01 	strb.w	r9, [r5], #1
 8006adc:	1aea      	subs	r2, r5, r3
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	dd07      	ble.n	8006af4 <_dtoa_r+0xb64>
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 f9a4 	bl	8006e38 <__multadd>
 8006af0:	4682      	mov	sl, r0
 8006af2:	e7ea      	b.n	8006aca <_dtoa_r+0xb3a>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfc8      	it	gt
 8006afa:	461d      	movgt	r5, r3
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	bfd8      	it	le
 8006b00:	2501      	movle	r5, #1
 8006b02:	441d      	add	r5, r3
 8006b04:	f04f 0800 	mov.w	r8, #0
 8006b08:	4651      	mov	r1, sl
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 fb8b 	bl	8007228 <__lshift>
 8006b12:	4631      	mov	r1, r6
 8006b14:	4682      	mov	sl, r0
 8006b16:	f000 fbf3 	bl	8007300 <__mcmp>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	dc96      	bgt.n	8006a4c <_dtoa_r+0xabc>
 8006b1e:	d102      	bne.n	8006b26 <_dtoa_r+0xb96>
 8006b20:	f019 0f01 	tst.w	r9, #1
 8006b24:	d192      	bne.n	8006a4c <_dtoa_r+0xabc>
 8006b26:	462b      	mov	r3, r5
 8006b28:	461d      	mov	r5, r3
 8006b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b2e:	2a30      	cmp	r2, #48	; 0x30
 8006b30:	d0fa      	beq.n	8006b28 <_dtoa_r+0xb98>
 8006b32:	e6dd      	b.n	80068f0 <_dtoa_r+0x960>
 8006b34:	9a00      	ldr	r2, [sp, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d189      	bne.n	8006a4e <_dtoa_r+0xabe>
 8006b3a:	f10b 0b01 	add.w	fp, fp, #1
 8006b3e:	2331      	movs	r3, #49	; 0x31
 8006b40:	e796      	b.n	8006a70 <_dtoa_r+0xae0>
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <_dtoa_r+0xbdc>)
 8006b44:	f7ff ba99 	b.w	800607a <_dtoa_r+0xea>
 8006b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f47f aa6d 	bne.w	800602a <_dtoa_r+0x9a>
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <_dtoa_r+0xbe0>)
 8006b52:	f7ff ba92 	b.w	800607a <_dtoa_r+0xea>
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dcb5      	bgt.n	8006ac8 <_dtoa_r+0xb38>
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	f73f aeb1 	bgt.w	80068c6 <_dtoa_r+0x936>
 8006b64:	e7b0      	b.n	8006ac8 <_dtoa_r+0xb38>
 8006b66:	bf00      	nop
 8006b68:	0800979d 	.word	0x0800979d
 8006b6c:	080096d3 	.word	0x080096d3
 8006b70:	08009738 	.word	0x08009738

08006b74 <_free_r>:
 8006b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b76:	2900      	cmp	r1, #0
 8006b78:	d044      	beq.n	8006c04 <_free_r+0x90>
 8006b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7e:	9001      	str	r0, [sp, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f1a1 0404 	sub.w	r4, r1, #4
 8006b86:	bfb8      	it	lt
 8006b88:	18e4      	addlt	r4, r4, r3
 8006b8a:	f000 f8e7 	bl	8006d5c <__malloc_lock>
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <_free_r+0x94>)
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	b933      	cbnz	r3, 8006ba4 <_free_r+0x30>
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6014      	str	r4, [r2, #0]
 8006b9a:	b003      	add	sp, #12
 8006b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ba0:	f000 b8e2 	b.w	8006d68 <__malloc_unlock>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d908      	bls.n	8006bba <_free_r+0x46>
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	428b      	cmp	r3, r1
 8006bae:	bf01      	itttt	eq
 8006bb0:	6819      	ldreq	r1, [r3, #0]
 8006bb2:	685b      	ldreq	r3, [r3, #4]
 8006bb4:	1949      	addeq	r1, r1, r5
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	e7ed      	b.n	8006b96 <_free_r+0x22>
 8006bba:	461a      	mov	r2, r3
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b10b      	cbz	r3, 8006bc4 <_free_r+0x50>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d9fa      	bls.n	8006bba <_free_r+0x46>
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	1855      	adds	r5, r2, r1
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	d10b      	bne.n	8006be4 <_free_r+0x70>
 8006bcc:	6824      	ldr	r4, [r4, #0]
 8006bce:	4421      	add	r1, r4
 8006bd0:	1854      	adds	r4, r2, r1
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	d1e0      	bne.n	8006b9a <_free_r+0x26>
 8006bd8:	681c      	ldr	r4, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	6053      	str	r3, [r2, #4]
 8006bde:	440c      	add	r4, r1
 8006be0:	6014      	str	r4, [r2, #0]
 8006be2:	e7da      	b.n	8006b9a <_free_r+0x26>
 8006be4:	d902      	bls.n	8006bec <_free_r+0x78>
 8006be6:	230c      	movs	r3, #12
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	e7d6      	b.n	8006b9a <_free_r+0x26>
 8006bec:	6825      	ldr	r5, [r4, #0]
 8006bee:	1961      	adds	r1, r4, r5
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf04      	itt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	6063      	str	r3, [r4, #4]
 8006bfa:	bf04      	itt	eq
 8006bfc:	1949      	addeq	r1, r1, r5
 8006bfe:	6021      	streq	r1, [r4, #0]
 8006c00:	6054      	str	r4, [r2, #4]
 8006c02:	e7ca      	b.n	8006b9a <_free_r+0x26>
 8006c04:	b003      	add	sp, #12
 8006c06:	bd30      	pop	{r4, r5, pc}
 8006c08:	20000490 	.word	0x20000490

08006c0c <malloc>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <malloc+0xc>)
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f000 b823 	b.w	8006c5c <_malloc_r>
 8006c16:	bf00      	nop
 8006c18:	20000070 	.word	0x20000070

08006c1c <sbrk_aligned>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	4e0e      	ldr	r6, [pc, #56]	; (8006c58 <sbrk_aligned+0x3c>)
 8006c20:	460c      	mov	r4, r1
 8006c22:	6831      	ldr	r1, [r6, #0]
 8006c24:	4605      	mov	r5, r0
 8006c26:	b911      	cbnz	r1, 8006c2e <sbrk_aligned+0x12>
 8006c28:	f001 fe2c 	bl	8008884 <_sbrk_r>
 8006c2c:	6030      	str	r0, [r6, #0]
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4628      	mov	r0, r5
 8006c32:	f001 fe27 	bl	8008884 <_sbrk_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d00a      	beq.n	8006c50 <sbrk_aligned+0x34>
 8006c3a:	1cc4      	adds	r4, r0, #3
 8006c3c:	f024 0403 	bic.w	r4, r4, #3
 8006c40:	42a0      	cmp	r0, r4
 8006c42:	d007      	beq.n	8006c54 <sbrk_aligned+0x38>
 8006c44:	1a21      	subs	r1, r4, r0
 8006c46:	4628      	mov	r0, r5
 8006c48:	f001 fe1c 	bl	8008884 <_sbrk_r>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d101      	bne.n	8006c54 <sbrk_aligned+0x38>
 8006c50:	f04f 34ff 	mov.w	r4, #4294967295
 8006c54:	4620      	mov	r0, r4
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	20000494 	.word	0x20000494

08006c5c <_malloc_r>:
 8006c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c60:	1ccd      	adds	r5, r1, #3
 8006c62:	f025 0503 	bic.w	r5, r5, #3
 8006c66:	3508      	adds	r5, #8
 8006c68:	2d0c      	cmp	r5, #12
 8006c6a:	bf38      	it	cc
 8006c6c:	250c      	movcc	r5, #12
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	4607      	mov	r7, r0
 8006c72:	db01      	blt.n	8006c78 <_malloc_r+0x1c>
 8006c74:	42a9      	cmp	r1, r5
 8006c76:	d905      	bls.n	8006c84 <_malloc_r+0x28>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d58 <_malloc_r+0xfc>
 8006c88:	f000 f868 	bl	8006d5c <__malloc_lock>
 8006c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c90:	461c      	mov	r4, r3
 8006c92:	bb5c      	cbnz	r4, 8006cec <_malloc_r+0x90>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	f7ff ffc0 	bl	8006c1c <sbrk_aligned>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	d155      	bne.n	8006d4e <_malloc_r+0xf2>
 8006ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ca6:	4626      	mov	r6, r4
 8006ca8:	2e00      	cmp	r6, #0
 8006caa:	d145      	bne.n	8006d38 <_malloc_r+0xdc>
 8006cac:	2c00      	cmp	r4, #0
 8006cae:	d048      	beq.n	8006d42 <_malloc_r+0xe6>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	eb04 0903 	add.w	r9, r4, r3
 8006cba:	f001 fde3 	bl	8008884 <_sbrk_r>
 8006cbe:	4581      	cmp	r9, r0
 8006cc0:	d13f      	bne.n	8006d42 <_malloc_r+0xe6>
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	1a6d      	subs	r5, r5, r1
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ffa7 	bl	8006c1c <sbrk_aligned>
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d037      	beq.n	8006d42 <_malloc_r+0xe6>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	442b      	add	r3, r5
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d038      	beq.n	8006d52 <_malloc_r+0xf6>
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	42a2      	cmp	r2, r4
 8006ce4:	d12b      	bne.n	8006d3e <_malloc_r+0xe2>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	e00f      	b.n	8006d0c <_malloc_r+0xb0>
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	1b52      	subs	r2, r2, r5
 8006cf0:	d41f      	bmi.n	8006d32 <_malloc_r+0xd6>
 8006cf2:	2a0b      	cmp	r2, #11
 8006cf4:	d917      	bls.n	8006d26 <_malloc_r+0xca>
 8006cf6:	1961      	adds	r1, r4, r5
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	6025      	str	r5, [r4, #0]
 8006cfc:	bf18      	it	ne
 8006cfe:	6059      	strne	r1, [r3, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	bf08      	it	eq
 8006d04:	f8c8 1000 	streq.w	r1, [r8]
 8006d08:	5162      	str	r2, [r4, r5]
 8006d0a:	604b      	str	r3, [r1, #4]
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f104 060b 	add.w	r6, r4, #11
 8006d12:	f000 f829 	bl	8006d68 <__malloc_unlock>
 8006d16:	f026 0607 	bic.w	r6, r6, #7
 8006d1a:	1d23      	adds	r3, r4, #4
 8006d1c:	1af2      	subs	r2, r6, r3
 8006d1e:	d0ae      	beq.n	8006c7e <_malloc_r+0x22>
 8006d20:	1b9b      	subs	r3, r3, r6
 8006d22:	50a3      	str	r3, [r4, r2]
 8006d24:	e7ab      	b.n	8006c7e <_malloc_r+0x22>
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	6862      	ldr	r2, [r4, #4]
 8006d2a:	d1dd      	bne.n	8006ce8 <_malloc_r+0x8c>
 8006d2c:	f8c8 2000 	str.w	r2, [r8]
 8006d30:	e7ec      	b.n	8006d0c <_malloc_r+0xb0>
 8006d32:	4623      	mov	r3, r4
 8006d34:	6864      	ldr	r4, [r4, #4]
 8006d36:	e7ac      	b.n	8006c92 <_malloc_r+0x36>
 8006d38:	4634      	mov	r4, r6
 8006d3a:	6876      	ldr	r6, [r6, #4]
 8006d3c:	e7b4      	b.n	8006ca8 <_malloc_r+0x4c>
 8006d3e:	4613      	mov	r3, r2
 8006d40:	e7cc      	b.n	8006cdc <_malloc_r+0x80>
 8006d42:	230c      	movs	r3, #12
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	4638      	mov	r0, r7
 8006d48:	f000 f80e 	bl	8006d68 <__malloc_unlock>
 8006d4c:	e797      	b.n	8006c7e <_malloc_r+0x22>
 8006d4e:	6025      	str	r5, [r4, #0]
 8006d50:	e7dc      	b.n	8006d0c <_malloc_r+0xb0>
 8006d52:	605b      	str	r3, [r3, #4]
 8006d54:	deff      	udf	#255	; 0xff
 8006d56:	bf00      	nop
 8006d58:	20000490 	.word	0x20000490

08006d5c <__malloc_lock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__malloc_lock+0x8>)
 8006d5e:	f7ff b868 	b.w	8005e32 <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	2000048c 	.word	0x2000048c

08006d68 <__malloc_unlock>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__malloc_unlock+0x8>)
 8006d6a:	f7ff b863 	b.w	8005e34 <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	2000048c 	.word	0x2000048c

08006d74 <_Balloc>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	69c6      	ldr	r6, [r0, #28]
 8006d78:	4604      	mov	r4, r0
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	b976      	cbnz	r6, 8006d9c <_Balloc+0x28>
 8006d7e:	2010      	movs	r0, #16
 8006d80:	f7ff ff44 	bl	8006c0c <malloc>
 8006d84:	4602      	mov	r2, r0
 8006d86:	61e0      	str	r0, [r4, #28]
 8006d88:	b920      	cbnz	r0, 8006d94 <_Balloc+0x20>
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <_Balloc+0x78>)
 8006d8c:	4818      	ldr	r0, [pc, #96]	; (8006df0 <_Balloc+0x7c>)
 8006d8e:	216b      	movs	r1, #107	; 0x6b
 8006d90:	f7ff f858 	bl	8005e44 <__assert_func>
 8006d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d98:	6006      	str	r6, [r0, #0]
 8006d9a:	60c6      	str	r6, [r0, #12]
 8006d9c:	69e6      	ldr	r6, [r4, #28]
 8006d9e:	68f3      	ldr	r3, [r6, #12]
 8006da0:	b183      	cbz	r3, 8006dc4 <_Balloc+0x50>
 8006da2:	69e3      	ldr	r3, [r4, #28]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006daa:	b9b8      	cbnz	r0, 8006ddc <_Balloc+0x68>
 8006dac:	2101      	movs	r1, #1
 8006dae:	fa01 f605 	lsl.w	r6, r1, r5
 8006db2:	1d72      	adds	r2, r6, #5
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	4620      	mov	r0, r4
 8006db8:	f001 fd91 	bl	80088de <_calloc_r>
 8006dbc:	b160      	cbz	r0, 8006dd8 <_Balloc+0x64>
 8006dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dc2:	e00e      	b.n	8006de2 <_Balloc+0x6e>
 8006dc4:	2221      	movs	r2, #33	; 0x21
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f001 fd88 	bl	80088de <_calloc_r>
 8006dce:	69e3      	ldr	r3, [r4, #28]
 8006dd0:	60f0      	str	r0, [r6, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <_Balloc+0x2e>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	6802      	ldr	r2, [r0, #0]
 8006dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006de2:	2300      	movs	r3, #0
 8006de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006de8:	e7f7      	b.n	8006dda <_Balloc+0x66>
 8006dea:	bf00      	nop
 8006dec:	08009654 	.word	0x08009654
 8006df0:	080097ae 	.word	0x080097ae

08006df4 <_Bfree>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	69c6      	ldr	r6, [r0, #28]
 8006df8:	4605      	mov	r5, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	b976      	cbnz	r6, 8006e1c <_Bfree+0x28>
 8006dfe:	2010      	movs	r0, #16
 8006e00:	f7ff ff04 	bl	8006c0c <malloc>
 8006e04:	4602      	mov	r2, r0
 8006e06:	61e8      	str	r0, [r5, #28]
 8006e08:	b920      	cbnz	r0, 8006e14 <_Bfree+0x20>
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <_Bfree+0x3c>)
 8006e0c:	4809      	ldr	r0, [pc, #36]	; (8006e34 <_Bfree+0x40>)
 8006e0e:	218f      	movs	r1, #143	; 0x8f
 8006e10:	f7ff f818 	bl	8005e44 <__assert_func>
 8006e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e18:	6006      	str	r6, [r0, #0]
 8006e1a:	60c6      	str	r6, [r0, #12]
 8006e1c:	b13c      	cbz	r4, 8006e2e <_Bfree+0x3a>
 8006e1e:	69eb      	ldr	r3, [r5, #28]
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e28:	6021      	str	r1, [r4, #0]
 8006e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	08009654 	.word	0x08009654
 8006e34:	080097ae 	.word	0x080097ae

08006e38 <__multadd>:
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	690d      	ldr	r5, [r1, #16]
 8006e3e:	4607      	mov	r7, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	461e      	mov	r6, r3
 8006e44:	f101 0c14 	add.w	ip, r1, #20
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e4e:	b299      	uxth	r1, r3
 8006e50:	fb02 6101 	mla	r1, r2, r1, r6
 8006e54:	0c1e      	lsrs	r6, r3, #16
 8006e56:	0c0b      	lsrs	r3, r1, #16
 8006e58:	fb02 3306 	mla	r3, r2, r6, r3
 8006e5c:	b289      	uxth	r1, r1
 8006e5e:	3001      	adds	r0, #1
 8006e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e64:	4285      	cmp	r5, r0
 8006e66:	f84c 1b04 	str.w	r1, [ip], #4
 8006e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e6e:	dcec      	bgt.n	8006e4a <__multadd+0x12>
 8006e70:	b30e      	cbz	r6, 8006eb6 <__multadd+0x7e>
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dc19      	bgt.n	8006eac <__multadd+0x74>
 8006e78:	6861      	ldr	r1, [r4, #4]
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	3101      	adds	r1, #1
 8006e7e:	f7ff ff79 	bl	8006d74 <_Balloc>
 8006e82:	4680      	mov	r8, r0
 8006e84:	b928      	cbnz	r0, 8006e92 <__multadd+0x5a>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <__multadd+0x84>)
 8006e8a:	480d      	ldr	r0, [pc, #52]	; (8006ec0 <__multadd+0x88>)
 8006e8c:	21ba      	movs	r1, #186	; 0xba
 8006e8e:	f7fe ffd9 	bl	8005e44 <__assert_func>
 8006e92:	6922      	ldr	r2, [r4, #16]
 8006e94:	3202      	adds	r2, #2
 8006e96:	f104 010c 	add.w	r1, r4, #12
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	300c      	adds	r0, #12
 8006e9e:	f001 fd01 	bl	80088a4 <memcpy>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff ffa5 	bl	8006df4 <_Bfree>
 8006eaa:	4644      	mov	r4, r8
 8006eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	615e      	str	r6, [r3, #20]
 8006eb4:	6125      	str	r5, [r4, #16]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	0800979d 	.word	0x0800979d
 8006ec0:	080097ae 	.word	0x080097ae

08006ec4 <__s2b>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4615      	mov	r5, r2
 8006ecc:	461f      	mov	r7, r3
 8006ece:	2209      	movs	r2, #9
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ed8:	2100      	movs	r1, #0
 8006eda:	2201      	movs	r2, #1
 8006edc:	429a      	cmp	r2, r3
 8006ede:	db09      	blt.n	8006ef4 <__s2b+0x30>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff ff47 	bl	8006d74 <_Balloc>
 8006ee6:	b940      	cbnz	r0, 8006efa <__s2b+0x36>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <__s2b+0x8c>)
 8006eec:	4819      	ldr	r0, [pc, #100]	; (8006f54 <__s2b+0x90>)
 8006eee:	21d3      	movs	r1, #211	; 0xd3
 8006ef0:	f7fe ffa8 	bl	8005e44 <__assert_func>
 8006ef4:	0052      	lsls	r2, r2, #1
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	e7f0      	b.n	8006edc <__s2b+0x18>
 8006efa:	9b08      	ldr	r3, [sp, #32]
 8006efc:	6143      	str	r3, [r0, #20]
 8006efe:	2d09      	cmp	r5, #9
 8006f00:	f04f 0301 	mov.w	r3, #1
 8006f04:	6103      	str	r3, [r0, #16]
 8006f06:	dd16      	ble.n	8006f36 <__s2b+0x72>
 8006f08:	f104 0909 	add.w	r9, r4, #9
 8006f0c:	46c8      	mov	r8, r9
 8006f0e:	442c      	add	r4, r5
 8006f10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f14:	4601      	mov	r1, r0
 8006f16:	3b30      	subs	r3, #48	; 0x30
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ff8c 	bl	8006e38 <__multadd>
 8006f20:	45a0      	cmp	r8, r4
 8006f22:	d1f5      	bne.n	8006f10 <__s2b+0x4c>
 8006f24:	f1a5 0408 	sub.w	r4, r5, #8
 8006f28:	444c      	add	r4, r9
 8006f2a:	1b2d      	subs	r5, r5, r4
 8006f2c:	1963      	adds	r3, r4, r5
 8006f2e:	42bb      	cmp	r3, r7
 8006f30:	db04      	blt.n	8006f3c <__s2b+0x78>
 8006f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f36:	340a      	adds	r4, #10
 8006f38:	2509      	movs	r5, #9
 8006f3a:	e7f6      	b.n	8006f2a <__s2b+0x66>
 8006f3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f40:	4601      	mov	r1, r0
 8006f42:	3b30      	subs	r3, #48	; 0x30
 8006f44:	220a      	movs	r2, #10
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7ff ff76 	bl	8006e38 <__multadd>
 8006f4c:	e7ee      	b.n	8006f2c <__s2b+0x68>
 8006f4e:	bf00      	nop
 8006f50:	0800979d 	.word	0x0800979d
 8006f54:	080097ae 	.word	0x080097ae

08006f58 <__hi0bits>:
 8006f58:	0c03      	lsrs	r3, r0, #16
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	b9d3      	cbnz	r3, 8006f94 <__hi0bits+0x3c>
 8006f5e:	0400      	lsls	r0, r0, #16
 8006f60:	2310      	movs	r3, #16
 8006f62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f66:	bf04      	itt	eq
 8006f68:	0200      	lsleq	r0, r0, #8
 8006f6a:	3308      	addeq	r3, #8
 8006f6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f70:	bf04      	itt	eq
 8006f72:	0100      	lsleq	r0, r0, #4
 8006f74:	3304      	addeq	r3, #4
 8006f76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f7a:	bf04      	itt	eq
 8006f7c:	0080      	lsleq	r0, r0, #2
 8006f7e:	3302      	addeq	r3, #2
 8006f80:	2800      	cmp	r0, #0
 8006f82:	db05      	blt.n	8006f90 <__hi0bits+0x38>
 8006f84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f88:	f103 0301 	add.w	r3, r3, #1
 8006f8c:	bf08      	it	eq
 8006f8e:	2320      	moveq	r3, #32
 8006f90:	4618      	mov	r0, r3
 8006f92:	4770      	bx	lr
 8006f94:	2300      	movs	r3, #0
 8006f96:	e7e4      	b.n	8006f62 <__hi0bits+0xa>

08006f98 <__lo0bits>:
 8006f98:	6803      	ldr	r3, [r0, #0]
 8006f9a:	f013 0207 	ands.w	r2, r3, #7
 8006f9e:	d00c      	beq.n	8006fba <__lo0bits+0x22>
 8006fa0:	07d9      	lsls	r1, r3, #31
 8006fa2:	d422      	bmi.n	8006fea <__lo0bits+0x52>
 8006fa4:	079a      	lsls	r2, r3, #30
 8006fa6:	bf49      	itett	mi
 8006fa8:	085b      	lsrmi	r3, r3, #1
 8006faa:	089b      	lsrpl	r3, r3, #2
 8006fac:	6003      	strmi	r3, [r0, #0]
 8006fae:	2201      	movmi	r2, #1
 8006fb0:	bf5c      	itt	pl
 8006fb2:	6003      	strpl	r3, [r0, #0]
 8006fb4:	2202      	movpl	r2, #2
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4770      	bx	lr
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	b909      	cbnz	r1, 8006fc2 <__lo0bits+0x2a>
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	2210      	movs	r2, #16
 8006fc2:	b2d9      	uxtb	r1, r3
 8006fc4:	b909      	cbnz	r1, 8006fca <__lo0bits+0x32>
 8006fc6:	3208      	adds	r2, #8
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	0719      	lsls	r1, r3, #28
 8006fcc:	bf04      	itt	eq
 8006fce:	091b      	lsreq	r3, r3, #4
 8006fd0:	3204      	addeq	r2, #4
 8006fd2:	0799      	lsls	r1, r3, #30
 8006fd4:	bf04      	itt	eq
 8006fd6:	089b      	lsreq	r3, r3, #2
 8006fd8:	3202      	addeq	r2, #2
 8006fda:	07d9      	lsls	r1, r3, #31
 8006fdc:	d403      	bmi.n	8006fe6 <__lo0bits+0x4e>
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	f102 0201 	add.w	r2, r2, #1
 8006fe4:	d003      	beq.n	8006fee <__lo0bits+0x56>
 8006fe6:	6003      	str	r3, [r0, #0]
 8006fe8:	e7e5      	b.n	8006fb6 <__lo0bits+0x1e>
 8006fea:	2200      	movs	r2, #0
 8006fec:	e7e3      	b.n	8006fb6 <__lo0bits+0x1e>
 8006fee:	2220      	movs	r2, #32
 8006ff0:	e7e1      	b.n	8006fb6 <__lo0bits+0x1e>
	...

08006ff4 <__i2b>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	f7ff febb 	bl	8006d74 <_Balloc>
 8006ffe:	4602      	mov	r2, r0
 8007000:	b928      	cbnz	r0, 800700e <__i2b+0x1a>
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <__i2b+0x24>)
 8007004:	4805      	ldr	r0, [pc, #20]	; (800701c <__i2b+0x28>)
 8007006:	f240 1145 	movw	r1, #325	; 0x145
 800700a:	f7fe ff1b 	bl	8005e44 <__assert_func>
 800700e:	2301      	movs	r3, #1
 8007010:	6144      	str	r4, [r0, #20]
 8007012:	6103      	str	r3, [r0, #16]
 8007014:	bd10      	pop	{r4, pc}
 8007016:	bf00      	nop
 8007018:	0800979d 	.word	0x0800979d
 800701c:	080097ae 	.word	0x080097ae

08007020 <__multiply>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	4691      	mov	r9, r2
 8007026:	690a      	ldr	r2, [r1, #16]
 8007028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800702c:	429a      	cmp	r2, r3
 800702e:	bfb8      	it	lt
 8007030:	460b      	movlt	r3, r1
 8007032:	460c      	mov	r4, r1
 8007034:	bfbc      	itt	lt
 8007036:	464c      	movlt	r4, r9
 8007038:	4699      	movlt	r9, r3
 800703a:	6927      	ldr	r7, [r4, #16]
 800703c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007040:	68a3      	ldr	r3, [r4, #8]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	eb07 060a 	add.w	r6, r7, sl
 8007048:	42b3      	cmp	r3, r6
 800704a:	b085      	sub	sp, #20
 800704c:	bfb8      	it	lt
 800704e:	3101      	addlt	r1, #1
 8007050:	f7ff fe90 	bl	8006d74 <_Balloc>
 8007054:	b930      	cbnz	r0, 8007064 <__multiply+0x44>
 8007056:	4602      	mov	r2, r0
 8007058:	4b44      	ldr	r3, [pc, #272]	; (800716c <__multiply+0x14c>)
 800705a:	4845      	ldr	r0, [pc, #276]	; (8007170 <__multiply+0x150>)
 800705c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007060:	f7fe fef0 	bl	8005e44 <__assert_func>
 8007064:	f100 0514 	add.w	r5, r0, #20
 8007068:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800706c:	462b      	mov	r3, r5
 800706e:	2200      	movs	r2, #0
 8007070:	4543      	cmp	r3, r8
 8007072:	d321      	bcc.n	80070b8 <__multiply+0x98>
 8007074:	f104 0314 	add.w	r3, r4, #20
 8007078:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800707c:	f109 0314 	add.w	r3, r9, #20
 8007080:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007084:	9202      	str	r2, [sp, #8]
 8007086:	1b3a      	subs	r2, r7, r4
 8007088:	3a15      	subs	r2, #21
 800708a:	f022 0203 	bic.w	r2, r2, #3
 800708e:	3204      	adds	r2, #4
 8007090:	f104 0115 	add.w	r1, r4, #21
 8007094:	428f      	cmp	r7, r1
 8007096:	bf38      	it	cc
 8007098:	2204      	movcc	r2, #4
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9a02      	ldr	r2, [sp, #8]
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d80c      	bhi.n	80070be <__multiply+0x9e>
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	dd03      	ble.n	80070b0 <__multiply+0x90>
 80070a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d05b      	beq.n	8007168 <__multiply+0x148>
 80070b0:	6106      	str	r6, [r0, #16]
 80070b2:	b005      	add	sp, #20
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	f843 2b04 	str.w	r2, [r3], #4
 80070bc:	e7d8      	b.n	8007070 <__multiply+0x50>
 80070be:	f8b3 a000 	ldrh.w	sl, [r3]
 80070c2:	f1ba 0f00 	cmp.w	sl, #0
 80070c6:	d024      	beq.n	8007112 <__multiply+0xf2>
 80070c8:	f104 0e14 	add.w	lr, r4, #20
 80070cc:	46a9      	mov	r9, r5
 80070ce:	f04f 0c00 	mov.w	ip, #0
 80070d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070d6:	f8d9 1000 	ldr.w	r1, [r9]
 80070da:	fa1f fb82 	uxth.w	fp, r2
 80070de:	b289      	uxth	r1, r1
 80070e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80070e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070e8:	f8d9 2000 	ldr.w	r2, [r9]
 80070ec:	4461      	add	r1, ip
 80070ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80070f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070fa:	b289      	uxth	r1, r1
 80070fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007100:	4577      	cmp	r7, lr
 8007102:	f849 1b04 	str.w	r1, [r9], #4
 8007106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800710a:	d8e2      	bhi.n	80070d2 <__multiply+0xb2>
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	f845 c002 	str.w	ip, [r5, r2]
 8007112:	9a03      	ldr	r2, [sp, #12]
 8007114:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007118:	3304      	adds	r3, #4
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	d021      	beq.n	8007164 <__multiply+0x144>
 8007120:	6829      	ldr	r1, [r5, #0]
 8007122:	f104 0c14 	add.w	ip, r4, #20
 8007126:	46ae      	mov	lr, r5
 8007128:	f04f 0a00 	mov.w	sl, #0
 800712c:	f8bc b000 	ldrh.w	fp, [ip]
 8007130:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007134:	fb09 220b 	mla	r2, r9, fp, r2
 8007138:	4452      	add	r2, sl
 800713a:	b289      	uxth	r1, r1
 800713c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007140:	f84e 1b04 	str.w	r1, [lr], #4
 8007144:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007148:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800714c:	f8be 1000 	ldrh.w	r1, [lr]
 8007150:	fb09 110a 	mla	r1, r9, sl, r1
 8007154:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007158:	4567      	cmp	r7, ip
 800715a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800715e:	d8e5      	bhi.n	800712c <__multiply+0x10c>
 8007160:	9a01      	ldr	r2, [sp, #4]
 8007162:	50a9      	str	r1, [r5, r2]
 8007164:	3504      	adds	r5, #4
 8007166:	e799      	b.n	800709c <__multiply+0x7c>
 8007168:	3e01      	subs	r6, #1
 800716a:	e79b      	b.n	80070a4 <__multiply+0x84>
 800716c:	0800979d 	.word	0x0800979d
 8007170:	080097ae 	.word	0x080097ae

08007174 <__pow5mult>:
 8007174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007178:	4615      	mov	r5, r2
 800717a:	f012 0203 	ands.w	r2, r2, #3
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	d007      	beq.n	8007194 <__pow5mult+0x20>
 8007184:	4c25      	ldr	r4, [pc, #148]	; (800721c <__pow5mult+0xa8>)
 8007186:	3a01      	subs	r2, #1
 8007188:	2300      	movs	r3, #0
 800718a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800718e:	f7ff fe53 	bl	8006e38 <__multadd>
 8007192:	4607      	mov	r7, r0
 8007194:	10ad      	asrs	r5, r5, #2
 8007196:	d03d      	beq.n	8007214 <__pow5mult+0xa0>
 8007198:	69f4      	ldr	r4, [r6, #28]
 800719a:	b97c      	cbnz	r4, 80071bc <__pow5mult+0x48>
 800719c:	2010      	movs	r0, #16
 800719e:	f7ff fd35 	bl	8006c0c <malloc>
 80071a2:	4602      	mov	r2, r0
 80071a4:	61f0      	str	r0, [r6, #28]
 80071a6:	b928      	cbnz	r0, 80071b4 <__pow5mult+0x40>
 80071a8:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <__pow5mult+0xac>)
 80071aa:	481e      	ldr	r0, [pc, #120]	; (8007224 <__pow5mult+0xb0>)
 80071ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80071b0:	f7fe fe48 	bl	8005e44 <__assert_func>
 80071b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071b8:	6004      	str	r4, [r0, #0]
 80071ba:	60c4      	str	r4, [r0, #12]
 80071bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80071c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071c4:	b94c      	cbnz	r4, 80071da <__pow5mult+0x66>
 80071c6:	f240 2171 	movw	r1, #625	; 0x271
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff12 	bl	8006ff4 <__i2b>
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80071d6:	4604      	mov	r4, r0
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	07eb      	lsls	r3, r5, #31
 80071e0:	d50a      	bpl.n	80071f8 <__pow5mult+0x84>
 80071e2:	4639      	mov	r1, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4630      	mov	r0, r6
 80071e8:	f7ff ff1a 	bl	8007020 <__multiply>
 80071ec:	4639      	mov	r1, r7
 80071ee:	4680      	mov	r8, r0
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff fdff 	bl	8006df4 <_Bfree>
 80071f6:	4647      	mov	r7, r8
 80071f8:	106d      	asrs	r5, r5, #1
 80071fa:	d00b      	beq.n	8007214 <__pow5mult+0xa0>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	b938      	cbnz	r0, 8007210 <__pow5mult+0x9c>
 8007200:	4622      	mov	r2, r4
 8007202:	4621      	mov	r1, r4
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ff0b 	bl	8007020 <__multiply>
 800720a:	6020      	str	r0, [r4, #0]
 800720c:	f8c0 9000 	str.w	r9, [r0]
 8007210:	4604      	mov	r4, r0
 8007212:	e7e4      	b.n	80071de <__pow5mult+0x6a>
 8007214:	4638      	mov	r0, r7
 8007216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721a:	bf00      	nop
 800721c:	080098f8 	.word	0x080098f8
 8007220:	08009654 	.word	0x08009654
 8007224:	080097ae 	.word	0x080097ae

08007228 <__lshift>:
 8007228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	460c      	mov	r4, r1
 800722e:	6849      	ldr	r1, [r1, #4]
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007236:	68a3      	ldr	r3, [r4, #8]
 8007238:	4607      	mov	r7, r0
 800723a:	4691      	mov	r9, r2
 800723c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007240:	f108 0601 	add.w	r6, r8, #1
 8007244:	42b3      	cmp	r3, r6
 8007246:	db0b      	blt.n	8007260 <__lshift+0x38>
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff fd93 	bl	8006d74 <_Balloc>
 800724e:	4605      	mov	r5, r0
 8007250:	b948      	cbnz	r0, 8007266 <__lshift+0x3e>
 8007252:	4602      	mov	r2, r0
 8007254:	4b28      	ldr	r3, [pc, #160]	; (80072f8 <__lshift+0xd0>)
 8007256:	4829      	ldr	r0, [pc, #164]	; (80072fc <__lshift+0xd4>)
 8007258:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800725c:	f7fe fdf2 	bl	8005e44 <__assert_func>
 8007260:	3101      	adds	r1, #1
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	e7ee      	b.n	8007244 <__lshift+0x1c>
 8007266:	2300      	movs	r3, #0
 8007268:	f100 0114 	add.w	r1, r0, #20
 800726c:	f100 0210 	add.w	r2, r0, #16
 8007270:	4618      	mov	r0, r3
 8007272:	4553      	cmp	r3, sl
 8007274:	db33      	blt.n	80072de <__lshift+0xb6>
 8007276:	6920      	ldr	r0, [r4, #16]
 8007278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800727c:	f104 0314 	add.w	r3, r4, #20
 8007280:	f019 091f 	ands.w	r9, r9, #31
 8007284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800728c:	d02b      	beq.n	80072e6 <__lshift+0xbe>
 800728e:	f1c9 0e20 	rsb	lr, r9, #32
 8007292:	468a      	mov	sl, r1
 8007294:	2200      	movs	r2, #0
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	fa00 f009 	lsl.w	r0, r0, r9
 800729c:	4310      	orrs	r0, r2
 800729e:	f84a 0b04 	str.w	r0, [sl], #4
 80072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a6:	459c      	cmp	ip, r3
 80072a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072ac:	d8f3      	bhi.n	8007296 <__lshift+0x6e>
 80072ae:	ebac 0304 	sub.w	r3, ip, r4
 80072b2:	3b15      	subs	r3, #21
 80072b4:	f023 0303 	bic.w	r3, r3, #3
 80072b8:	3304      	adds	r3, #4
 80072ba:	f104 0015 	add.w	r0, r4, #21
 80072be:	4584      	cmp	ip, r0
 80072c0:	bf38      	it	cc
 80072c2:	2304      	movcc	r3, #4
 80072c4:	50ca      	str	r2, [r1, r3]
 80072c6:	b10a      	cbz	r2, 80072cc <__lshift+0xa4>
 80072c8:	f108 0602 	add.w	r6, r8, #2
 80072cc:	3e01      	subs	r6, #1
 80072ce:	4638      	mov	r0, r7
 80072d0:	612e      	str	r6, [r5, #16]
 80072d2:	4621      	mov	r1, r4
 80072d4:	f7ff fd8e 	bl	8006df4 <_Bfree>
 80072d8:	4628      	mov	r0, r5
 80072da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072de:	f842 0f04 	str.w	r0, [r2, #4]!
 80072e2:	3301      	adds	r3, #1
 80072e4:	e7c5      	b.n	8007272 <__lshift+0x4a>
 80072e6:	3904      	subs	r1, #4
 80072e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80072f0:	459c      	cmp	ip, r3
 80072f2:	d8f9      	bhi.n	80072e8 <__lshift+0xc0>
 80072f4:	e7ea      	b.n	80072cc <__lshift+0xa4>
 80072f6:	bf00      	nop
 80072f8:	0800979d 	.word	0x0800979d
 80072fc:	080097ae 	.word	0x080097ae

08007300 <__mcmp>:
 8007300:	b530      	push	{r4, r5, lr}
 8007302:	6902      	ldr	r2, [r0, #16]
 8007304:	690c      	ldr	r4, [r1, #16]
 8007306:	1b12      	subs	r2, r2, r4
 8007308:	d10e      	bne.n	8007328 <__mcmp+0x28>
 800730a:	f100 0314 	add.w	r3, r0, #20
 800730e:	3114      	adds	r1, #20
 8007310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800731c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007320:	42a5      	cmp	r5, r4
 8007322:	d003      	beq.n	800732c <__mcmp+0x2c>
 8007324:	d305      	bcc.n	8007332 <__mcmp+0x32>
 8007326:	2201      	movs	r2, #1
 8007328:	4610      	mov	r0, r2
 800732a:	bd30      	pop	{r4, r5, pc}
 800732c:	4283      	cmp	r3, r0
 800732e:	d3f3      	bcc.n	8007318 <__mcmp+0x18>
 8007330:	e7fa      	b.n	8007328 <__mcmp+0x28>
 8007332:	f04f 32ff 	mov.w	r2, #4294967295
 8007336:	e7f7      	b.n	8007328 <__mcmp+0x28>

08007338 <__mdiff>:
 8007338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	460c      	mov	r4, r1
 800733e:	4606      	mov	r6, r0
 8007340:	4611      	mov	r1, r2
 8007342:	4620      	mov	r0, r4
 8007344:	4690      	mov	r8, r2
 8007346:	f7ff ffdb 	bl	8007300 <__mcmp>
 800734a:	1e05      	subs	r5, r0, #0
 800734c:	d110      	bne.n	8007370 <__mdiff+0x38>
 800734e:	4629      	mov	r1, r5
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff fd0f 	bl	8006d74 <_Balloc>
 8007356:	b930      	cbnz	r0, 8007366 <__mdiff+0x2e>
 8007358:	4b3a      	ldr	r3, [pc, #232]	; (8007444 <__mdiff+0x10c>)
 800735a:	4602      	mov	r2, r0
 800735c:	f240 2137 	movw	r1, #567	; 0x237
 8007360:	4839      	ldr	r0, [pc, #228]	; (8007448 <__mdiff+0x110>)
 8007362:	f7fe fd6f 	bl	8005e44 <__assert_func>
 8007366:	2301      	movs	r3, #1
 8007368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800736c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007370:	bfa4      	itt	ge
 8007372:	4643      	movge	r3, r8
 8007374:	46a0      	movge	r8, r4
 8007376:	4630      	mov	r0, r6
 8007378:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800737c:	bfa6      	itte	ge
 800737e:	461c      	movge	r4, r3
 8007380:	2500      	movge	r5, #0
 8007382:	2501      	movlt	r5, #1
 8007384:	f7ff fcf6 	bl	8006d74 <_Balloc>
 8007388:	b920      	cbnz	r0, 8007394 <__mdiff+0x5c>
 800738a:	4b2e      	ldr	r3, [pc, #184]	; (8007444 <__mdiff+0x10c>)
 800738c:	4602      	mov	r2, r0
 800738e:	f240 2145 	movw	r1, #581	; 0x245
 8007392:	e7e5      	b.n	8007360 <__mdiff+0x28>
 8007394:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007398:	6926      	ldr	r6, [r4, #16]
 800739a:	60c5      	str	r5, [r0, #12]
 800739c:	f104 0914 	add.w	r9, r4, #20
 80073a0:	f108 0514 	add.w	r5, r8, #20
 80073a4:	f100 0e14 	add.w	lr, r0, #20
 80073a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073b0:	f108 0210 	add.w	r2, r8, #16
 80073b4:	46f2      	mov	sl, lr
 80073b6:	2100      	movs	r1, #0
 80073b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073c0:	fa11 f88b 	uxtah	r8, r1, fp
 80073c4:	b299      	uxth	r1, r3
 80073c6:	0c1b      	lsrs	r3, r3, #16
 80073c8:	eba8 0801 	sub.w	r8, r8, r1
 80073cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073d4:	fa1f f888 	uxth.w	r8, r8
 80073d8:	1419      	asrs	r1, r3, #16
 80073da:	454e      	cmp	r6, r9
 80073dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073e0:	f84a 3b04 	str.w	r3, [sl], #4
 80073e4:	d8e8      	bhi.n	80073b8 <__mdiff+0x80>
 80073e6:	1b33      	subs	r3, r6, r4
 80073e8:	3b15      	subs	r3, #21
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	3304      	adds	r3, #4
 80073f0:	3415      	adds	r4, #21
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	bf38      	it	cc
 80073f6:	2304      	movcc	r3, #4
 80073f8:	441d      	add	r5, r3
 80073fa:	4473      	add	r3, lr
 80073fc:	469e      	mov	lr, r3
 80073fe:	462e      	mov	r6, r5
 8007400:	4566      	cmp	r6, ip
 8007402:	d30e      	bcc.n	8007422 <__mdiff+0xea>
 8007404:	f10c 0203 	add.w	r2, ip, #3
 8007408:	1b52      	subs	r2, r2, r5
 800740a:	f022 0203 	bic.w	r2, r2, #3
 800740e:	3d03      	subs	r5, #3
 8007410:	45ac      	cmp	ip, r5
 8007412:	bf38      	it	cc
 8007414:	2200      	movcc	r2, #0
 8007416:	4413      	add	r3, r2
 8007418:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800741c:	b17a      	cbz	r2, 800743e <__mdiff+0x106>
 800741e:	6107      	str	r7, [r0, #16]
 8007420:	e7a4      	b.n	800736c <__mdiff+0x34>
 8007422:	f856 8b04 	ldr.w	r8, [r6], #4
 8007426:	fa11 f288 	uxtah	r2, r1, r8
 800742a:	1414      	asrs	r4, r2, #16
 800742c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007430:	b292      	uxth	r2, r2
 8007432:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007436:	f84e 2b04 	str.w	r2, [lr], #4
 800743a:	1421      	asrs	r1, r4, #16
 800743c:	e7e0      	b.n	8007400 <__mdiff+0xc8>
 800743e:	3f01      	subs	r7, #1
 8007440:	e7ea      	b.n	8007418 <__mdiff+0xe0>
 8007442:	bf00      	nop
 8007444:	0800979d 	.word	0x0800979d
 8007448:	080097ae 	.word	0x080097ae

0800744c <__ulp>:
 800744c:	b082      	sub	sp, #8
 800744e:	ed8d 0b00 	vstr	d0, [sp]
 8007452:	9a01      	ldr	r2, [sp, #4]
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <__ulp+0x48>)
 8007456:	4013      	ands	r3, r2
 8007458:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800745c:	2b00      	cmp	r3, #0
 800745e:	dc08      	bgt.n	8007472 <__ulp+0x26>
 8007460:	425b      	negs	r3, r3
 8007462:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007466:	ea4f 5223 	mov.w	r2, r3, asr #20
 800746a:	da04      	bge.n	8007476 <__ulp+0x2a>
 800746c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007470:	4113      	asrs	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	e008      	b.n	8007488 <__ulp+0x3c>
 8007476:	f1a2 0314 	sub.w	r3, r2, #20
 800747a:	2b1e      	cmp	r3, #30
 800747c:	bfda      	itte	le
 800747e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007482:	40da      	lsrle	r2, r3
 8007484:	2201      	movgt	r2, #1
 8007486:	2300      	movs	r3, #0
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	ec41 0b10 	vmov	d0, r0, r1
 8007490:	b002      	add	sp, #8
 8007492:	4770      	bx	lr
 8007494:	7ff00000 	.word	0x7ff00000

08007498 <__b2d>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	6906      	ldr	r6, [r0, #16]
 800749e:	f100 0814 	add.w	r8, r0, #20
 80074a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80074a6:	1f37      	subs	r7, r6, #4
 80074a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7ff fd53 	bl	8006f58 <__hi0bits>
 80074b2:	f1c0 0320 	rsb	r3, r0, #32
 80074b6:	280a      	cmp	r0, #10
 80074b8:	600b      	str	r3, [r1, #0]
 80074ba:	491b      	ldr	r1, [pc, #108]	; (8007528 <__b2d+0x90>)
 80074bc:	dc15      	bgt.n	80074ea <__b2d+0x52>
 80074be:	f1c0 0c0b 	rsb	ip, r0, #11
 80074c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80074c6:	45b8      	cmp	r8, r7
 80074c8:	ea43 0501 	orr.w	r5, r3, r1
 80074cc:	bf34      	ite	cc
 80074ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80074d2:	2300      	movcs	r3, #0
 80074d4:	3015      	adds	r0, #21
 80074d6:	fa02 f000 	lsl.w	r0, r2, r0
 80074da:	fa23 f30c 	lsr.w	r3, r3, ip
 80074de:	4303      	orrs	r3, r0
 80074e0:	461c      	mov	r4, r3
 80074e2:	ec45 4b10 	vmov	d0, r4, r5
 80074e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ea:	45b8      	cmp	r8, r7
 80074ec:	bf3a      	itte	cc
 80074ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80074f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80074f6:	2300      	movcs	r3, #0
 80074f8:	380b      	subs	r0, #11
 80074fa:	d012      	beq.n	8007522 <__b2d+0x8a>
 80074fc:	f1c0 0120 	rsb	r1, r0, #32
 8007500:	fa23 f401 	lsr.w	r4, r3, r1
 8007504:	4082      	lsls	r2, r0
 8007506:	4322      	orrs	r2, r4
 8007508:	4547      	cmp	r7, r8
 800750a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800750e:	bf8c      	ite	hi
 8007510:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007514:	2200      	movls	r2, #0
 8007516:	4083      	lsls	r3, r0
 8007518:	40ca      	lsrs	r2, r1
 800751a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800751e:	4313      	orrs	r3, r2
 8007520:	e7de      	b.n	80074e0 <__b2d+0x48>
 8007522:	ea42 0501 	orr.w	r5, r2, r1
 8007526:	e7db      	b.n	80074e0 <__b2d+0x48>
 8007528:	3ff00000 	.word	0x3ff00000

0800752c <__d2b>:
 800752c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007530:	460f      	mov	r7, r1
 8007532:	2101      	movs	r1, #1
 8007534:	ec59 8b10 	vmov	r8, r9, d0
 8007538:	4616      	mov	r6, r2
 800753a:	f7ff fc1b 	bl	8006d74 <_Balloc>
 800753e:	4604      	mov	r4, r0
 8007540:	b930      	cbnz	r0, 8007550 <__d2b+0x24>
 8007542:	4602      	mov	r2, r0
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <__d2b+0xac>)
 8007546:	4825      	ldr	r0, [pc, #148]	; (80075dc <__d2b+0xb0>)
 8007548:	f240 310f 	movw	r1, #783	; 0x30f
 800754c:	f7fe fc7a 	bl	8005e44 <__assert_func>
 8007550:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007554:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007558:	bb2d      	cbnz	r5, 80075a6 <__d2b+0x7a>
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	f1b8 0300 	subs.w	r3, r8, #0
 8007560:	d026      	beq.n	80075b0 <__d2b+0x84>
 8007562:	4668      	mov	r0, sp
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	f7ff fd17 	bl	8006f98 <__lo0bits>
 800756a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800756e:	b1e8      	cbz	r0, 80075ac <__d2b+0x80>
 8007570:	f1c0 0320 	rsb	r3, r0, #32
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	430b      	orrs	r3, r1
 800757a:	40c2      	lsrs	r2, r0
 800757c:	6163      	str	r3, [r4, #20]
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	61a3      	str	r3, [r4, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf14      	ite	ne
 8007588:	2202      	movne	r2, #2
 800758a:	2201      	moveq	r2, #1
 800758c:	6122      	str	r2, [r4, #16]
 800758e:	b1bd      	cbz	r5, 80075c0 <__d2b+0x94>
 8007590:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007594:	4405      	add	r5, r0
 8007596:	603d      	str	r5, [r7, #0]
 8007598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800759c:	6030      	str	r0, [r6, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	b003      	add	sp, #12
 80075a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075aa:	e7d6      	b.n	800755a <__d2b+0x2e>
 80075ac:	6161      	str	r1, [r4, #20]
 80075ae:	e7e7      	b.n	8007580 <__d2b+0x54>
 80075b0:	a801      	add	r0, sp, #4
 80075b2:	f7ff fcf1 	bl	8006f98 <__lo0bits>
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	6163      	str	r3, [r4, #20]
 80075ba:	3020      	adds	r0, #32
 80075bc:	2201      	movs	r2, #1
 80075be:	e7e5      	b.n	800758c <__d2b+0x60>
 80075c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075c8:	6038      	str	r0, [r7, #0]
 80075ca:	6918      	ldr	r0, [r3, #16]
 80075cc:	f7ff fcc4 	bl	8006f58 <__hi0bits>
 80075d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075d4:	e7e2      	b.n	800759c <__d2b+0x70>
 80075d6:	bf00      	nop
 80075d8:	0800979d 	.word	0x0800979d
 80075dc:	080097ae 	.word	0x080097ae

080075e0 <__ratio>:
 80075e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	4688      	mov	r8, r1
 80075e6:	4669      	mov	r1, sp
 80075e8:	4681      	mov	r9, r0
 80075ea:	f7ff ff55 	bl	8007498 <__b2d>
 80075ee:	a901      	add	r1, sp, #4
 80075f0:	4640      	mov	r0, r8
 80075f2:	ec55 4b10 	vmov	r4, r5, d0
 80075f6:	f7ff ff4f 	bl	8007498 <__b2d>
 80075fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007602:	eba3 0c02 	sub.w	ip, r3, r2
 8007606:	e9dd 3200 	ldrd	r3, r2, [sp]
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007610:	ec51 0b10 	vmov	r0, r1, d0
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfd6      	itet	le
 8007618:	460a      	movle	r2, r1
 800761a:	462a      	movgt	r2, r5
 800761c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007620:	468b      	mov	fp, r1
 8007622:	462f      	mov	r7, r5
 8007624:	bfd4      	ite	le
 8007626:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800762a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800762e:	4620      	mov	r0, r4
 8007630:	ee10 2a10 	vmov	r2, s0
 8007634:	465b      	mov	r3, fp
 8007636:	4639      	mov	r1, r7
 8007638:	f7f9 f910 	bl	800085c <__aeabi_ddiv>
 800763c:	ec41 0b10 	vmov	d0, r0, r1
 8007640:	b003      	add	sp, #12
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007646 <__copybits>:
 8007646:	3901      	subs	r1, #1
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	1149      	asrs	r1, r1, #5
 800764c:	6914      	ldr	r4, [r2, #16]
 800764e:	3101      	adds	r1, #1
 8007650:	f102 0314 	add.w	r3, r2, #20
 8007654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800765c:	1f05      	subs	r5, r0, #4
 800765e:	42a3      	cmp	r3, r4
 8007660:	d30c      	bcc.n	800767c <__copybits+0x36>
 8007662:	1aa3      	subs	r3, r4, r2
 8007664:	3b11      	subs	r3, #17
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	3211      	adds	r2, #17
 800766c:	42a2      	cmp	r2, r4
 800766e:	bf88      	it	hi
 8007670:	2300      	movhi	r3, #0
 8007672:	4418      	add	r0, r3
 8007674:	2300      	movs	r3, #0
 8007676:	4288      	cmp	r0, r1
 8007678:	d305      	bcc.n	8007686 <__copybits+0x40>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007680:	f845 6f04 	str.w	r6, [r5, #4]!
 8007684:	e7eb      	b.n	800765e <__copybits+0x18>
 8007686:	f840 3b04 	str.w	r3, [r0], #4
 800768a:	e7f4      	b.n	8007676 <__copybits+0x30>

0800768c <__any_on>:
 800768c:	f100 0214 	add.w	r2, r0, #20
 8007690:	6900      	ldr	r0, [r0, #16]
 8007692:	114b      	asrs	r3, r1, #5
 8007694:	4298      	cmp	r0, r3
 8007696:	b510      	push	{r4, lr}
 8007698:	db11      	blt.n	80076be <__any_on+0x32>
 800769a:	dd0a      	ble.n	80076b2 <__any_on+0x26>
 800769c:	f011 011f 	ands.w	r1, r1, #31
 80076a0:	d007      	beq.n	80076b2 <__any_on+0x26>
 80076a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076a6:	fa24 f001 	lsr.w	r0, r4, r1
 80076aa:	fa00 f101 	lsl.w	r1, r0, r1
 80076ae:	428c      	cmp	r4, r1
 80076b0:	d10b      	bne.n	80076ca <__any_on+0x3e>
 80076b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d803      	bhi.n	80076c2 <__any_on+0x36>
 80076ba:	2000      	movs	r0, #0
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	4603      	mov	r3, r0
 80076c0:	e7f7      	b.n	80076b2 <__any_on+0x26>
 80076c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076c6:	2900      	cmp	r1, #0
 80076c8:	d0f5      	beq.n	80076b6 <__any_on+0x2a>
 80076ca:	2001      	movs	r0, #1
 80076cc:	e7f6      	b.n	80076bc <__any_on+0x30>

080076ce <sulp>:
 80076ce:	b570      	push	{r4, r5, r6, lr}
 80076d0:	4604      	mov	r4, r0
 80076d2:	460d      	mov	r5, r1
 80076d4:	ec45 4b10 	vmov	d0, r4, r5
 80076d8:	4616      	mov	r6, r2
 80076da:	f7ff feb7 	bl	800744c <__ulp>
 80076de:	ec51 0b10 	vmov	r0, r1, d0
 80076e2:	b17e      	cbz	r6, 8007704 <sulp+0x36>
 80076e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80076e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd09      	ble.n	8007704 <sulp+0x36>
 80076f0:	051b      	lsls	r3, r3, #20
 80076f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076f6:	2400      	movs	r4, #0
 80076f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076fc:	4622      	mov	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	f7f8 ff82 	bl	8000608 <__aeabi_dmul>
 8007704:	bd70      	pop	{r4, r5, r6, pc}
	...

08007708 <_strtod_l>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ed2d 8b02 	vpush	{d8}
 8007710:	b09b      	sub	sp, #108	; 0x6c
 8007712:	4604      	mov	r4, r0
 8007714:	9213      	str	r2, [sp, #76]	; 0x4c
 8007716:	2200      	movs	r2, #0
 8007718:	9216      	str	r2, [sp, #88]	; 0x58
 800771a:	460d      	mov	r5, r1
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	f04f 0900 	mov.w	r9, #0
 8007724:	460a      	mov	r2, r1
 8007726:	9215      	str	r2, [sp, #84]	; 0x54
 8007728:	7811      	ldrb	r1, [r2, #0]
 800772a:	292b      	cmp	r1, #43	; 0x2b
 800772c:	d04c      	beq.n	80077c8 <_strtod_l+0xc0>
 800772e:	d83a      	bhi.n	80077a6 <_strtod_l+0x9e>
 8007730:	290d      	cmp	r1, #13
 8007732:	d834      	bhi.n	800779e <_strtod_l+0x96>
 8007734:	2908      	cmp	r1, #8
 8007736:	d834      	bhi.n	80077a2 <_strtod_l+0x9a>
 8007738:	2900      	cmp	r1, #0
 800773a:	d03d      	beq.n	80077b8 <_strtod_l+0xb0>
 800773c:	2200      	movs	r2, #0
 800773e:	920a      	str	r2, [sp, #40]	; 0x28
 8007740:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007742:	7832      	ldrb	r2, [r6, #0]
 8007744:	2a30      	cmp	r2, #48	; 0x30
 8007746:	f040 80b4 	bne.w	80078b2 <_strtod_l+0x1aa>
 800774a:	7872      	ldrb	r2, [r6, #1]
 800774c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007750:	2a58      	cmp	r2, #88	; 0x58
 8007752:	d170      	bne.n	8007836 <_strtod_l+0x12e>
 8007754:	9302      	str	r3, [sp, #8]
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	ab16      	add	r3, sp, #88	; 0x58
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	4a8e      	ldr	r2, [pc, #568]	; (8007998 <_strtod_l+0x290>)
 8007760:	ab17      	add	r3, sp, #92	; 0x5c
 8007762:	a915      	add	r1, sp, #84	; 0x54
 8007764:	4620      	mov	r0, r4
 8007766:	f001 f937 	bl	80089d8 <__gethex>
 800776a:	f010 070f 	ands.w	r7, r0, #15
 800776e:	4605      	mov	r5, r0
 8007770:	d005      	beq.n	800777e <_strtod_l+0x76>
 8007772:	2f06      	cmp	r7, #6
 8007774:	d12a      	bne.n	80077cc <_strtod_l+0xc4>
 8007776:	3601      	adds	r6, #1
 8007778:	2300      	movs	r3, #0
 800777a:	9615      	str	r6, [sp, #84]	; 0x54
 800777c:	930a      	str	r3, [sp, #40]	; 0x28
 800777e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 857f 	bne.w	8008284 <_strtod_l+0xb7c>
 8007786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007788:	b1db      	cbz	r3, 80077c2 <_strtod_l+0xba>
 800778a:	4642      	mov	r2, r8
 800778c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007790:	ec43 2b10 	vmov	d0, r2, r3
 8007794:	b01b      	add	sp, #108	; 0x6c
 8007796:	ecbd 8b02 	vpop	{d8}
 800779a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779e:	2920      	cmp	r1, #32
 80077a0:	d1cc      	bne.n	800773c <_strtod_l+0x34>
 80077a2:	3201      	adds	r2, #1
 80077a4:	e7bf      	b.n	8007726 <_strtod_l+0x1e>
 80077a6:	292d      	cmp	r1, #45	; 0x2d
 80077a8:	d1c8      	bne.n	800773c <_strtod_l+0x34>
 80077aa:	2101      	movs	r1, #1
 80077ac:	910a      	str	r1, [sp, #40]	; 0x28
 80077ae:	1c51      	adds	r1, r2, #1
 80077b0:	9115      	str	r1, [sp, #84]	; 0x54
 80077b2:	7852      	ldrb	r2, [r2, #1]
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d1c3      	bne.n	8007740 <_strtod_l+0x38>
 80077b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ba:	9515      	str	r5, [sp, #84]	; 0x54
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 855f 	bne.w	8008280 <_strtod_l+0xb78>
 80077c2:	4642      	mov	r2, r8
 80077c4:	464b      	mov	r3, r9
 80077c6:	e7e3      	b.n	8007790 <_strtod_l+0x88>
 80077c8:	2100      	movs	r1, #0
 80077ca:	e7ef      	b.n	80077ac <_strtod_l+0xa4>
 80077cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077ce:	b13a      	cbz	r2, 80077e0 <_strtod_l+0xd8>
 80077d0:	2135      	movs	r1, #53	; 0x35
 80077d2:	a818      	add	r0, sp, #96	; 0x60
 80077d4:	f7ff ff37 	bl	8007646 <__copybits>
 80077d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff fb0a 	bl	8006df4 <_Bfree>
 80077e0:	3f01      	subs	r7, #1
 80077e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077e4:	2f04      	cmp	r7, #4
 80077e6:	d806      	bhi.n	80077f6 <_strtod_l+0xee>
 80077e8:	e8df f007 	tbb	[pc, r7]
 80077ec:	201d0314 	.word	0x201d0314
 80077f0:	14          	.byte	0x14
 80077f1:	00          	.byte	0x00
 80077f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80077f6:	05e9      	lsls	r1, r5, #23
 80077f8:	bf48      	it	mi
 80077fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80077fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007802:	0d1b      	lsrs	r3, r3, #20
 8007804:	051b      	lsls	r3, r3, #20
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1b9      	bne.n	800777e <_strtod_l+0x76>
 800780a:	f7fe fae7 	bl	8005ddc <__errno>
 800780e:	2322      	movs	r3, #34	; 0x22
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	e7b4      	b.n	800777e <_strtod_l+0x76>
 8007814:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007818:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800781c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007820:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007824:	e7e7      	b.n	80077f6 <_strtod_l+0xee>
 8007826:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079a0 <_strtod_l+0x298>
 800782a:	e7e4      	b.n	80077f6 <_strtod_l+0xee>
 800782c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007830:	f04f 38ff 	mov.w	r8, #4294967295
 8007834:	e7df      	b.n	80077f6 <_strtod_l+0xee>
 8007836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	9215      	str	r2, [sp, #84]	; 0x54
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b30      	cmp	r3, #48	; 0x30
 8007840:	d0f9      	beq.n	8007836 <_strtod_l+0x12e>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d09b      	beq.n	800777e <_strtod_l+0x76>
 8007846:	2301      	movs	r3, #1
 8007848:	f04f 0a00 	mov.w	sl, #0
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007850:	930b      	str	r3, [sp, #44]	; 0x2c
 8007852:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007856:	46d3      	mov	fp, sl
 8007858:	220a      	movs	r2, #10
 800785a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800785c:	7806      	ldrb	r6, [r0, #0]
 800785e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007862:	b2d9      	uxtb	r1, r3
 8007864:	2909      	cmp	r1, #9
 8007866:	d926      	bls.n	80078b6 <_strtod_l+0x1ae>
 8007868:	494c      	ldr	r1, [pc, #304]	; (800799c <_strtod_l+0x294>)
 800786a:	2201      	movs	r2, #1
 800786c:	f000 fff8 	bl	8008860 <strncmp>
 8007870:	2800      	cmp	r0, #0
 8007872:	d030      	beq.n	80078d6 <_strtod_l+0x1ce>
 8007874:	2000      	movs	r0, #0
 8007876:	4632      	mov	r2, r6
 8007878:	9005      	str	r0, [sp, #20]
 800787a:	465e      	mov	r6, fp
 800787c:	4603      	mov	r3, r0
 800787e:	2a65      	cmp	r2, #101	; 0x65
 8007880:	d001      	beq.n	8007886 <_strtod_l+0x17e>
 8007882:	2a45      	cmp	r2, #69	; 0x45
 8007884:	d113      	bne.n	80078ae <_strtod_l+0x1a6>
 8007886:	b91e      	cbnz	r6, 8007890 <_strtod_l+0x188>
 8007888:	9a04      	ldr	r2, [sp, #16]
 800788a:	4302      	orrs	r2, r0
 800788c:	d094      	beq.n	80077b8 <_strtod_l+0xb0>
 800788e:	2600      	movs	r6, #0
 8007890:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007892:	1c6a      	adds	r2, r5, #1
 8007894:	9215      	str	r2, [sp, #84]	; 0x54
 8007896:	786a      	ldrb	r2, [r5, #1]
 8007898:	2a2b      	cmp	r2, #43	; 0x2b
 800789a:	d074      	beq.n	8007986 <_strtod_l+0x27e>
 800789c:	2a2d      	cmp	r2, #45	; 0x2d
 800789e:	d078      	beq.n	8007992 <_strtod_l+0x28a>
 80078a0:	f04f 0c00 	mov.w	ip, #0
 80078a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078a8:	2909      	cmp	r1, #9
 80078aa:	d97f      	bls.n	80079ac <_strtod_l+0x2a4>
 80078ac:	9515      	str	r5, [sp, #84]	; 0x54
 80078ae:	2700      	movs	r7, #0
 80078b0:	e09e      	b.n	80079f0 <_strtod_l+0x2e8>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e7c8      	b.n	8007848 <_strtod_l+0x140>
 80078b6:	f1bb 0f08 	cmp.w	fp, #8
 80078ba:	bfd8      	it	le
 80078bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80078be:	f100 0001 	add.w	r0, r0, #1
 80078c2:	bfda      	itte	le
 80078c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80078c8:	9309      	strle	r3, [sp, #36]	; 0x24
 80078ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80078ce:	f10b 0b01 	add.w	fp, fp, #1
 80078d2:	9015      	str	r0, [sp, #84]	; 0x54
 80078d4:	e7c1      	b.n	800785a <_strtod_l+0x152>
 80078d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	9215      	str	r2, [sp, #84]	; 0x54
 80078dc:	785a      	ldrb	r2, [r3, #1]
 80078de:	f1bb 0f00 	cmp.w	fp, #0
 80078e2:	d037      	beq.n	8007954 <_strtod_l+0x24c>
 80078e4:	9005      	str	r0, [sp, #20]
 80078e6:	465e      	mov	r6, fp
 80078e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	d912      	bls.n	8007916 <_strtod_l+0x20e>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e7c4      	b.n	800787e <_strtod_l+0x176>
 80078f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	9215      	str	r2, [sp, #84]	; 0x54
 80078fa:	785a      	ldrb	r2, [r3, #1]
 80078fc:	3001      	adds	r0, #1
 80078fe:	2a30      	cmp	r2, #48	; 0x30
 8007900:	d0f8      	beq.n	80078f4 <_strtod_l+0x1ec>
 8007902:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007906:	2b08      	cmp	r3, #8
 8007908:	f200 84c1 	bhi.w	800828e <_strtod_l+0xb86>
 800790c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790e:	9005      	str	r0, [sp, #20]
 8007910:	2000      	movs	r0, #0
 8007912:	930b      	str	r3, [sp, #44]	; 0x2c
 8007914:	4606      	mov	r6, r0
 8007916:	3a30      	subs	r2, #48	; 0x30
 8007918:	f100 0301 	add.w	r3, r0, #1
 800791c:	d014      	beq.n	8007948 <_strtod_l+0x240>
 800791e:	9905      	ldr	r1, [sp, #20]
 8007920:	4419      	add	r1, r3
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	4633      	mov	r3, r6
 8007926:	eb00 0c06 	add.w	ip, r0, r6
 800792a:	210a      	movs	r1, #10
 800792c:	4563      	cmp	r3, ip
 800792e:	d113      	bne.n	8007958 <_strtod_l+0x250>
 8007930:	1833      	adds	r3, r6, r0
 8007932:	2b08      	cmp	r3, #8
 8007934:	f106 0601 	add.w	r6, r6, #1
 8007938:	4406      	add	r6, r0
 800793a:	dc1a      	bgt.n	8007972 <_strtod_l+0x26a>
 800793c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800793e:	230a      	movs	r3, #10
 8007940:	fb03 2301 	mla	r3, r3, r1, r2
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	2300      	movs	r3, #0
 8007948:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800794a:	1c51      	adds	r1, r2, #1
 800794c:	9115      	str	r1, [sp, #84]	; 0x54
 800794e:	7852      	ldrb	r2, [r2, #1]
 8007950:	4618      	mov	r0, r3
 8007952:	e7c9      	b.n	80078e8 <_strtod_l+0x1e0>
 8007954:	4658      	mov	r0, fp
 8007956:	e7d2      	b.n	80078fe <_strtod_l+0x1f6>
 8007958:	2b08      	cmp	r3, #8
 800795a:	f103 0301 	add.w	r3, r3, #1
 800795e:	dc03      	bgt.n	8007968 <_strtod_l+0x260>
 8007960:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007962:	434f      	muls	r7, r1
 8007964:	9709      	str	r7, [sp, #36]	; 0x24
 8007966:	e7e1      	b.n	800792c <_strtod_l+0x224>
 8007968:	2b10      	cmp	r3, #16
 800796a:	bfd8      	it	le
 800796c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007970:	e7dc      	b.n	800792c <_strtod_l+0x224>
 8007972:	2e10      	cmp	r6, #16
 8007974:	bfdc      	itt	le
 8007976:	230a      	movle	r3, #10
 8007978:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800797c:	e7e3      	b.n	8007946 <_strtod_l+0x23e>
 800797e:	2300      	movs	r3, #0
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	2301      	movs	r3, #1
 8007984:	e780      	b.n	8007888 <_strtod_l+0x180>
 8007986:	f04f 0c00 	mov.w	ip, #0
 800798a:	1caa      	adds	r2, r5, #2
 800798c:	9215      	str	r2, [sp, #84]	; 0x54
 800798e:	78aa      	ldrb	r2, [r5, #2]
 8007990:	e788      	b.n	80078a4 <_strtod_l+0x19c>
 8007992:	f04f 0c01 	mov.w	ip, #1
 8007996:	e7f8      	b.n	800798a <_strtod_l+0x282>
 8007998:	08009908 	.word	0x08009908
 800799c:	08009904 	.word	0x08009904
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079a6:	1c51      	adds	r1, r2, #1
 80079a8:	9115      	str	r1, [sp, #84]	; 0x54
 80079aa:	7852      	ldrb	r2, [r2, #1]
 80079ac:	2a30      	cmp	r2, #48	; 0x30
 80079ae:	d0f9      	beq.n	80079a4 <_strtod_l+0x29c>
 80079b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80079b4:	2908      	cmp	r1, #8
 80079b6:	f63f af7a 	bhi.w	80078ae <_strtod_l+0x1a6>
 80079ba:	3a30      	subs	r2, #48	; 0x30
 80079bc:	9208      	str	r2, [sp, #32]
 80079be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079c0:	920c      	str	r2, [sp, #48]	; 0x30
 80079c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079c4:	1c57      	adds	r7, r2, #1
 80079c6:	9715      	str	r7, [sp, #84]	; 0x54
 80079c8:	7852      	ldrb	r2, [r2, #1]
 80079ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80079ce:	f1be 0f09 	cmp.w	lr, #9
 80079d2:	d938      	bls.n	8007a46 <_strtod_l+0x33e>
 80079d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079d6:	1a7f      	subs	r7, r7, r1
 80079d8:	2f08      	cmp	r7, #8
 80079da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80079de:	dc03      	bgt.n	80079e8 <_strtod_l+0x2e0>
 80079e0:	9908      	ldr	r1, [sp, #32]
 80079e2:	428f      	cmp	r7, r1
 80079e4:	bfa8      	it	ge
 80079e6:	460f      	movge	r7, r1
 80079e8:	f1bc 0f00 	cmp.w	ip, #0
 80079ec:	d000      	beq.n	80079f0 <_strtod_l+0x2e8>
 80079ee:	427f      	negs	r7, r7
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	d14f      	bne.n	8007a94 <_strtod_l+0x38c>
 80079f4:	9904      	ldr	r1, [sp, #16]
 80079f6:	4301      	orrs	r1, r0
 80079f8:	f47f aec1 	bne.w	800777e <_strtod_l+0x76>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f aedb 	bne.w	80077b8 <_strtod_l+0xb0>
 8007a02:	2a69      	cmp	r2, #105	; 0x69
 8007a04:	d029      	beq.n	8007a5a <_strtod_l+0x352>
 8007a06:	dc26      	bgt.n	8007a56 <_strtod_l+0x34e>
 8007a08:	2a49      	cmp	r2, #73	; 0x49
 8007a0a:	d026      	beq.n	8007a5a <_strtod_l+0x352>
 8007a0c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a0e:	f47f aed3 	bne.w	80077b8 <_strtod_l+0xb0>
 8007a12:	499b      	ldr	r1, [pc, #620]	; (8007c80 <_strtod_l+0x578>)
 8007a14:	a815      	add	r0, sp, #84	; 0x54
 8007a16:	f001 fa1f 	bl	8008e58 <__match>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f43f aecc 	beq.w	80077b8 <_strtod_l+0xb0>
 8007a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b28      	cmp	r3, #40	; 0x28
 8007a26:	d12f      	bne.n	8007a88 <_strtod_l+0x380>
 8007a28:	4996      	ldr	r1, [pc, #600]	; (8007c84 <_strtod_l+0x57c>)
 8007a2a:	aa18      	add	r2, sp, #96	; 0x60
 8007a2c:	a815      	add	r0, sp, #84	; 0x54
 8007a2e:	f001 fa27 	bl	8008e80 <__hexnan>
 8007a32:	2805      	cmp	r0, #5
 8007a34:	d128      	bne.n	8007a88 <_strtod_l+0x380>
 8007a36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a44:	e69b      	b.n	800777e <_strtod_l+0x76>
 8007a46:	9f08      	ldr	r7, [sp, #32]
 8007a48:	210a      	movs	r1, #10
 8007a4a:	fb01 2107 	mla	r1, r1, r7, r2
 8007a4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007a52:	9208      	str	r2, [sp, #32]
 8007a54:	e7b5      	b.n	80079c2 <_strtod_l+0x2ba>
 8007a56:	2a6e      	cmp	r2, #110	; 0x6e
 8007a58:	e7d9      	b.n	8007a0e <_strtod_l+0x306>
 8007a5a:	498b      	ldr	r1, [pc, #556]	; (8007c88 <_strtod_l+0x580>)
 8007a5c:	a815      	add	r0, sp, #84	; 0x54
 8007a5e:	f001 f9fb 	bl	8008e58 <__match>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f43f aea8 	beq.w	80077b8 <_strtod_l+0xb0>
 8007a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a6a:	4988      	ldr	r1, [pc, #544]	; (8007c8c <_strtod_l+0x584>)
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	a815      	add	r0, sp, #84	; 0x54
 8007a70:	9315      	str	r3, [sp, #84]	; 0x54
 8007a72:	f001 f9f1 	bl	8008e58 <__match>
 8007a76:	b910      	cbnz	r0, 8007a7e <_strtod_l+0x376>
 8007a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	9315      	str	r3, [sp, #84]	; 0x54
 8007a7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007c9c <_strtod_l+0x594>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	e67a      	b.n	800777e <_strtod_l+0x76>
 8007a88:	4881      	ldr	r0, [pc, #516]	; (8007c90 <_strtod_l+0x588>)
 8007a8a:	f000 ff19 	bl	80088c0 <nan>
 8007a8e:	ec59 8b10 	vmov	r8, r9, d0
 8007a92:	e674      	b.n	800777e <_strtod_l+0x76>
 8007a94:	9b05      	ldr	r3, [sp, #20]
 8007a96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a98:	1afb      	subs	r3, r7, r3
 8007a9a:	f1bb 0f00 	cmp.w	fp, #0
 8007a9e:	bf08      	it	eq
 8007aa0:	46b3      	moveq	fp, r6
 8007aa2:	2e10      	cmp	r6, #16
 8007aa4:	9308      	str	r3, [sp, #32]
 8007aa6:	4635      	mov	r5, r6
 8007aa8:	bfa8      	it	ge
 8007aaa:	2510      	movge	r5, #16
 8007aac:	f7f8 fd32 	bl	8000514 <__aeabi_ui2d>
 8007ab0:	2e09      	cmp	r6, #9
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	dd13      	ble.n	8007ae0 <_strtod_l+0x3d8>
 8007ab8:	4b76      	ldr	r3, [pc, #472]	; (8007c94 <_strtod_l+0x58c>)
 8007aba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007abe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ac2:	f7f8 fda1 	bl	8000608 <__aeabi_dmul>
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	4650      	mov	r0, sl
 8007aca:	4689      	mov	r9, r1
 8007acc:	f7f8 fd22 	bl	8000514 <__aeabi_ui2d>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	f7f8 fbe0 	bl	800029c <__adddf3>
 8007adc:	4680      	mov	r8, r0
 8007ade:	4689      	mov	r9, r1
 8007ae0:	2e0f      	cmp	r6, #15
 8007ae2:	dc38      	bgt.n	8007b56 <_strtod_l+0x44e>
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f43f ae49 	beq.w	800777e <_strtod_l+0x76>
 8007aec:	dd24      	ble.n	8007b38 <_strtod_l+0x430>
 8007aee:	2b16      	cmp	r3, #22
 8007af0:	dc0b      	bgt.n	8007b0a <_strtod_l+0x402>
 8007af2:	4968      	ldr	r1, [pc, #416]	; (8007c94 <_strtod_l+0x58c>)
 8007af4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007afc:	4642      	mov	r2, r8
 8007afe:	464b      	mov	r3, r9
 8007b00:	f7f8 fd82 	bl	8000608 <__aeabi_dmul>
 8007b04:	4680      	mov	r8, r0
 8007b06:	4689      	mov	r9, r1
 8007b08:	e639      	b.n	800777e <_strtod_l+0x76>
 8007b0a:	9a08      	ldr	r2, [sp, #32]
 8007b0c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b10:	4293      	cmp	r3, r2
 8007b12:	db20      	blt.n	8007b56 <_strtod_l+0x44e>
 8007b14:	4c5f      	ldr	r4, [pc, #380]	; (8007c94 <_strtod_l+0x58c>)
 8007b16:	f1c6 060f 	rsb	r6, r6, #15
 8007b1a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b1e:	4642      	mov	r2, r8
 8007b20:	464b      	mov	r3, r9
 8007b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b26:	f7f8 fd6f 	bl	8000608 <__aeabi_dmul>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	1b9e      	subs	r6, r3, r6
 8007b2e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b36:	e7e3      	b.n	8007b00 <_strtod_l+0x3f8>
 8007b38:	9b08      	ldr	r3, [sp, #32]
 8007b3a:	3316      	adds	r3, #22
 8007b3c:	db0b      	blt.n	8007b56 <_strtod_l+0x44e>
 8007b3e:	9b05      	ldr	r3, [sp, #20]
 8007b40:	1bdf      	subs	r7, r3, r7
 8007b42:	4b54      	ldr	r3, [pc, #336]	; (8007c94 <_strtod_l+0x58c>)
 8007b44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 fe84 	bl	800085c <__aeabi_ddiv>
 8007b54:	e7d6      	b.n	8007b04 <_strtod_l+0x3fc>
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	1b75      	subs	r5, r6, r5
 8007b5a:	441d      	add	r5, r3
 8007b5c:	2d00      	cmp	r5, #0
 8007b5e:	dd70      	ble.n	8007c42 <_strtod_l+0x53a>
 8007b60:	f015 030f 	ands.w	r3, r5, #15
 8007b64:	d00a      	beq.n	8007b7c <_strtod_l+0x474>
 8007b66:	494b      	ldr	r1, [pc, #300]	; (8007c94 <_strtod_l+0x58c>)
 8007b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b6c:	4642      	mov	r2, r8
 8007b6e:	464b      	mov	r3, r9
 8007b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	f035 050f 	bics.w	r5, r5, #15
 8007b80:	d04d      	beq.n	8007c1e <_strtod_l+0x516>
 8007b82:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007b86:	dd22      	ble.n	8007bce <_strtod_l+0x4c6>
 8007b88:	2500      	movs	r5, #0
 8007b8a:	46ab      	mov	fp, r5
 8007b8c:	9509      	str	r5, [sp, #36]	; 0x24
 8007b8e:	9505      	str	r5, [sp, #20]
 8007b90:	2322      	movs	r3, #34	; 0x22
 8007b92:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007c9c <_strtod_l+0x594>
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	f04f 0800 	mov.w	r8, #0
 8007b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f43f aded 	beq.w	800777e <_strtod_l+0x76>
 8007ba4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7ff f924 	bl	8006df4 <_Bfree>
 8007bac:	9905      	ldr	r1, [sp, #20]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7ff f920 	bl	8006df4 <_Bfree>
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f7ff f91c 	bl	8006df4 <_Bfree>
 8007bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff f918 	bl	8006df4 <_Bfree>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff f914 	bl	8006df4 <_Bfree>
 8007bcc:	e5d7      	b.n	800777e <_strtod_l+0x76>
 8007bce:	4b32      	ldr	r3, [pc, #200]	; (8007c98 <_strtod_l+0x590>)
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	112d      	asrs	r5, r5, #4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	469a      	mov	sl, r3
 8007bdc:	2d01      	cmp	r5, #1
 8007bde:	dc21      	bgt.n	8007c24 <_strtod_l+0x51c>
 8007be0:	b10b      	cbz	r3, 8007be6 <_strtod_l+0x4de>
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	492c      	ldr	r1, [pc, #176]	; (8007c98 <_strtod_l+0x590>)
 8007be8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007bec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	4b27      	ldr	r3, [pc, #156]	; (8007c9c <_strtod_l+0x594>)
 8007bfe:	460a      	mov	r2, r1
 8007c00:	400b      	ands	r3, r1
 8007c02:	4927      	ldr	r1, [pc, #156]	; (8007ca0 <_strtod_l+0x598>)
 8007c04:	428b      	cmp	r3, r1
 8007c06:	4680      	mov	r8, r0
 8007c08:	d8be      	bhi.n	8007b88 <_strtod_l+0x480>
 8007c0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c0e:	428b      	cmp	r3, r1
 8007c10:	bf86      	itte	hi
 8007c12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007ca4 <_strtod_l+0x59c>
 8007c16:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	e07b      	b.n	8007d1c <_strtod_l+0x614>
 8007c24:	07ea      	lsls	r2, r5, #31
 8007c26:	d505      	bpl.n	8007c34 <_strtod_l+0x52c>
 8007c28:	9b04      	ldr	r3, [sp, #16]
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	f7f8 fceb 	bl	8000608 <__aeabi_dmul>
 8007c32:	2301      	movs	r3, #1
 8007c34:	9a04      	ldr	r2, [sp, #16]
 8007c36:	3208      	adds	r2, #8
 8007c38:	f10a 0a01 	add.w	sl, sl, #1
 8007c3c:	106d      	asrs	r5, r5, #1
 8007c3e:	9204      	str	r2, [sp, #16]
 8007c40:	e7cc      	b.n	8007bdc <_strtod_l+0x4d4>
 8007c42:	d0ec      	beq.n	8007c1e <_strtod_l+0x516>
 8007c44:	426d      	negs	r5, r5
 8007c46:	f015 020f 	ands.w	r2, r5, #15
 8007c4a:	d00a      	beq.n	8007c62 <_strtod_l+0x55a>
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <_strtod_l+0x58c>)
 8007c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fdff 	bl	800085c <__aeabi_ddiv>
 8007c5e:	4680      	mov	r8, r0
 8007c60:	4689      	mov	r9, r1
 8007c62:	112d      	asrs	r5, r5, #4
 8007c64:	d0db      	beq.n	8007c1e <_strtod_l+0x516>
 8007c66:	2d1f      	cmp	r5, #31
 8007c68:	dd1e      	ble.n	8007ca8 <_strtod_l+0x5a0>
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	46ab      	mov	fp, r5
 8007c6e:	9509      	str	r5, [sp, #36]	; 0x24
 8007c70:	9505      	str	r5, [sp, #20]
 8007c72:	2322      	movs	r3, #34	; 0x22
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	f04f 0900 	mov.w	r9, #0
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	e78d      	b.n	8007b9c <_strtod_l+0x494>
 8007c80:	080096d0 	.word	0x080096d0
 8007c84:	0800991c 	.word	0x0800991c
 8007c88:	080096c8 	.word	0x080096c8
 8007c8c:	0800973b 	.word	0x0800973b
 8007c90:	08009737 	.word	0x08009737
 8007c94:	08009830 	.word	0x08009830
 8007c98:	08009808 	.word	0x08009808
 8007c9c:	7ff00000 	.word	0x7ff00000
 8007ca0:	7ca00000 	.word	0x7ca00000
 8007ca4:	7fefffff 	.word	0x7fefffff
 8007ca8:	f015 0310 	ands.w	r3, r5, #16
 8007cac:	bf18      	it	ne
 8007cae:	236a      	movne	r3, #106	; 0x6a
 8007cb0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008054 <_strtod_l+0x94c>
 8007cb4:	9304      	str	r3, [sp, #16]
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	4649      	mov	r1, r9
 8007cba:	2300      	movs	r3, #0
 8007cbc:	07ea      	lsls	r2, r5, #31
 8007cbe:	d504      	bpl.n	8007cca <_strtod_l+0x5c2>
 8007cc0:	e9da 2300 	ldrd	r2, r3, [sl]
 8007cc4:	f7f8 fca0 	bl	8000608 <__aeabi_dmul>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	106d      	asrs	r5, r5, #1
 8007ccc:	f10a 0a08 	add.w	sl, sl, #8
 8007cd0:	d1f4      	bne.n	8007cbc <_strtod_l+0x5b4>
 8007cd2:	b10b      	cbz	r3, 8007cd8 <_strtod_l+0x5d0>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	b1bb      	cbz	r3, 8007d0c <_strtod_l+0x604>
 8007cdc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ce0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	dd10      	ble.n	8007d0c <_strtod_l+0x604>
 8007cea:	2b1f      	cmp	r3, #31
 8007cec:	f340 811e 	ble.w	8007f2c <_strtod_l+0x824>
 8007cf0:	2b34      	cmp	r3, #52	; 0x34
 8007cf2:	bfde      	ittt	le
 8007cf4:	f04f 33ff 	movle.w	r3, #4294967295
 8007cf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007cfc:	4093      	lslle	r3, r2
 8007cfe:	f04f 0800 	mov.w	r8, #0
 8007d02:	bfcc      	ite	gt
 8007d04:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d08:	ea03 0901 	andle.w	r9, r3, r1
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d1a6      	bne.n	8007c6a <_strtod_l+0x562>
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d22:	4633      	mov	r3, r6
 8007d24:	465a      	mov	r2, fp
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff f8cc 	bl	8006ec4 <__s2b>
 8007d2c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f af2a 	beq.w	8007b88 <_strtod_l+0x480>
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	9b05      	ldr	r3, [sp, #20]
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	eba3 0307 	sub.w	r3, r3, r7
 8007d3e:	bfa8      	it	ge
 8007d40:	2300      	movge	r3, #0
 8007d42:	930c      	str	r3, [sp, #48]	; 0x30
 8007d44:	2500      	movs	r5, #0
 8007d46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007d4c:	46ab      	mov	fp, r5
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	4620      	mov	r0, r4
 8007d52:	6859      	ldr	r1, [r3, #4]
 8007d54:	f7ff f80e 	bl	8006d74 <_Balloc>
 8007d58:	9005      	str	r0, [sp, #20]
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f43f af18 	beq.w	8007b90 <_strtod_l+0x488>
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	3202      	adds	r2, #2
 8007d66:	f103 010c 	add.w	r1, r3, #12
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	300c      	adds	r0, #12
 8007d6e:	f000 fd99 	bl	80088a4 <memcpy>
 8007d72:	ec49 8b10 	vmov	d0, r8, r9
 8007d76:	aa18      	add	r2, sp, #96	; 0x60
 8007d78:	a917      	add	r1, sp, #92	; 0x5c
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7ff fbd6 	bl	800752c <__d2b>
 8007d80:	ec49 8b18 	vmov	d8, r8, r9
 8007d84:	9016      	str	r0, [sp, #88]	; 0x58
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f af02 	beq.w	8007b90 <_strtod_l+0x488>
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff f930 	bl	8006ff4 <__i2b>
 8007d94:	4683      	mov	fp, r0
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f43f aefa 	beq.w	8007b90 <_strtod_l+0x488>
 8007d9c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	bfab      	itete	ge
 8007da4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007da6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007da8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007daa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007dae:	bfac      	ite	ge
 8007db0:	eb06 0a03 	addge.w	sl, r6, r3
 8007db4:	1b9f      	sublt	r7, r3, r6
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	1af6      	subs	r6, r6, r3
 8007dba:	4416      	add	r6, r2
 8007dbc:	4ba0      	ldr	r3, [pc, #640]	; (8008040 <_strtod_l+0x938>)
 8007dbe:	3e01      	subs	r6, #1
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007dc6:	f280 80c4 	bge.w	8007f52 <_strtod_l+0x84a>
 8007dca:	1b9b      	subs	r3, r3, r6
 8007dcc:	2b1f      	cmp	r3, #31
 8007dce:	eba2 0203 	sub.w	r2, r2, r3
 8007dd2:	f04f 0101 	mov.w	r1, #1
 8007dd6:	f300 80b0 	bgt.w	8007f3a <_strtod_l+0x832>
 8007dda:	fa01 f303 	lsl.w	r3, r1, r3
 8007dde:	930e      	str	r3, [sp, #56]	; 0x38
 8007de0:	2300      	movs	r3, #0
 8007de2:	930d      	str	r3, [sp, #52]	; 0x34
 8007de4:	eb0a 0602 	add.w	r6, sl, r2
 8007de8:	9b04      	ldr	r3, [sp, #16]
 8007dea:	45b2      	cmp	sl, r6
 8007dec:	4417      	add	r7, r2
 8007dee:	441f      	add	r7, r3
 8007df0:	4653      	mov	r3, sl
 8007df2:	bfa8      	it	ge
 8007df4:	4633      	movge	r3, r6
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	bfa8      	it	ge
 8007dfa:	463b      	movge	r3, r7
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfc2      	ittt	gt
 8007e00:	1af6      	subgt	r6, r6, r3
 8007e02:	1aff      	subgt	r7, r7, r3
 8007e04:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dd17      	ble.n	8007e3e <_strtod_l+0x736>
 8007e0e:	4659      	mov	r1, fp
 8007e10:	461a      	mov	r2, r3
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7ff f9ae 	bl	8007174 <__pow5mult>
 8007e18:	4683      	mov	fp, r0
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	f43f aeb8 	beq.w	8007b90 <_strtod_l+0x488>
 8007e20:	4601      	mov	r1, r0
 8007e22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e24:	4620      	mov	r0, r4
 8007e26:	f7ff f8fb 	bl	8007020 <__multiply>
 8007e2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f aeaf 	beq.w	8007b90 <_strtod_l+0x488>
 8007e32:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7fe ffdd 	bl	8006df4 <_Bfree>
 8007e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e3e:	2e00      	cmp	r6, #0
 8007e40:	f300 808c 	bgt.w	8007f5c <_strtod_l+0x854>
 8007e44:	9b08      	ldr	r3, [sp, #32]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd08      	ble.n	8007e5c <_strtod_l+0x754>
 8007e4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e4c:	9905      	ldr	r1, [sp, #20]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff f990 	bl	8007174 <__pow5mult>
 8007e54:	9005      	str	r0, [sp, #20]
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f43f ae9a 	beq.w	8007b90 <_strtod_l+0x488>
 8007e5c:	2f00      	cmp	r7, #0
 8007e5e:	dd08      	ble.n	8007e72 <_strtod_l+0x76a>
 8007e60:	9905      	ldr	r1, [sp, #20]
 8007e62:	463a      	mov	r2, r7
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff f9df 	bl	8007228 <__lshift>
 8007e6a:	9005      	str	r0, [sp, #20]
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f43f ae8f 	beq.w	8007b90 <_strtod_l+0x488>
 8007e72:	f1ba 0f00 	cmp.w	sl, #0
 8007e76:	dd08      	ble.n	8007e8a <_strtod_l+0x782>
 8007e78:	4659      	mov	r1, fp
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f7ff f9d3 	bl	8007228 <__lshift>
 8007e82:	4683      	mov	fp, r0
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f43f ae83 	beq.w	8007b90 <_strtod_l+0x488>
 8007e8a:	9a05      	ldr	r2, [sp, #20]
 8007e8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f7ff fa52 	bl	8007338 <__mdiff>
 8007e94:	4605      	mov	r5, r0
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f ae7a 	beq.w	8007b90 <_strtod_l+0x488>
 8007e9c:	68c3      	ldr	r3, [r0, #12]
 8007e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60c3      	str	r3, [r0, #12]
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7ff fa2b 	bl	8007300 <__mcmp>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	da60      	bge.n	8007f70 <_strtod_l+0x868>
 8007eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb0:	ea53 0308 	orrs.w	r3, r3, r8
 8007eb4:	f040 8084 	bne.w	8007fc0 <_strtod_l+0x8b8>
 8007eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d17f      	bne.n	8007fc0 <_strtod_l+0x8b8>
 8007ec0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ec4:	0d1b      	lsrs	r3, r3, #20
 8007ec6:	051b      	lsls	r3, r3, #20
 8007ec8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ecc:	d978      	bls.n	8007fc0 <_strtod_l+0x8b8>
 8007ece:	696b      	ldr	r3, [r5, #20]
 8007ed0:	b913      	cbnz	r3, 8007ed8 <_strtod_l+0x7d0>
 8007ed2:	692b      	ldr	r3, [r5, #16]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	dd73      	ble.n	8007fc0 <_strtod_l+0x8b8>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	2201      	movs	r2, #1
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7ff f9a3 	bl	8007228 <__lshift>
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	f7ff fa0b 	bl	8007300 <__mcmp>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	dd68      	ble.n	8007fc0 <_strtod_l+0x8b8>
 8007eee:	9904      	ldr	r1, [sp, #16]
 8007ef0:	4a54      	ldr	r2, [pc, #336]	; (8008044 <_strtod_l+0x93c>)
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	f000 8084 	beq.w	8008002 <_strtod_l+0x8fa>
 8007efa:	ea02 0109 	and.w	r1, r2, r9
 8007efe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f02:	dc7e      	bgt.n	8008002 <_strtod_l+0x8fa>
 8007f04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f08:	f77f aeb3 	ble.w	8007c72 <_strtod_l+0x56a>
 8007f0c:	4b4e      	ldr	r3, [pc, #312]	; (8008048 <_strtod_l+0x940>)
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	2200      	movs	r2, #0
 8007f14:	f7f8 fb78 	bl	8000608 <__aeabi_dmul>
 8007f18:	4b4a      	ldr	r3, [pc, #296]	; (8008044 <_strtod_l+0x93c>)
 8007f1a:	400b      	ands	r3, r1
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	4689      	mov	r9, r1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f ae3f 	bne.w	8007ba4 <_strtod_l+0x49c>
 8007f26:	2322      	movs	r3, #34	; 0x22
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	e63b      	b.n	8007ba4 <_strtod_l+0x49c>
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	ea03 0808 	and.w	r8, r3, r8
 8007f38:	e6e8      	b.n	8007d0c <_strtod_l+0x604>
 8007f3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007f42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007f46:	36e2      	adds	r6, #226	; 0xe2
 8007f48:	fa01 f306 	lsl.w	r3, r1, r6
 8007f4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007f50:	e748      	b.n	8007de4 <_strtod_l+0x6dc>
 8007f52:	2100      	movs	r1, #0
 8007f54:	2301      	movs	r3, #1
 8007f56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007f5a:	e743      	b.n	8007de4 <_strtod_l+0x6dc>
 8007f5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f5e:	4632      	mov	r2, r6
 8007f60:	4620      	mov	r0, r4
 8007f62:	f7ff f961 	bl	8007228 <__lshift>
 8007f66:	9016      	str	r0, [sp, #88]	; 0x58
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f47f af6b 	bne.w	8007e44 <_strtod_l+0x73c>
 8007f6e:	e60f      	b.n	8007b90 <_strtod_l+0x488>
 8007f70:	46ca      	mov	sl, r9
 8007f72:	d171      	bne.n	8008058 <_strtod_l+0x950>
 8007f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f7a:	b352      	cbz	r2, 8007fd2 <_strtod_l+0x8ca>
 8007f7c:	4a33      	ldr	r2, [pc, #204]	; (800804c <_strtod_l+0x944>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d12a      	bne.n	8007fd8 <_strtod_l+0x8d0>
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	4641      	mov	r1, r8
 8007f86:	b1fb      	cbz	r3, 8007fc8 <_strtod_l+0x8c0>
 8007f88:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <_strtod_l+0x93c>)
 8007f8a:	ea09 0303 	and.w	r3, r9, r3
 8007f8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	d81a      	bhi.n	8007fce <_strtod_l+0x8c6>
 8007f98:	0d1b      	lsrs	r3, r3, #20
 8007f9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d118      	bne.n	8007fd8 <_strtod_l+0x8d0>
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <_strtod_l+0x948>)
 8007fa8:	459a      	cmp	sl, r3
 8007faa:	d102      	bne.n	8007fb2 <_strtod_l+0x8aa>
 8007fac:	3101      	adds	r1, #1
 8007fae:	f43f adef 	beq.w	8007b90 <_strtod_l+0x488>
 8007fb2:	4b24      	ldr	r3, [pc, #144]	; (8008044 <_strtod_l+0x93c>)
 8007fb4:	ea0a 0303 	and.w	r3, sl, r3
 8007fb8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1a2      	bne.n	8007f0c <_strtod_l+0x804>
 8007fc6:	e5ed      	b.n	8007ba4 <_strtod_l+0x49c>
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	e7e9      	b.n	8007fa2 <_strtod_l+0x89a>
 8007fce:	4613      	mov	r3, r2
 8007fd0:	e7e7      	b.n	8007fa2 <_strtod_l+0x89a>
 8007fd2:	ea53 0308 	orrs.w	r3, r3, r8
 8007fd6:	d08a      	beq.n	8007eee <_strtod_l+0x7e6>
 8007fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fda:	b1e3      	cbz	r3, 8008016 <_strtod_l+0x90e>
 8007fdc:	ea13 0f0a 	tst.w	r3, sl
 8007fe0:	d0ee      	beq.n	8007fc0 <_strtod_l+0x8b8>
 8007fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe4:	9a04      	ldr	r2, [sp, #16]
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	b1c3      	cbz	r3, 800801e <_strtod_l+0x916>
 8007fec:	f7ff fb6f 	bl	80076ce <sulp>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	ec51 0b18 	vmov	r0, r1, d8
 8007ff8:	f7f8 f950 	bl	800029c <__adddf3>
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	e7de      	b.n	8007fc0 <_strtod_l+0x8b8>
 8008002:	4013      	ands	r3, r2
 8008004:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008008:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800800c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008010:	f04f 38ff 	mov.w	r8, #4294967295
 8008014:	e7d4      	b.n	8007fc0 <_strtod_l+0x8b8>
 8008016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008018:	ea13 0f08 	tst.w	r3, r8
 800801c:	e7e0      	b.n	8007fe0 <_strtod_l+0x8d8>
 800801e:	f7ff fb56 	bl	80076ce <sulp>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	ec51 0b18 	vmov	r0, r1, d8
 800802a:	f7f8 f935 	bl	8000298 <__aeabi_dsub>
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	f7f8 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800803a:	2800      	cmp	r0, #0
 800803c:	d0c0      	beq.n	8007fc0 <_strtod_l+0x8b8>
 800803e:	e618      	b.n	8007c72 <_strtod_l+0x56a>
 8008040:	fffffc02 	.word	0xfffffc02
 8008044:	7ff00000 	.word	0x7ff00000
 8008048:	39500000 	.word	0x39500000
 800804c:	000fffff 	.word	0x000fffff
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	08009930 	.word	0x08009930
 8008058:	4659      	mov	r1, fp
 800805a:	4628      	mov	r0, r5
 800805c:	f7ff fac0 	bl	80075e0 <__ratio>
 8008060:	ec57 6b10 	vmov	r6, r7, d0
 8008064:	ee10 0a10 	vmov	r0, s0
 8008068:	2200      	movs	r2, #0
 800806a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fd46 	bl	8000b00 <__aeabi_dcmple>
 8008074:	2800      	cmp	r0, #0
 8008076:	d071      	beq.n	800815c <_strtod_l+0xa54>
 8008078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d17c      	bne.n	8008178 <_strtod_l+0xa70>
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	d15a      	bne.n	800813a <_strtod_l+0xa32>
 8008084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008088:	2b00      	cmp	r3, #0
 800808a:	d15d      	bne.n	8008148 <_strtod_l+0xa40>
 800808c:	4b90      	ldr	r3, [pc, #576]	; (80082d0 <_strtod_l+0xbc8>)
 800808e:	2200      	movs	r2, #0
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 fd2a 	bl	8000aec <__aeabi_dcmplt>
 8008098:	2800      	cmp	r0, #0
 800809a:	d15c      	bne.n	8008156 <_strtod_l+0xa4e>
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	4b8c      	ldr	r3, [pc, #560]	; (80082d4 <_strtod_l+0xbcc>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	f7f8 fab0 	bl	8000608 <__aeabi_dmul>
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80080b0:	9606      	str	r6, [sp, #24]
 80080b2:	9307      	str	r3, [sp, #28]
 80080b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80080bc:	4b86      	ldr	r3, [pc, #536]	; (80082d8 <_strtod_l+0xbd0>)
 80080be:	ea0a 0303 	and.w	r3, sl, r3
 80080c2:	930d      	str	r3, [sp, #52]	; 0x34
 80080c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080c6:	4b85      	ldr	r3, [pc, #532]	; (80082dc <_strtod_l+0xbd4>)
 80080c8:	429a      	cmp	r2, r3
 80080ca:	f040 8090 	bne.w	80081ee <_strtod_l+0xae6>
 80080ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80080d2:	ec49 8b10 	vmov	d0, r8, r9
 80080d6:	f7ff f9b9 	bl	800744c <__ulp>
 80080da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080de:	ec51 0b10 	vmov	r0, r1, d0
 80080e2:	f7f8 fa91 	bl	8000608 <__aeabi_dmul>
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	f7f8 f8d7 	bl	800029c <__adddf3>
 80080ee:	460b      	mov	r3, r1
 80080f0:	4979      	ldr	r1, [pc, #484]	; (80082d8 <_strtod_l+0xbd0>)
 80080f2:	4a7b      	ldr	r2, [pc, #492]	; (80082e0 <_strtod_l+0xbd8>)
 80080f4:	4019      	ands	r1, r3
 80080f6:	4291      	cmp	r1, r2
 80080f8:	4680      	mov	r8, r0
 80080fa:	d944      	bls.n	8008186 <_strtod_l+0xa7e>
 80080fc:	ee18 2a90 	vmov	r2, s17
 8008100:	4b78      	ldr	r3, [pc, #480]	; (80082e4 <_strtod_l+0xbdc>)
 8008102:	429a      	cmp	r2, r3
 8008104:	d104      	bne.n	8008110 <_strtod_l+0xa08>
 8008106:	ee18 3a10 	vmov	r3, s16
 800810a:	3301      	adds	r3, #1
 800810c:	f43f ad40 	beq.w	8007b90 <_strtod_l+0x488>
 8008110:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80082e4 <_strtod_l+0xbdc>
 8008114:	f04f 38ff 	mov.w	r8, #4294967295
 8008118:	9916      	ldr	r1, [sp, #88]	; 0x58
 800811a:	4620      	mov	r0, r4
 800811c:	f7fe fe6a 	bl	8006df4 <_Bfree>
 8008120:	9905      	ldr	r1, [sp, #20]
 8008122:	4620      	mov	r0, r4
 8008124:	f7fe fe66 	bl	8006df4 <_Bfree>
 8008128:	4659      	mov	r1, fp
 800812a:	4620      	mov	r0, r4
 800812c:	f7fe fe62 	bl	8006df4 <_Bfree>
 8008130:	4629      	mov	r1, r5
 8008132:	4620      	mov	r0, r4
 8008134:	f7fe fe5e 	bl	8006df4 <_Bfree>
 8008138:	e609      	b.n	8007d4e <_strtod_l+0x646>
 800813a:	f1b8 0f01 	cmp.w	r8, #1
 800813e:	d103      	bne.n	8008148 <_strtod_l+0xa40>
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	f43f ad95 	beq.w	8007c72 <_strtod_l+0x56a>
 8008148:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80082a0 <_strtod_l+0xb98>
 800814c:	4f60      	ldr	r7, [pc, #384]	; (80082d0 <_strtod_l+0xbc8>)
 800814e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008152:	2600      	movs	r6, #0
 8008154:	e7ae      	b.n	80080b4 <_strtod_l+0x9ac>
 8008156:	4f5f      	ldr	r7, [pc, #380]	; (80082d4 <_strtod_l+0xbcc>)
 8008158:	2600      	movs	r6, #0
 800815a:	e7a7      	b.n	80080ac <_strtod_l+0x9a4>
 800815c:	4b5d      	ldr	r3, [pc, #372]	; (80082d4 <_strtod_l+0xbcc>)
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	2200      	movs	r2, #0
 8008164:	f7f8 fa50 	bl	8000608 <__aeabi_dmul>
 8008168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d09c      	beq.n	80080ac <_strtod_l+0x9a4>
 8008172:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008176:	e79d      	b.n	80080b4 <_strtod_l+0x9ac>
 8008178:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80082a8 <_strtod_l+0xba0>
 800817c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008180:	ec57 6b17 	vmov	r6, r7, d7
 8008184:	e796      	b.n	80080b4 <_strtod_l+0x9ac>
 8008186:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	46ca      	mov	sl, r9
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1c2      	bne.n	8008118 <_strtod_l+0xa10>
 8008192:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	051b      	lsls	r3, r3, #20
 800819c:	429a      	cmp	r2, r3
 800819e:	d1bb      	bne.n	8008118 <_strtod_l+0xa10>
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 fd78 	bl	8000c98 <__aeabi_d2lz>
 80081a8:	f7f8 fa00 	bl	80005ac <__aeabi_l2d>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 f870 	bl	8000298 <__aeabi_dsub>
 80081b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081be:	ea43 0308 	orr.w	r3, r3, r8
 80081c2:	4313      	orrs	r3, r2
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	d054      	beq.n	8008274 <_strtod_l+0xb6c>
 80081ca:	a339      	add	r3, pc, #228	; (adr r3, 80082b0 <_strtod_l+0xba8>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f47f ace5 	bne.w	8007ba4 <_strtod_l+0x49c>
 80081da:	a337      	add	r3, pc, #220	; (adr r3, 80082b8 <_strtod_l+0xbb0>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 fca0 	bl	8000b28 <__aeabi_dcmpgt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d095      	beq.n	8008118 <_strtod_l+0xa10>
 80081ec:	e4da      	b.n	8007ba4 <_strtod_l+0x49c>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	b333      	cbz	r3, 8008240 <_strtod_l+0xb38>
 80081f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081f8:	d822      	bhi.n	8008240 <_strtod_l+0xb38>
 80081fa:	a331      	add	r3, pc, #196	; (adr r3, 80082c0 <_strtod_l+0xbb8>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fc7c 	bl	8000b00 <__aeabi_dcmple>
 8008208:	b1a0      	cbz	r0, 8008234 <_strtod_l+0xb2c>
 800820a:	4639      	mov	r1, r7
 800820c:	4630      	mov	r0, r6
 800820e:	f7f8 fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8008212:	2801      	cmp	r0, #1
 8008214:	bf38      	it	cc
 8008216:	2001      	movcc	r0, #1
 8008218:	f7f8 f97c 	bl	8000514 <__aeabi_ui2d>
 800821c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821e:	4606      	mov	r6, r0
 8008220:	460f      	mov	r7, r1
 8008222:	bb23      	cbnz	r3, 800826e <_strtod_l+0xb66>
 8008224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008228:	9010      	str	r0, [sp, #64]	; 0x40
 800822a:	9311      	str	r3, [sp, #68]	; 0x44
 800822c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008230:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008238:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008240:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008244:	eeb0 0a48 	vmov.f32	s0, s16
 8008248:	eef0 0a68 	vmov.f32	s1, s17
 800824c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008250:	f7ff f8fc 	bl	800744c <__ulp>
 8008254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008258:	ec53 2b10 	vmov	r2, r3, d0
 800825c:	f7f8 f9d4 	bl	8000608 <__aeabi_dmul>
 8008260:	ec53 2b18 	vmov	r2, r3, d8
 8008264:	f7f8 f81a 	bl	800029c <__adddf3>
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	e78d      	b.n	800818a <_strtod_l+0xa82>
 800826e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008272:	e7db      	b.n	800822c <_strtod_l+0xb24>
 8008274:	a314      	add	r3, pc, #80	; (adr r3, 80082c8 <_strtod_l+0xbc0>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 fc37 	bl	8000aec <__aeabi_dcmplt>
 800827e:	e7b3      	b.n	80081e8 <_strtod_l+0xae0>
 8008280:	2300      	movs	r3, #0
 8008282:	930a      	str	r3, [sp, #40]	; 0x28
 8008284:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	f7ff ba7c 	b.w	8007786 <_strtod_l+0x7e>
 800828e:	2a65      	cmp	r2, #101	; 0x65
 8008290:	f43f ab75 	beq.w	800797e <_strtod_l+0x276>
 8008294:	2a45      	cmp	r2, #69	; 0x45
 8008296:	f43f ab72 	beq.w	800797e <_strtod_l+0x276>
 800829a:	2301      	movs	r3, #1
 800829c:	f7ff bbaa 	b.w	80079f4 <_strtod_l+0x2ec>
 80082a0:	00000000 	.word	0x00000000
 80082a4:	bff00000 	.word	0xbff00000
 80082a8:	00000000 	.word	0x00000000
 80082ac:	3ff00000 	.word	0x3ff00000
 80082b0:	94a03595 	.word	0x94a03595
 80082b4:	3fdfffff 	.word	0x3fdfffff
 80082b8:	35afe535 	.word	0x35afe535
 80082bc:	3fe00000 	.word	0x3fe00000
 80082c0:	ffc00000 	.word	0xffc00000
 80082c4:	41dfffff 	.word	0x41dfffff
 80082c8:	94a03595 	.word	0x94a03595
 80082cc:	3fcfffff 	.word	0x3fcfffff
 80082d0:	3ff00000 	.word	0x3ff00000
 80082d4:	3fe00000 	.word	0x3fe00000
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	7fe00000 	.word	0x7fe00000
 80082e0:	7c9fffff 	.word	0x7c9fffff
 80082e4:	7fefffff 	.word	0x7fefffff

080082e8 <_strtod_r>:
 80082e8:	4b01      	ldr	r3, [pc, #4]	; (80082f0 <_strtod_r+0x8>)
 80082ea:	f7ff ba0d 	b.w	8007708 <_strtod_l>
 80082ee:	bf00      	nop
 80082f0:	20000074 	.word	0x20000074

080082f4 <_strtol_l.constprop.0>:
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fa:	d001      	beq.n	8008300 <_strtol_l.constprop.0+0xc>
 80082fc:	2b24      	cmp	r3, #36	; 0x24
 80082fe:	d906      	bls.n	800830e <_strtol_l.constprop.0+0x1a>
 8008300:	f7fd fd6c 	bl	8005ddc <__errno>
 8008304:	2316      	movs	r3, #22
 8008306:	6003      	str	r3, [r0, #0]
 8008308:	2000      	movs	r0, #0
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80083f4 <_strtol_l.constprop.0+0x100>
 8008312:	460d      	mov	r5, r1
 8008314:	462e      	mov	r6, r5
 8008316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800831a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800831e:	f017 0708 	ands.w	r7, r7, #8
 8008322:	d1f7      	bne.n	8008314 <_strtol_l.constprop.0+0x20>
 8008324:	2c2d      	cmp	r4, #45	; 0x2d
 8008326:	d132      	bne.n	800838e <_strtol_l.constprop.0+0x9a>
 8008328:	782c      	ldrb	r4, [r5, #0]
 800832a:	2701      	movs	r7, #1
 800832c:	1cb5      	adds	r5, r6, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d05b      	beq.n	80083ea <_strtol_l.constprop.0+0xf6>
 8008332:	2b10      	cmp	r3, #16
 8008334:	d109      	bne.n	800834a <_strtol_l.constprop.0+0x56>
 8008336:	2c30      	cmp	r4, #48	; 0x30
 8008338:	d107      	bne.n	800834a <_strtol_l.constprop.0+0x56>
 800833a:	782c      	ldrb	r4, [r5, #0]
 800833c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008340:	2c58      	cmp	r4, #88	; 0x58
 8008342:	d14d      	bne.n	80083e0 <_strtol_l.constprop.0+0xec>
 8008344:	786c      	ldrb	r4, [r5, #1]
 8008346:	2310      	movs	r3, #16
 8008348:	3502      	adds	r5, #2
 800834a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800834e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008352:	f04f 0e00 	mov.w	lr, #0
 8008356:	fbb8 f9f3 	udiv	r9, r8, r3
 800835a:	4676      	mov	r6, lr
 800835c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008360:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008364:	f1bc 0f09 	cmp.w	ip, #9
 8008368:	d816      	bhi.n	8008398 <_strtol_l.constprop.0+0xa4>
 800836a:	4664      	mov	r4, ip
 800836c:	42a3      	cmp	r3, r4
 800836e:	dd24      	ble.n	80083ba <_strtol_l.constprop.0+0xc6>
 8008370:	f1be 3fff 	cmp.w	lr, #4294967295
 8008374:	d008      	beq.n	8008388 <_strtol_l.constprop.0+0x94>
 8008376:	45b1      	cmp	r9, r6
 8008378:	d31c      	bcc.n	80083b4 <_strtol_l.constprop.0+0xc0>
 800837a:	d101      	bne.n	8008380 <_strtol_l.constprop.0+0x8c>
 800837c:	45a2      	cmp	sl, r4
 800837e:	db19      	blt.n	80083b4 <_strtol_l.constprop.0+0xc0>
 8008380:	fb06 4603 	mla	r6, r6, r3, r4
 8008384:	f04f 0e01 	mov.w	lr, #1
 8008388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838c:	e7e8      	b.n	8008360 <_strtol_l.constprop.0+0x6c>
 800838e:	2c2b      	cmp	r4, #43	; 0x2b
 8008390:	bf04      	itt	eq
 8008392:	782c      	ldrbeq	r4, [r5, #0]
 8008394:	1cb5      	addeq	r5, r6, #2
 8008396:	e7ca      	b.n	800832e <_strtol_l.constprop.0+0x3a>
 8008398:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800839c:	f1bc 0f19 	cmp.w	ip, #25
 80083a0:	d801      	bhi.n	80083a6 <_strtol_l.constprop.0+0xb2>
 80083a2:	3c37      	subs	r4, #55	; 0x37
 80083a4:	e7e2      	b.n	800836c <_strtol_l.constprop.0+0x78>
 80083a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083aa:	f1bc 0f19 	cmp.w	ip, #25
 80083ae:	d804      	bhi.n	80083ba <_strtol_l.constprop.0+0xc6>
 80083b0:	3c57      	subs	r4, #87	; 0x57
 80083b2:	e7db      	b.n	800836c <_strtol_l.constprop.0+0x78>
 80083b4:	f04f 3eff 	mov.w	lr, #4294967295
 80083b8:	e7e6      	b.n	8008388 <_strtol_l.constprop.0+0x94>
 80083ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80083be:	d105      	bne.n	80083cc <_strtol_l.constprop.0+0xd8>
 80083c0:	2322      	movs	r3, #34	; 0x22
 80083c2:	6003      	str	r3, [r0, #0]
 80083c4:	4646      	mov	r6, r8
 80083c6:	b942      	cbnz	r2, 80083da <_strtol_l.constprop.0+0xe6>
 80083c8:	4630      	mov	r0, r6
 80083ca:	e79e      	b.n	800830a <_strtol_l.constprop.0+0x16>
 80083cc:	b107      	cbz	r7, 80083d0 <_strtol_l.constprop.0+0xdc>
 80083ce:	4276      	negs	r6, r6
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d0f9      	beq.n	80083c8 <_strtol_l.constprop.0+0xd4>
 80083d4:	f1be 0f00 	cmp.w	lr, #0
 80083d8:	d000      	beq.n	80083dc <_strtol_l.constprop.0+0xe8>
 80083da:	1e69      	subs	r1, r5, #1
 80083dc:	6011      	str	r1, [r2, #0]
 80083de:	e7f3      	b.n	80083c8 <_strtol_l.constprop.0+0xd4>
 80083e0:	2430      	movs	r4, #48	; 0x30
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1b1      	bne.n	800834a <_strtol_l.constprop.0+0x56>
 80083e6:	2308      	movs	r3, #8
 80083e8:	e7af      	b.n	800834a <_strtol_l.constprop.0+0x56>
 80083ea:	2c30      	cmp	r4, #48	; 0x30
 80083ec:	d0a5      	beq.n	800833a <_strtol_l.constprop.0+0x46>
 80083ee:	230a      	movs	r3, #10
 80083f0:	e7ab      	b.n	800834a <_strtol_l.constprop.0+0x56>
 80083f2:	bf00      	nop
 80083f4:	08009959 	.word	0x08009959

080083f8 <_strtol_r>:
 80083f8:	f7ff bf7c 	b.w	80082f4 <_strtol_l.constprop.0>

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	461f      	mov	r7, r3
 8008404:	42be      	cmp	r6, r7
 8008406:	680b      	ldr	r3, [r1, #0]
 8008408:	4682      	mov	sl, r0
 800840a:	460c      	mov	r4, r1
 800840c:	4690      	mov	r8, r2
 800840e:	d82c      	bhi.n	800846a <__ssputs_r+0x6e>
 8008410:	898a      	ldrh	r2, [r1, #12]
 8008412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008416:	d026      	beq.n	8008466 <__ssputs_r+0x6a>
 8008418:	6965      	ldr	r5, [r4, #20]
 800841a:	6909      	ldr	r1, [r1, #16]
 800841c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008420:	eba3 0901 	sub.w	r9, r3, r1
 8008424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008428:	1c7b      	adds	r3, r7, #1
 800842a:	444b      	add	r3, r9
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d527      	bpl.n	8008488 <__ssputs_r+0x8c>
 8008438:	4629      	mov	r1, r5
 800843a:	f7fe fc0f 	bl	8006c5c <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b360      	cbz	r0, 800849c <__ssputs_r+0xa0>
 8008442:	6921      	ldr	r1, [r4, #16]
 8008444:	464a      	mov	r2, r9
 8008446:	f000 fa2d 	bl	80088a4 <memcpy>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	6126      	str	r6, [r4, #16]
 8008458:	6165      	str	r5, [r4, #20]
 800845a:	444e      	add	r6, r9
 800845c:	eba5 0509 	sub.w	r5, r5, r9
 8008460:	6026      	str	r6, [r4, #0]
 8008462:	60a5      	str	r5, [r4, #8]
 8008464:	463e      	mov	r6, r7
 8008466:	42be      	cmp	r6, r7
 8008468:	d900      	bls.n	800846c <__ssputs_r+0x70>
 800846a:	463e      	mov	r6, r7
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	4632      	mov	r2, r6
 8008470:	4641      	mov	r1, r8
 8008472:	f000 f9db 	bl	800882c <memmove>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	1b9b      	subs	r3, r3, r6
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	4433      	add	r3, r6
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	2000      	movs	r0, #0
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	462a      	mov	r2, r5
 800848a:	f000 fda6 	bl	8008fda <_realloc_r>
 800848e:	4606      	mov	r6, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	d1e0      	bne.n	8008456 <__ssputs_r+0x5a>
 8008494:	6921      	ldr	r1, [r4, #16]
 8008496:	4650      	mov	r0, sl
 8008498:	f7fe fb6c 	bl	8006b74 <_free_r>
 800849c:	230c      	movs	r3, #12
 800849e:	f8ca 3000 	str.w	r3, [sl]
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	e7e9      	b.n	8008484 <__ssputs_r+0x88>

080084b0 <_svfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4698      	mov	r8, r3
 80084b6:	898b      	ldrh	r3, [r1, #12]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	b09d      	sub	sp, #116	; 0x74
 80084bc:	4607      	mov	r7, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	d50e      	bpl.n	80084e2 <_svfiprintf_r+0x32>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b963      	cbnz	r3, 80084e2 <_svfiprintf_r+0x32>
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	f7fe fbc7 	bl	8006c5c <_malloc_r>
 80084ce:	6028      	str	r0, [r5, #0]
 80084d0:	6128      	str	r0, [r5, #16]
 80084d2:	b920      	cbnz	r0, 80084de <_svfiprintf_r+0x2e>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e0d0      	b.n	8008680 <_svfiprintf_r+0x1d0>
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	616b      	str	r3, [r5, #20]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	2320      	movs	r3, #32
 80084e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f0:	2330      	movs	r3, #48	; 0x30
 80084f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008698 <_svfiprintf_r+0x1e8>
 80084f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fa:	f04f 0901 	mov.w	r9, #1
 80084fe:	4623      	mov	r3, r4
 8008500:	469a      	mov	sl, r3
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	b10a      	cbz	r2, 800850c <_svfiprintf_r+0x5c>
 8008508:	2a25      	cmp	r2, #37	; 0x25
 800850a:	d1f9      	bne.n	8008500 <_svfiprintf_r+0x50>
 800850c:	ebba 0b04 	subs.w	fp, sl, r4
 8008510:	d00b      	beq.n	800852a <_svfiprintf_r+0x7a>
 8008512:	465b      	mov	r3, fp
 8008514:	4622      	mov	r2, r4
 8008516:	4629      	mov	r1, r5
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff6f 	bl	80083fc <__ssputs_r>
 800851e:	3001      	adds	r0, #1
 8008520:	f000 80a9 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008526:	445a      	add	r2, fp
 8008528:	9209      	str	r2, [sp, #36]	; 0x24
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80a1 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008534:	2300      	movs	r3, #0
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853e:	f10a 0a01 	add.w	sl, sl, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854a:	931a      	str	r3, [sp, #104]	; 0x68
 800854c:	4654      	mov	r4, sl
 800854e:	2205      	movs	r2, #5
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	4850      	ldr	r0, [pc, #320]	; (8008698 <_svfiprintf_r+0x1e8>)
 8008556:	f7f7 fe43 	bl	80001e0 <memchr>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	b9d8      	cbnz	r0, 8008596 <_svfiprintf_r+0xe6>
 800855e:	06d0      	lsls	r0, r2, #27
 8008560:	bf44      	itt	mi
 8008562:	2320      	movmi	r3, #32
 8008564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008568:	0711      	lsls	r1, r2, #28
 800856a:	bf44      	itt	mi
 800856c:	232b      	movmi	r3, #43	; 0x2b
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b2a      	cmp	r3, #42	; 0x2a
 8008578:	d015      	beq.n	80085a6 <_svfiprintf_r+0xf6>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	4654      	mov	r4, sl
 800857e:	2000      	movs	r0, #0
 8008580:	f04f 0c0a 	mov.w	ip, #10
 8008584:	4621      	mov	r1, r4
 8008586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858a:	3b30      	subs	r3, #48	; 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d94d      	bls.n	800862c <_svfiprintf_r+0x17c>
 8008590:	b1b0      	cbz	r0, 80085c0 <_svfiprintf_r+0x110>
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	e014      	b.n	80085c0 <_svfiprintf_r+0x110>
 8008596:	eba0 0308 	sub.w	r3, r0, r8
 800859a:	fa09 f303 	lsl.w	r3, r9, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	9304      	str	r3, [sp, #16]
 80085a2:	46a2      	mov	sl, r4
 80085a4:	e7d2      	b.n	800854c <_svfiprintf_r+0x9c>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbb      	ittet	lt
 80085b2:	425b      	neglt	r3, r3
 80085b4:	f042 0202 	orrlt.w	r2, r2, #2
 80085b8:	9307      	strge	r3, [sp, #28]
 80085ba:	9307      	strlt	r3, [sp, #28]
 80085bc:	bfb8      	it	lt
 80085be:	9204      	strlt	r2, [sp, #16]
 80085c0:	7823      	ldrb	r3, [r4, #0]
 80085c2:	2b2e      	cmp	r3, #46	; 0x2e
 80085c4:	d10c      	bne.n	80085e0 <_svfiprintf_r+0x130>
 80085c6:	7863      	ldrb	r3, [r4, #1]
 80085c8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ca:	d134      	bne.n	8008636 <_svfiprintf_r+0x186>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9203      	str	r2, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb8      	it	lt
 80085d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085dc:	3402      	adds	r4, #2
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086a8 <_svfiprintf_r+0x1f8>
 80085e4:	7821      	ldrb	r1, [r4, #0]
 80085e6:	2203      	movs	r2, #3
 80085e8:	4650      	mov	r0, sl
 80085ea:	f7f7 fdf9 	bl	80001e0 <memchr>
 80085ee:	b138      	cbz	r0, 8008600 <_svfiprintf_r+0x150>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	eba0 000a 	sub.w	r0, r0, sl
 80085f6:	2240      	movs	r2, #64	; 0x40
 80085f8:	4082      	lsls	r2, r0
 80085fa:	4313      	orrs	r3, r2
 80085fc:	3401      	adds	r4, #1
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	4825      	ldr	r0, [pc, #148]	; (800869c <_svfiprintf_r+0x1ec>)
 8008606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860a:	2206      	movs	r2, #6
 800860c:	f7f7 fde8 	bl	80001e0 <memchr>
 8008610:	2800      	cmp	r0, #0
 8008612:	d038      	beq.n	8008686 <_svfiprintf_r+0x1d6>
 8008614:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <_svfiprintf_r+0x1f0>)
 8008616:	bb1b      	cbnz	r3, 8008660 <_svfiprintf_r+0x1b0>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	3307      	adds	r3, #7
 800861c:	f023 0307 	bic.w	r3, r3, #7
 8008620:	3308      	adds	r3, #8
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	4433      	add	r3, r6
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	e768      	b.n	80084fe <_svfiprintf_r+0x4e>
 800862c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008630:	460c      	mov	r4, r1
 8008632:	2001      	movs	r0, #1
 8008634:	e7a6      	b.n	8008584 <_svfiprintf_r+0xd4>
 8008636:	2300      	movs	r3, #0
 8008638:	3401      	adds	r4, #1
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	4619      	mov	r1, r3
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	3a30      	subs	r2, #48	; 0x30
 800864a:	2a09      	cmp	r2, #9
 800864c:	d903      	bls.n	8008656 <_svfiprintf_r+0x1a6>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c6      	beq.n	80085e0 <_svfiprintf_r+0x130>
 8008652:	9105      	str	r1, [sp, #20]
 8008654:	e7c4      	b.n	80085e0 <_svfiprintf_r+0x130>
 8008656:	fb0c 2101 	mla	r1, ip, r1, r2
 800865a:	4604      	mov	r4, r0
 800865c:	2301      	movs	r3, #1
 800865e:	e7f0      	b.n	8008642 <_svfiprintf_r+0x192>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <_svfiprintf_r+0x1f4>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4638      	mov	r0, r7
 800866c:	f7fc fc68 	bl	8004f40 <_printf_float>
 8008670:	1c42      	adds	r2, r0, #1
 8008672:	4606      	mov	r6, r0
 8008674:	d1d6      	bne.n	8008624 <_svfiprintf_r+0x174>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	065b      	lsls	r3, r3, #25
 800867a:	f53f af2d 	bmi.w	80084d8 <_svfiprintf_r+0x28>
 800867e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008680:	b01d      	add	sp, #116	; 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <_svfiprintf_r+0x1f4>)
 800868e:	a904      	add	r1, sp, #16
 8008690:	4638      	mov	r0, r7
 8008692:	f7fc fef9 	bl	8005488 <_printf_i>
 8008696:	e7eb      	b.n	8008670 <_svfiprintf_r+0x1c0>
 8008698:	08009a59 	.word	0x08009a59
 800869c:	08009a63 	.word	0x08009a63
 80086a0:	08004f41 	.word	0x08004f41
 80086a4:	080083fd 	.word	0x080083fd
 80086a8:	08009a5f 	.word	0x08009a5f

080086ac <__sflush_r>:
 80086ac:	898a      	ldrh	r2, [r1, #12]
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	4605      	mov	r5, r0
 80086b4:	0710      	lsls	r0, r2, #28
 80086b6:	460c      	mov	r4, r1
 80086b8:	d458      	bmi.n	800876c <__sflush_r+0xc0>
 80086ba:	684b      	ldr	r3, [r1, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dc05      	bgt.n	80086cc <__sflush_r+0x20>
 80086c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dc02      	bgt.n	80086cc <__sflush_r+0x20>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	d0f9      	beq.n	80086c6 <__sflush_r+0x1a>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086d8:	682f      	ldr	r7, [r5, #0]
 80086da:	6a21      	ldr	r1, [r4, #32]
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	d032      	beq.n	8008746 <__sflush_r+0x9a>
 80086e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	075a      	lsls	r2, r3, #29
 80086e6:	d505      	bpl.n	80086f4 <__sflush_r+0x48>
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	1ac0      	subs	r0, r0, r3
 80086ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086ee:	b10b      	cbz	r3, 80086f4 <__sflush_r+0x48>
 80086f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f2:	1ac0      	subs	r0, r0, r3
 80086f4:	2300      	movs	r3, #0
 80086f6:	4602      	mov	r2, r0
 80086f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fa:	6a21      	ldr	r1, [r4, #32]
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b0      	blx	r6
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	d106      	bne.n	8008714 <__sflush_r+0x68>
 8008706:	6829      	ldr	r1, [r5, #0]
 8008708:	291d      	cmp	r1, #29
 800870a:	d82b      	bhi.n	8008764 <__sflush_r+0xb8>
 800870c:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <__sflush_r+0x108>)
 800870e:	410a      	asrs	r2, r1
 8008710:	07d6      	lsls	r6, r2, #31
 8008712:	d427      	bmi.n	8008764 <__sflush_r+0xb8>
 8008714:	2200      	movs	r2, #0
 8008716:	6062      	str	r2, [r4, #4]
 8008718:	04d9      	lsls	r1, r3, #19
 800871a:	6922      	ldr	r2, [r4, #16]
 800871c:	6022      	str	r2, [r4, #0]
 800871e:	d504      	bpl.n	800872a <__sflush_r+0x7e>
 8008720:	1c42      	adds	r2, r0, #1
 8008722:	d101      	bne.n	8008728 <__sflush_r+0x7c>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b903      	cbnz	r3, 800872a <__sflush_r+0x7e>
 8008728:	6560      	str	r0, [r4, #84]	; 0x54
 800872a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872c:	602f      	str	r7, [r5, #0]
 800872e:	2900      	cmp	r1, #0
 8008730:	d0c9      	beq.n	80086c6 <__sflush_r+0x1a>
 8008732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008736:	4299      	cmp	r1, r3
 8008738:	d002      	beq.n	8008740 <__sflush_r+0x94>
 800873a:	4628      	mov	r0, r5
 800873c:	f7fe fa1a 	bl	8006b74 <_free_r>
 8008740:	2000      	movs	r0, #0
 8008742:	6360      	str	r0, [r4, #52]	; 0x34
 8008744:	e7c0      	b.n	80086c8 <__sflush_r+0x1c>
 8008746:	2301      	movs	r3, #1
 8008748:	4628      	mov	r0, r5
 800874a:	47b0      	blx	r6
 800874c:	1c41      	adds	r1, r0, #1
 800874e:	d1c8      	bne.n	80086e2 <__sflush_r+0x36>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c5      	beq.n	80086e2 <__sflush_r+0x36>
 8008756:	2b1d      	cmp	r3, #29
 8008758:	d001      	beq.n	800875e <__sflush_r+0xb2>
 800875a:	2b16      	cmp	r3, #22
 800875c:	d101      	bne.n	8008762 <__sflush_r+0xb6>
 800875e:	602f      	str	r7, [r5, #0]
 8008760:	e7b1      	b.n	80086c6 <__sflush_r+0x1a>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	e7ad      	b.n	80086c8 <__sflush_r+0x1c>
 800876c:	690f      	ldr	r7, [r1, #16]
 800876e:	2f00      	cmp	r7, #0
 8008770:	d0a9      	beq.n	80086c6 <__sflush_r+0x1a>
 8008772:	0793      	lsls	r3, r2, #30
 8008774:	680e      	ldr	r6, [r1, #0]
 8008776:	bf08      	it	eq
 8008778:	694b      	ldreq	r3, [r1, #20]
 800877a:	600f      	str	r7, [r1, #0]
 800877c:	bf18      	it	ne
 800877e:	2300      	movne	r3, #0
 8008780:	eba6 0807 	sub.w	r8, r6, r7
 8008784:	608b      	str	r3, [r1, #8]
 8008786:	f1b8 0f00 	cmp.w	r8, #0
 800878a:	dd9c      	ble.n	80086c6 <__sflush_r+0x1a>
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008790:	4643      	mov	r3, r8
 8008792:	463a      	mov	r2, r7
 8008794:	4628      	mov	r0, r5
 8008796:	47b0      	blx	r6
 8008798:	2800      	cmp	r0, #0
 800879a:	dc06      	bgt.n	80087aa <__sflush_r+0xfe>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e78e      	b.n	80086c8 <__sflush_r+0x1c>
 80087aa:	4407      	add	r7, r0
 80087ac:	eba8 0800 	sub.w	r8, r8, r0
 80087b0:	e7e9      	b.n	8008786 <__sflush_r+0xda>
 80087b2:	bf00      	nop
 80087b4:	dfbffffe 	.word	0xdfbffffe

080087b8 <_fflush_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	4605      	mov	r5, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	b913      	cbnz	r3, 80087c8 <_fflush_r+0x10>
 80087c2:	2500      	movs	r5, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	b118      	cbz	r0, 80087d2 <_fflush_r+0x1a>
 80087ca:	6a03      	ldr	r3, [r0, #32]
 80087cc:	b90b      	cbnz	r3, 80087d2 <_fflush_r+0x1a>
 80087ce:	f7fd fa19 	bl	8005c04 <__sinit>
 80087d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f3      	beq.n	80087c2 <_fflush_r+0xa>
 80087da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087dc:	07d0      	lsls	r0, r2, #31
 80087de:	d404      	bmi.n	80087ea <_fflush_r+0x32>
 80087e0:	0599      	lsls	r1, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_fflush_r+0x32>
 80087e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e6:	f7fd fb24 	bl	8005e32 <__retarget_lock_acquire_recursive>
 80087ea:	4628      	mov	r0, r5
 80087ec:	4621      	mov	r1, r4
 80087ee:	f7ff ff5d 	bl	80086ac <__sflush_r>
 80087f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f4:	07da      	lsls	r2, r3, #31
 80087f6:	4605      	mov	r5, r0
 80087f8:	d4e4      	bmi.n	80087c4 <_fflush_r+0xc>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	059b      	lsls	r3, r3, #22
 80087fe:	d4e1      	bmi.n	80087c4 <_fflush_r+0xc>
 8008800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008802:	f7fd fb17 	bl	8005e34 <__retarget_lock_release_recursive>
 8008806:	e7dd      	b.n	80087c4 <_fflush_r+0xc>

08008808 <fiprintf>:
 8008808:	b40e      	push	{r1, r2, r3}
 800880a:	b503      	push	{r0, r1, lr}
 800880c:	4601      	mov	r1, r0
 800880e:	ab03      	add	r3, sp, #12
 8008810:	4805      	ldr	r0, [pc, #20]	; (8008828 <fiprintf+0x20>)
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f000 fc43 	bl	80090a4 <_vfiprintf_r>
 800881e:	b002      	add	sp, #8
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b003      	add	sp, #12
 8008826:	4770      	bx	lr
 8008828:	20000070 	.word	0x20000070

0800882c <memmove>:
 800882c:	4288      	cmp	r0, r1
 800882e:	b510      	push	{r4, lr}
 8008830:	eb01 0402 	add.w	r4, r1, r2
 8008834:	d902      	bls.n	800883c <memmove+0x10>
 8008836:	4284      	cmp	r4, r0
 8008838:	4623      	mov	r3, r4
 800883a:	d807      	bhi.n	800884c <memmove+0x20>
 800883c:	1e43      	subs	r3, r0, #1
 800883e:	42a1      	cmp	r1, r4
 8008840:	d008      	beq.n	8008854 <memmove+0x28>
 8008842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800884a:	e7f8      	b.n	800883e <memmove+0x12>
 800884c:	4402      	add	r2, r0
 800884e:	4601      	mov	r1, r0
 8008850:	428a      	cmp	r2, r1
 8008852:	d100      	bne.n	8008856 <memmove+0x2a>
 8008854:	bd10      	pop	{r4, pc}
 8008856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800885a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800885e:	e7f7      	b.n	8008850 <memmove+0x24>

08008860 <strncmp>:
 8008860:	b510      	push	{r4, lr}
 8008862:	b16a      	cbz	r2, 8008880 <strncmp+0x20>
 8008864:	3901      	subs	r1, #1
 8008866:	1884      	adds	r4, r0, r2
 8008868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800886c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008870:	429a      	cmp	r2, r3
 8008872:	d103      	bne.n	800887c <strncmp+0x1c>
 8008874:	42a0      	cmp	r0, r4
 8008876:	d001      	beq.n	800887c <strncmp+0x1c>
 8008878:	2a00      	cmp	r2, #0
 800887a:	d1f5      	bne.n	8008868 <strncmp+0x8>
 800887c:	1ad0      	subs	r0, r2, r3
 800887e:	bd10      	pop	{r4, pc}
 8008880:	4610      	mov	r0, r2
 8008882:	e7fc      	b.n	800887e <strncmp+0x1e>

08008884 <_sbrk_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_sbrk_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7f9 f8ba 	bl	8001a08 <_sbrk>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_sbrk_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_sbrk_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20000488 	.word	0x20000488

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <nan>:
 80088c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088c8 <nan+0x8>
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	00000000 	.word	0x00000000
 80088cc:	7ff80000 	.word	0x7ff80000

080088d0 <abort>:
 80088d0:	b508      	push	{r3, lr}
 80088d2:	2006      	movs	r0, #6
 80088d4:	f000 fdbe 	bl	8009454 <raise>
 80088d8:	2001      	movs	r0, #1
 80088da:	f7f9 f81d 	bl	8001918 <_exit>

080088de <_calloc_r>:
 80088de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e0:	fba1 2402 	umull	r2, r4, r1, r2
 80088e4:	b94c      	cbnz	r4, 80088fa <_calloc_r+0x1c>
 80088e6:	4611      	mov	r1, r2
 80088e8:	9201      	str	r2, [sp, #4]
 80088ea:	f7fe f9b7 	bl	8006c5c <_malloc_r>
 80088ee:	9a01      	ldr	r2, [sp, #4]
 80088f0:	4605      	mov	r5, r0
 80088f2:	b930      	cbnz	r0, 8008902 <_calloc_r+0x24>
 80088f4:	4628      	mov	r0, r5
 80088f6:	b003      	add	sp, #12
 80088f8:	bd30      	pop	{r4, r5, pc}
 80088fa:	220c      	movs	r2, #12
 80088fc:	6002      	str	r2, [r0, #0]
 80088fe:	2500      	movs	r5, #0
 8008900:	e7f8      	b.n	80088f4 <_calloc_r+0x16>
 8008902:	4621      	mov	r1, r4
 8008904:	f7fd fa17 	bl	8005d36 <memset>
 8008908:	e7f4      	b.n	80088f4 <_calloc_r+0x16>

0800890a <rshift>:
 800890a:	6903      	ldr	r3, [r0, #16]
 800890c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008914:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008918:	f100 0414 	add.w	r4, r0, #20
 800891c:	dd45      	ble.n	80089aa <rshift+0xa0>
 800891e:	f011 011f 	ands.w	r1, r1, #31
 8008922:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008926:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800892a:	d10c      	bne.n	8008946 <rshift+0x3c>
 800892c:	f100 0710 	add.w	r7, r0, #16
 8008930:	4629      	mov	r1, r5
 8008932:	42b1      	cmp	r1, r6
 8008934:	d334      	bcc.n	80089a0 <rshift+0x96>
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	1eea      	subs	r2, r5, #3
 800893c:	4296      	cmp	r6, r2
 800893e:	bf38      	it	cc
 8008940:	2300      	movcc	r3, #0
 8008942:	4423      	add	r3, r4
 8008944:	e015      	b.n	8008972 <rshift+0x68>
 8008946:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800894a:	f1c1 0820 	rsb	r8, r1, #32
 800894e:	40cf      	lsrs	r7, r1
 8008950:	f105 0e04 	add.w	lr, r5, #4
 8008954:	46a1      	mov	r9, r4
 8008956:	4576      	cmp	r6, lr
 8008958:	46f4      	mov	ip, lr
 800895a:	d815      	bhi.n	8008988 <rshift+0x7e>
 800895c:	1a9a      	subs	r2, r3, r2
 800895e:	0092      	lsls	r2, r2, #2
 8008960:	3a04      	subs	r2, #4
 8008962:	3501      	adds	r5, #1
 8008964:	42ae      	cmp	r6, r5
 8008966:	bf38      	it	cc
 8008968:	2200      	movcc	r2, #0
 800896a:	18a3      	adds	r3, r4, r2
 800896c:	50a7      	str	r7, [r4, r2]
 800896e:	b107      	cbz	r7, 8008972 <rshift+0x68>
 8008970:	3304      	adds	r3, #4
 8008972:	1b1a      	subs	r2, r3, r4
 8008974:	42a3      	cmp	r3, r4
 8008976:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800897a:	bf08      	it	eq
 800897c:	2300      	moveq	r3, #0
 800897e:	6102      	str	r2, [r0, #16]
 8008980:	bf08      	it	eq
 8008982:	6143      	streq	r3, [r0, #20]
 8008984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008988:	f8dc c000 	ldr.w	ip, [ip]
 800898c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008990:	ea4c 0707 	orr.w	r7, ip, r7
 8008994:	f849 7b04 	str.w	r7, [r9], #4
 8008998:	f85e 7b04 	ldr.w	r7, [lr], #4
 800899c:	40cf      	lsrs	r7, r1
 800899e:	e7da      	b.n	8008956 <rshift+0x4c>
 80089a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80089a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80089a8:	e7c3      	b.n	8008932 <rshift+0x28>
 80089aa:	4623      	mov	r3, r4
 80089ac:	e7e1      	b.n	8008972 <rshift+0x68>

080089ae <__hexdig_fun>:
 80089ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	d802      	bhi.n	80089bc <__hexdig_fun+0xe>
 80089b6:	3820      	subs	r0, #32
 80089b8:	b2c0      	uxtb	r0, r0
 80089ba:	4770      	bx	lr
 80089bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d801      	bhi.n	80089c8 <__hexdig_fun+0x1a>
 80089c4:	3847      	subs	r0, #71	; 0x47
 80089c6:	e7f7      	b.n	80089b8 <__hexdig_fun+0xa>
 80089c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089cc:	2b05      	cmp	r3, #5
 80089ce:	d801      	bhi.n	80089d4 <__hexdig_fun+0x26>
 80089d0:	3827      	subs	r0, #39	; 0x27
 80089d2:	e7f1      	b.n	80089b8 <__hexdig_fun+0xa>
 80089d4:	2000      	movs	r0, #0
 80089d6:	4770      	bx	lr

080089d8 <__gethex>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	4617      	mov	r7, r2
 80089de:	680a      	ldr	r2, [r1, #0]
 80089e0:	b085      	sub	sp, #20
 80089e2:	f102 0b02 	add.w	fp, r2, #2
 80089e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089ee:	4681      	mov	r9, r0
 80089f0:	468a      	mov	sl, r1
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	32fe      	adds	r2, #254	; 0xfe
 80089f6:	eb02 030b 	add.w	r3, r2, fp
 80089fa:	46d8      	mov	r8, fp
 80089fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2830      	cmp	r0, #48	; 0x30
 8008a04:	d0f7      	beq.n	80089f6 <__gethex+0x1e>
 8008a06:	f7ff ffd2 	bl	80089ae <__hexdig_fun>
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d138      	bne.n	8008a82 <__gethex+0xaa>
 8008a10:	49a7      	ldr	r1, [pc, #668]	; (8008cb0 <__gethex+0x2d8>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	4640      	mov	r0, r8
 8008a16:	f7ff ff23 	bl	8008860 <strncmp>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d169      	bne.n	8008af4 <__gethex+0x11c>
 8008a20:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008a24:	465d      	mov	r5, fp
 8008a26:	f7ff ffc2 	bl	80089ae <__hexdig_fun>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d064      	beq.n	8008af8 <__gethex+0x120>
 8008a2e:	465a      	mov	r2, fp
 8008a30:	7810      	ldrb	r0, [r2, #0]
 8008a32:	2830      	cmp	r0, #48	; 0x30
 8008a34:	4690      	mov	r8, r2
 8008a36:	f102 0201 	add.w	r2, r2, #1
 8008a3a:	d0f9      	beq.n	8008a30 <__gethex+0x58>
 8008a3c:	f7ff ffb7 	bl	80089ae <__hexdig_fun>
 8008a40:	2301      	movs	r3, #1
 8008a42:	fab0 f480 	clz	r4, r0
 8008a46:	0964      	lsrs	r4, r4, #5
 8008a48:	465e      	mov	r6, fp
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	4615      	mov	r5, r2
 8008a50:	3201      	adds	r2, #1
 8008a52:	7828      	ldrb	r0, [r5, #0]
 8008a54:	f7ff ffab 	bl	80089ae <__hexdig_fun>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1f8      	bne.n	8008a4e <__gethex+0x76>
 8008a5c:	4994      	ldr	r1, [pc, #592]	; (8008cb0 <__gethex+0x2d8>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4628      	mov	r0, r5
 8008a62:	f7ff fefd 	bl	8008860 <strncmp>
 8008a66:	b978      	cbnz	r0, 8008a88 <__gethex+0xb0>
 8008a68:	b946      	cbnz	r6, 8008a7c <__gethex+0xa4>
 8008a6a:	1c6e      	adds	r6, r5, #1
 8008a6c:	4632      	mov	r2, r6
 8008a6e:	4615      	mov	r5, r2
 8008a70:	3201      	adds	r2, #1
 8008a72:	7828      	ldrb	r0, [r5, #0]
 8008a74:	f7ff ff9b 	bl	80089ae <__hexdig_fun>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d1f8      	bne.n	8008a6e <__gethex+0x96>
 8008a7c:	1b73      	subs	r3, r6, r5
 8008a7e:	009e      	lsls	r6, r3, #2
 8008a80:	e004      	b.n	8008a8c <__gethex+0xb4>
 8008a82:	2400      	movs	r4, #0
 8008a84:	4626      	mov	r6, r4
 8008a86:	e7e1      	b.n	8008a4c <__gethex+0x74>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	d1f7      	bne.n	8008a7c <__gethex+0xa4>
 8008a8c:	782b      	ldrb	r3, [r5, #0]
 8008a8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a92:	2b50      	cmp	r3, #80	; 0x50
 8008a94:	d13d      	bne.n	8008b12 <__gethex+0x13a>
 8008a96:	786b      	ldrb	r3, [r5, #1]
 8008a98:	2b2b      	cmp	r3, #43	; 0x2b
 8008a9a:	d02f      	beq.n	8008afc <__gethex+0x124>
 8008a9c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a9e:	d031      	beq.n	8008b04 <__gethex+0x12c>
 8008aa0:	1c69      	adds	r1, r5, #1
 8008aa2:	f04f 0b00 	mov.w	fp, #0
 8008aa6:	7808      	ldrb	r0, [r1, #0]
 8008aa8:	f7ff ff81 	bl	80089ae <__hexdig_fun>
 8008aac:	1e42      	subs	r2, r0, #1
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	2a18      	cmp	r2, #24
 8008ab2:	d82e      	bhi.n	8008b12 <__gethex+0x13a>
 8008ab4:	f1a0 0210 	sub.w	r2, r0, #16
 8008ab8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008abc:	f7ff ff77 	bl	80089ae <__hexdig_fun>
 8008ac0:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ac4:	fa5f fc8c 	uxtb.w	ip, ip
 8008ac8:	f1bc 0f18 	cmp.w	ip, #24
 8008acc:	d91d      	bls.n	8008b0a <__gethex+0x132>
 8008ace:	f1bb 0f00 	cmp.w	fp, #0
 8008ad2:	d000      	beq.n	8008ad6 <__gethex+0xfe>
 8008ad4:	4252      	negs	r2, r2
 8008ad6:	4416      	add	r6, r2
 8008ad8:	f8ca 1000 	str.w	r1, [sl]
 8008adc:	b1dc      	cbz	r4, 8008b16 <__gethex+0x13e>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf14      	ite	ne
 8008ae4:	f04f 0800 	movne.w	r8, #0
 8008ae8:	f04f 0806 	moveq.w	r8, #6
 8008aec:	4640      	mov	r0, r8
 8008aee:	b005      	add	sp, #20
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	4645      	mov	r5, r8
 8008af6:	4626      	mov	r6, r4
 8008af8:	2401      	movs	r4, #1
 8008afa:	e7c7      	b.n	8008a8c <__gethex+0xb4>
 8008afc:	f04f 0b00 	mov.w	fp, #0
 8008b00:	1ca9      	adds	r1, r5, #2
 8008b02:	e7d0      	b.n	8008aa6 <__gethex+0xce>
 8008b04:	f04f 0b01 	mov.w	fp, #1
 8008b08:	e7fa      	b.n	8008b00 <__gethex+0x128>
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	fb03 0002 	mla	r0, r3, r2, r0
 8008b10:	e7d0      	b.n	8008ab4 <__gethex+0xdc>
 8008b12:	4629      	mov	r1, r5
 8008b14:	e7e0      	b.n	8008ad8 <__gethex+0x100>
 8008b16:	eba5 0308 	sub.w	r3, r5, r8
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	2b07      	cmp	r3, #7
 8008b20:	dc0a      	bgt.n	8008b38 <__gethex+0x160>
 8008b22:	4648      	mov	r0, r9
 8008b24:	f7fe f926 	bl	8006d74 <_Balloc>
 8008b28:	4604      	mov	r4, r0
 8008b2a:	b940      	cbnz	r0, 8008b3e <__gethex+0x166>
 8008b2c:	4b61      	ldr	r3, [pc, #388]	; (8008cb4 <__gethex+0x2dc>)
 8008b2e:	4602      	mov	r2, r0
 8008b30:	21e4      	movs	r1, #228	; 0xe4
 8008b32:	4861      	ldr	r0, [pc, #388]	; (8008cb8 <__gethex+0x2e0>)
 8008b34:	f7fd f986 	bl	8005e44 <__assert_func>
 8008b38:	3101      	adds	r1, #1
 8008b3a:	105b      	asrs	r3, r3, #1
 8008b3c:	e7ef      	b.n	8008b1e <__gethex+0x146>
 8008b3e:	f100 0a14 	add.w	sl, r0, #20
 8008b42:	2300      	movs	r3, #0
 8008b44:	495a      	ldr	r1, [pc, #360]	; (8008cb0 <__gethex+0x2d8>)
 8008b46:	f8cd a004 	str.w	sl, [sp, #4]
 8008b4a:	469b      	mov	fp, r3
 8008b4c:	45a8      	cmp	r8, r5
 8008b4e:	d342      	bcc.n	8008bd6 <__gethex+0x1fe>
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	f840 bb04 	str.w	fp, [r0], #4
 8008b56:	eba0 000a 	sub.w	r0, r0, sl
 8008b5a:	1080      	asrs	r0, r0, #2
 8008b5c:	6120      	str	r0, [r4, #16]
 8008b5e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008b62:	4658      	mov	r0, fp
 8008b64:	f7fe f9f8 	bl	8006f58 <__hi0bits>
 8008b68:	683d      	ldr	r5, [r7, #0]
 8008b6a:	eba8 0000 	sub.w	r0, r8, r0
 8008b6e:	42a8      	cmp	r0, r5
 8008b70:	dd59      	ble.n	8008c26 <__gethex+0x24e>
 8008b72:	eba0 0805 	sub.w	r8, r0, r5
 8008b76:	4641      	mov	r1, r8
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7fe fd87 	bl	800768c <__any_on>
 8008b7e:	4683      	mov	fp, r0
 8008b80:	b1b8      	cbz	r0, 8008bb2 <__gethex+0x1da>
 8008b82:	f108 33ff 	add.w	r3, r8, #4294967295
 8008b86:	1159      	asrs	r1, r3, #5
 8008b88:	f003 021f 	and.w	r2, r3, #31
 8008b8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b90:	f04f 0b01 	mov.w	fp, #1
 8008b94:	fa0b f202 	lsl.w	r2, fp, r2
 8008b98:	420a      	tst	r2, r1
 8008b9a:	d00a      	beq.n	8008bb2 <__gethex+0x1da>
 8008b9c:	455b      	cmp	r3, fp
 8008b9e:	dd06      	ble.n	8008bae <__gethex+0x1d6>
 8008ba0:	f1a8 0102 	sub.w	r1, r8, #2
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7fe fd71 	bl	800768c <__any_on>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d138      	bne.n	8008c20 <__gethex+0x248>
 8008bae:	f04f 0b02 	mov.w	fp, #2
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7ff fea8 	bl	800890a <rshift>
 8008bba:	4446      	add	r6, r8
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	42b3      	cmp	r3, r6
 8008bc0:	da41      	bge.n	8008c46 <__gethex+0x26e>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f7fe f915 	bl	8006df4 <_Bfree>
 8008bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008bd4:	e78a      	b.n	8008aec <__gethex+0x114>
 8008bd6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008bda:	2a2e      	cmp	r2, #46	; 0x2e
 8008bdc:	d014      	beq.n	8008c08 <__gethex+0x230>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d106      	bne.n	8008bf0 <__gethex+0x218>
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	f843 bb04 	str.w	fp, [r3], #4
 8008be8:	f04f 0b00 	mov.w	fp, #0
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	465b      	mov	r3, fp
 8008bf0:	7828      	ldrb	r0, [r5, #0]
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	f7ff fedb 	bl	80089ae <__hexdig_fun>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	f000 000f 	and.w	r0, r0, #15
 8008bfe:	4098      	lsls	r0, r3
 8008c00:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c04:	3304      	adds	r3, #4
 8008c06:	e7a1      	b.n	8008b4c <__gethex+0x174>
 8008c08:	45a8      	cmp	r8, r5
 8008c0a:	d8e8      	bhi.n	8008bde <__gethex+0x206>
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	4628      	mov	r0, r5
 8008c10:	9303      	str	r3, [sp, #12]
 8008c12:	f7ff fe25 	bl	8008860 <strncmp>
 8008c16:	4926      	ldr	r1, [pc, #152]	; (8008cb0 <__gethex+0x2d8>)
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d1df      	bne.n	8008bde <__gethex+0x206>
 8008c1e:	e795      	b.n	8008b4c <__gethex+0x174>
 8008c20:	f04f 0b03 	mov.w	fp, #3
 8008c24:	e7c5      	b.n	8008bb2 <__gethex+0x1da>
 8008c26:	da0b      	bge.n	8008c40 <__gethex+0x268>
 8008c28:	eba5 0800 	sub.w	r8, r5, r0
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4642      	mov	r2, r8
 8008c30:	4648      	mov	r0, r9
 8008c32:	f7fe faf9 	bl	8007228 <__lshift>
 8008c36:	eba6 0608 	sub.w	r6, r6, r8
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	f100 0a14 	add.w	sl, r0, #20
 8008c40:	f04f 0b00 	mov.w	fp, #0
 8008c44:	e7ba      	b.n	8008bbc <__gethex+0x1e4>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	42b3      	cmp	r3, r6
 8008c4a:	dd73      	ble.n	8008d34 <__gethex+0x35c>
 8008c4c:	1b9e      	subs	r6, r3, r6
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	dc34      	bgt.n	8008cbc <__gethex+0x2e4>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d023      	beq.n	8008ca0 <__gethex+0x2c8>
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d025      	beq.n	8008ca8 <__gethex+0x2d0>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d115      	bne.n	8008c8c <__gethex+0x2b4>
 8008c60:	42b5      	cmp	r5, r6
 8008c62:	d113      	bne.n	8008c8c <__gethex+0x2b4>
 8008c64:	2d01      	cmp	r5, #1
 8008c66:	d10b      	bne.n	8008c80 <__gethex+0x2a8>
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	6123      	str	r3, [r4, #16]
 8008c72:	f8ca 3000 	str.w	r3, [sl]
 8008c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c78:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008c7c:	601c      	str	r4, [r3, #0]
 8008c7e:	e735      	b.n	8008aec <__gethex+0x114>
 8008c80:	1e69      	subs	r1, r5, #1
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7fe fd02 	bl	800768c <__any_on>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d1ed      	bne.n	8008c68 <__gethex+0x290>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4648      	mov	r0, r9
 8008c90:	f7fe f8b0 	bl	8006df4 <_Bfree>
 8008c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c96:	2300      	movs	r3, #0
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008c9e:	e725      	b.n	8008aec <__gethex+0x114>
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f2      	bne.n	8008c8c <__gethex+0x2b4>
 8008ca6:	e7df      	b.n	8008c68 <__gethex+0x290>
 8008ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1dc      	bne.n	8008c68 <__gethex+0x290>
 8008cae:	e7ed      	b.n	8008c8c <__gethex+0x2b4>
 8008cb0:	08009904 	.word	0x08009904
 8008cb4:	0800979d 	.word	0x0800979d
 8008cb8:	08009a72 	.word	0x08009a72
 8008cbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008cc0:	f1bb 0f00 	cmp.w	fp, #0
 8008cc4:	d133      	bne.n	8008d2e <__gethex+0x356>
 8008cc6:	f1b8 0f00 	cmp.w	r8, #0
 8008cca:	d004      	beq.n	8008cd6 <__gethex+0x2fe>
 8008ccc:	4641      	mov	r1, r8
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7fe fcdc 	bl	800768c <__any_on>
 8008cd4:	4683      	mov	fp, r0
 8008cd6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ce0:	f008 081f 	and.w	r8, r8, #31
 8008ce4:	fa03 f308 	lsl.w	r3, r3, r8
 8008ce8:	4213      	tst	r3, r2
 8008cea:	4631      	mov	r1, r6
 8008cec:	4620      	mov	r0, r4
 8008cee:	bf18      	it	ne
 8008cf0:	f04b 0b02 	orrne.w	fp, fp, #2
 8008cf4:	1bad      	subs	r5, r5, r6
 8008cf6:	f7ff fe08 	bl	800890a <rshift>
 8008cfa:	687e      	ldr	r6, [r7, #4]
 8008cfc:	f04f 0802 	mov.w	r8, #2
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	d04a      	beq.n	8008d9c <__gethex+0x3c4>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d016      	beq.n	8008d3a <__gethex+0x362>
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d018      	beq.n	8008d42 <__gethex+0x36a>
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d109      	bne.n	8008d28 <__gethex+0x350>
 8008d14:	f01b 0f02 	tst.w	fp, #2
 8008d18:	d006      	beq.n	8008d28 <__gethex+0x350>
 8008d1a:	f8da 3000 	ldr.w	r3, [sl]
 8008d1e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008d22:	f01b 0f01 	tst.w	fp, #1
 8008d26:	d10f      	bne.n	8008d48 <__gethex+0x370>
 8008d28:	f048 0810 	orr.w	r8, r8, #16
 8008d2c:	e036      	b.n	8008d9c <__gethex+0x3c4>
 8008d2e:	f04f 0b01 	mov.w	fp, #1
 8008d32:	e7d0      	b.n	8008cd6 <__gethex+0x2fe>
 8008d34:	f04f 0801 	mov.w	r8, #1
 8008d38:	e7e2      	b.n	8008d00 <__gethex+0x328>
 8008d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d3c:	f1c3 0301 	rsb	r3, r3, #1
 8008d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0ef      	beq.n	8008d28 <__gethex+0x350>
 8008d48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d4c:	f104 0214 	add.w	r2, r4, #20
 8008d50:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4694      	mov	ip, r2
 8008d5e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008d62:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008d66:	d01e      	beq.n	8008da6 <__gethex+0x3ce>
 8008d68:	3101      	adds	r1, #1
 8008d6a:	f8cc 1000 	str.w	r1, [ip]
 8008d6e:	f1b8 0f02 	cmp.w	r8, #2
 8008d72:	f104 0214 	add.w	r2, r4, #20
 8008d76:	d13d      	bne.n	8008df4 <__gethex+0x41c>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	d10b      	bne.n	8008d98 <__gethex+0x3c0>
 8008d80:	1169      	asrs	r1, r5, #5
 8008d82:	2301      	movs	r3, #1
 8008d84:	f005 051f 	and.w	r5, r5, #31
 8008d88:	fa03 f505 	lsl.w	r5, r3, r5
 8008d8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d90:	421d      	tst	r5, r3
 8008d92:	bf18      	it	ne
 8008d94:	f04f 0801 	movne.w	r8, #1
 8008d98:	f048 0820 	orr.w	r8, r8, #32
 8008d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d9e:	601c      	str	r4, [r3, #0]
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	601e      	str	r6, [r3, #0]
 8008da4:	e6a2      	b.n	8008aec <__gethex+0x114>
 8008da6:	4290      	cmp	r0, r2
 8008da8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008dac:	d8d6      	bhi.n	8008d5c <__gethex+0x384>
 8008dae:	68a2      	ldr	r2, [r4, #8]
 8008db0:	4593      	cmp	fp, r2
 8008db2:	db17      	blt.n	8008de4 <__gethex+0x40c>
 8008db4:	6861      	ldr	r1, [r4, #4]
 8008db6:	4648      	mov	r0, r9
 8008db8:	3101      	adds	r1, #1
 8008dba:	f7fd ffdb 	bl	8006d74 <_Balloc>
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	b918      	cbnz	r0, 8008dca <__gethex+0x3f2>
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <__gethex+0x458>)
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	2184      	movs	r1, #132	; 0x84
 8008dc8:	e6b3      	b.n	8008b32 <__gethex+0x15a>
 8008dca:	6922      	ldr	r2, [r4, #16]
 8008dcc:	3202      	adds	r2, #2
 8008dce:	f104 010c 	add.w	r1, r4, #12
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	300c      	adds	r0, #12
 8008dd6:	f7ff fd65 	bl	80088a4 <memcpy>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4648      	mov	r0, r9
 8008dde:	f7fe f809 	bl	8006df4 <_Bfree>
 8008de2:	4654      	mov	r4, sl
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	1c51      	adds	r1, r2, #1
 8008de8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008dec:	6121      	str	r1, [r4, #16]
 8008dee:	2101      	movs	r1, #1
 8008df0:	6151      	str	r1, [r2, #20]
 8008df2:	e7bc      	b.n	8008d6e <__gethex+0x396>
 8008df4:	6921      	ldr	r1, [r4, #16]
 8008df6:	4559      	cmp	r1, fp
 8008df8:	dd0b      	ble.n	8008e12 <__gethex+0x43a>
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff fd84 	bl	800890a <rshift>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	3601      	adds	r6, #1
 8008e06:	42b3      	cmp	r3, r6
 8008e08:	f6ff aedb 	blt.w	8008bc2 <__gethex+0x1ea>
 8008e0c:	f04f 0801 	mov.w	r8, #1
 8008e10:	e7c2      	b.n	8008d98 <__gethex+0x3c0>
 8008e12:	f015 051f 	ands.w	r5, r5, #31
 8008e16:	d0f9      	beq.n	8008e0c <__gethex+0x434>
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	441a      	add	r2, r3
 8008e1c:	f1c5 0520 	rsb	r5, r5, #32
 8008e20:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008e24:	f7fe f898 	bl	8006f58 <__hi0bits>
 8008e28:	42a8      	cmp	r0, r5
 8008e2a:	dbe6      	blt.n	8008dfa <__gethex+0x422>
 8008e2c:	e7ee      	b.n	8008e0c <__gethex+0x434>
 8008e2e:	bf00      	nop
 8008e30:	0800979d 	.word	0x0800979d

08008e34 <L_shift>:
 8008e34:	f1c2 0208 	rsb	r2, r2, #8
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	f1c2 0620 	rsb	r6, r2, #32
 8008e40:	6843      	ldr	r3, [r0, #4]
 8008e42:	6804      	ldr	r4, [r0, #0]
 8008e44:	fa03 f506 	lsl.w	r5, r3, r6
 8008e48:	432c      	orrs	r4, r5
 8008e4a:	40d3      	lsrs	r3, r2
 8008e4c:	6004      	str	r4, [r0, #0]
 8008e4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e52:	4288      	cmp	r0, r1
 8008e54:	d3f4      	bcc.n	8008e40 <L_shift+0xc>
 8008e56:	bd70      	pop	{r4, r5, r6, pc}

08008e58 <__match>:
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	6803      	ldr	r3, [r0, #0]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e62:	b914      	cbnz	r4, 8008e6a <__match+0x12>
 8008e64:	6003      	str	r3, [r0, #0]
 8008e66:	2001      	movs	r0, #1
 8008e68:	bd30      	pop	{r4, r5, pc}
 8008e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e72:	2d19      	cmp	r5, #25
 8008e74:	bf98      	it	ls
 8008e76:	3220      	addls	r2, #32
 8008e78:	42a2      	cmp	r2, r4
 8008e7a:	d0f0      	beq.n	8008e5e <__match+0x6>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e7f3      	b.n	8008e68 <__match+0x10>

08008e80 <__hexnan>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	680b      	ldr	r3, [r1, #0]
 8008e86:	6801      	ldr	r1, [r0, #0]
 8008e88:	115e      	asrs	r6, r3, #5
 8008e8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e8e:	f013 031f 	ands.w	r3, r3, #31
 8008e92:	b087      	sub	sp, #28
 8008e94:	bf18      	it	ne
 8008e96:	3604      	addne	r6, #4
 8008e98:	2500      	movs	r5, #0
 8008e9a:	1f37      	subs	r7, r6, #4
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	4690      	mov	r8, r2
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ea6:	46b9      	mov	r9, r7
 8008ea8:	463c      	mov	r4, r7
 8008eaa:	9502      	str	r5, [sp, #8]
 8008eac:	46ab      	mov	fp, r5
 8008eae:	784a      	ldrb	r2, [r1, #1]
 8008eb0:	1c4b      	adds	r3, r1, #1
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	b342      	cbz	r2, 8008f08 <__hexnan+0x88>
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	9105      	str	r1, [sp, #20]
 8008eba:	9204      	str	r2, [sp, #16]
 8008ebc:	f7ff fd77 	bl	80089ae <__hexdig_fun>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d14f      	bne.n	8008f64 <__hexnan+0xe4>
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	9905      	ldr	r1, [sp, #20]
 8008ec8:	2a20      	cmp	r2, #32
 8008eca:	d818      	bhi.n	8008efe <__hexnan+0x7e>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	459b      	cmp	fp, r3
 8008ed0:	dd13      	ble.n	8008efa <__hexnan+0x7a>
 8008ed2:	454c      	cmp	r4, r9
 8008ed4:	d206      	bcs.n	8008ee4 <__hexnan+0x64>
 8008ed6:	2d07      	cmp	r5, #7
 8008ed8:	dc04      	bgt.n	8008ee4 <__hexnan+0x64>
 8008eda:	462a      	mov	r2, r5
 8008edc:	4649      	mov	r1, r9
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff ffa8 	bl	8008e34 <L_shift>
 8008ee4:	4544      	cmp	r4, r8
 8008ee6:	d950      	bls.n	8008f8a <__hexnan+0x10a>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f1a4 0904 	sub.w	r9, r4, #4
 8008eee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ef2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ef6:	464c      	mov	r4, r9
 8008ef8:	461d      	mov	r5, r3
 8008efa:	9903      	ldr	r1, [sp, #12]
 8008efc:	e7d7      	b.n	8008eae <__hexnan+0x2e>
 8008efe:	2a29      	cmp	r2, #41	; 0x29
 8008f00:	d155      	bne.n	8008fae <__hexnan+0x12e>
 8008f02:	3102      	adds	r1, #2
 8008f04:	f8ca 1000 	str.w	r1, [sl]
 8008f08:	f1bb 0f00 	cmp.w	fp, #0
 8008f0c:	d04f      	beq.n	8008fae <__hexnan+0x12e>
 8008f0e:	454c      	cmp	r4, r9
 8008f10:	d206      	bcs.n	8008f20 <__hexnan+0xa0>
 8008f12:	2d07      	cmp	r5, #7
 8008f14:	dc04      	bgt.n	8008f20 <__hexnan+0xa0>
 8008f16:	462a      	mov	r2, r5
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7ff ff8a 	bl	8008e34 <L_shift>
 8008f20:	4544      	cmp	r4, r8
 8008f22:	d934      	bls.n	8008f8e <__hexnan+0x10e>
 8008f24:	f1a8 0204 	sub.w	r2, r8, #4
 8008f28:	4623      	mov	r3, r4
 8008f2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f32:	429f      	cmp	r7, r3
 8008f34:	d2f9      	bcs.n	8008f2a <__hexnan+0xaa>
 8008f36:	1b3b      	subs	r3, r7, r4
 8008f38:	f023 0303 	bic.w	r3, r3, #3
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	3e03      	subs	r6, #3
 8008f40:	3401      	adds	r4, #1
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	bf38      	it	cc
 8008f46:	2304      	movcc	r3, #4
 8008f48:	4443      	add	r3, r8
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f843 2b04 	str.w	r2, [r3], #4
 8008f50:	429f      	cmp	r7, r3
 8008f52:	d2fb      	bcs.n	8008f4c <__hexnan+0xcc>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	b91b      	cbnz	r3, 8008f60 <__hexnan+0xe0>
 8008f58:	4547      	cmp	r7, r8
 8008f5a:	d126      	bne.n	8008faa <__hexnan+0x12a>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	2005      	movs	r0, #5
 8008f62:	e025      	b.n	8008fb0 <__hexnan+0x130>
 8008f64:	3501      	adds	r5, #1
 8008f66:	2d08      	cmp	r5, #8
 8008f68:	f10b 0b01 	add.w	fp, fp, #1
 8008f6c:	dd06      	ble.n	8008f7c <__hexnan+0xfc>
 8008f6e:	4544      	cmp	r4, r8
 8008f70:	d9c3      	bls.n	8008efa <__hexnan+0x7a>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f78:	2501      	movs	r5, #1
 8008f7a:	3c04      	subs	r4, #4
 8008f7c:	6822      	ldr	r2, [r4, #0]
 8008f7e:	f000 000f 	and.w	r0, r0, #15
 8008f82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f86:	6020      	str	r0, [r4, #0]
 8008f88:	e7b7      	b.n	8008efa <__hexnan+0x7a>
 8008f8a:	2508      	movs	r5, #8
 8008f8c:	e7b5      	b.n	8008efa <__hexnan+0x7a>
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0df      	beq.n	8008f54 <__hexnan+0xd4>
 8008f94:	f1c3 0320 	rsb	r3, r3, #32
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	40da      	lsrs	r2, r3
 8008f9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008fa8:	e7d4      	b.n	8008f54 <__hexnan+0xd4>
 8008faa:	3f04      	subs	r7, #4
 8008fac:	e7d2      	b.n	8008f54 <__hexnan+0xd4>
 8008fae:	2004      	movs	r0, #4
 8008fb0:	b007      	add	sp, #28
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fb6 <__ascii_mbtowc>:
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	b901      	cbnz	r1, 8008fbc <__ascii_mbtowc+0x6>
 8008fba:	a901      	add	r1, sp, #4
 8008fbc:	b142      	cbz	r2, 8008fd0 <__ascii_mbtowc+0x1a>
 8008fbe:	b14b      	cbz	r3, 8008fd4 <__ascii_mbtowc+0x1e>
 8008fc0:	7813      	ldrb	r3, [r2, #0]
 8008fc2:	600b      	str	r3, [r1, #0]
 8008fc4:	7812      	ldrb	r2, [r2, #0]
 8008fc6:	1e10      	subs	r0, r2, #0
 8008fc8:	bf18      	it	ne
 8008fca:	2001      	movne	r0, #1
 8008fcc:	b002      	add	sp, #8
 8008fce:	4770      	bx	lr
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	e7fb      	b.n	8008fcc <__ascii_mbtowc+0x16>
 8008fd4:	f06f 0001 	mvn.w	r0, #1
 8008fd8:	e7f8      	b.n	8008fcc <__ascii_mbtowc+0x16>

08008fda <_realloc_r>:
 8008fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fde:	4680      	mov	r8, r0
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	b921      	cbnz	r1, 8008ff0 <_realloc_r+0x16>
 8008fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	4611      	mov	r1, r2
 8008fec:	f7fd be36 	b.w	8006c5c <_malloc_r>
 8008ff0:	b92a      	cbnz	r2, 8008ffe <_realloc_r+0x24>
 8008ff2:	f7fd fdbf 	bl	8006b74 <_free_r>
 8008ff6:	4625      	mov	r5, r4
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffe:	f000 fa45 	bl	800948c <_malloc_usable_size_r>
 8009002:	4284      	cmp	r4, r0
 8009004:	4607      	mov	r7, r0
 8009006:	d802      	bhi.n	800900e <_realloc_r+0x34>
 8009008:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800900c:	d812      	bhi.n	8009034 <_realloc_r+0x5a>
 800900e:	4621      	mov	r1, r4
 8009010:	4640      	mov	r0, r8
 8009012:	f7fd fe23 	bl	8006c5c <_malloc_r>
 8009016:	4605      	mov	r5, r0
 8009018:	2800      	cmp	r0, #0
 800901a:	d0ed      	beq.n	8008ff8 <_realloc_r+0x1e>
 800901c:	42bc      	cmp	r4, r7
 800901e:	4622      	mov	r2, r4
 8009020:	4631      	mov	r1, r6
 8009022:	bf28      	it	cs
 8009024:	463a      	movcs	r2, r7
 8009026:	f7ff fc3d 	bl	80088a4 <memcpy>
 800902a:	4631      	mov	r1, r6
 800902c:	4640      	mov	r0, r8
 800902e:	f7fd fda1 	bl	8006b74 <_free_r>
 8009032:	e7e1      	b.n	8008ff8 <_realloc_r+0x1e>
 8009034:	4635      	mov	r5, r6
 8009036:	e7df      	b.n	8008ff8 <_realloc_r+0x1e>

08009038 <__ascii_wctomb>:
 8009038:	b149      	cbz	r1, 800904e <__ascii_wctomb+0x16>
 800903a:	2aff      	cmp	r2, #255	; 0xff
 800903c:	bf85      	ittet	hi
 800903e:	238a      	movhi	r3, #138	; 0x8a
 8009040:	6003      	strhi	r3, [r0, #0]
 8009042:	700a      	strbls	r2, [r1, #0]
 8009044:	f04f 30ff 	movhi.w	r0, #4294967295
 8009048:	bf98      	it	ls
 800904a:	2001      	movls	r0, #1
 800904c:	4770      	bx	lr
 800904e:	4608      	mov	r0, r1
 8009050:	4770      	bx	lr

08009052 <__sfputc_r>:
 8009052:	6893      	ldr	r3, [r2, #8]
 8009054:	3b01      	subs	r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	b410      	push	{r4}
 800905a:	6093      	str	r3, [r2, #8]
 800905c:	da08      	bge.n	8009070 <__sfputc_r+0x1e>
 800905e:	6994      	ldr	r4, [r2, #24]
 8009060:	42a3      	cmp	r3, r4
 8009062:	db01      	blt.n	8009068 <__sfputc_r+0x16>
 8009064:	290a      	cmp	r1, #10
 8009066:	d103      	bne.n	8009070 <__sfputc_r+0x1e>
 8009068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800906c:	f000 b934 	b.w	80092d8 <__swbuf_r>
 8009070:	6813      	ldr	r3, [r2, #0]
 8009072:	1c58      	adds	r0, r3, #1
 8009074:	6010      	str	r0, [r2, #0]
 8009076:	7019      	strb	r1, [r3, #0]
 8009078:	4608      	mov	r0, r1
 800907a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800907e:	4770      	bx	lr

08009080 <__sfputs_r>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	4614      	mov	r4, r2
 8009088:	18d5      	adds	r5, r2, r3
 800908a:	42ac      	cmp	r4, r5
 800908c:	d101      	bne.n	8009092 <__sfputs_r+0x12>
 800908e:	2000      	movs	r0, #0
 8009090:	e007      	b.n	80090a2 <__sfputs_r+0x22>
 8009092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009096:	463a      	mov	r2, r7
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff ffda 	bl	8009052 <__sfputc_r>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d1f3      	bne.n	800908a <__sfputs_r+0xa>
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090a4 <_vfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	460d      	mov	r5, r1
 80090aa:	b09d      	sub	sp, #116	; 0x74
 80090ac:	4614      	mov	r4, r2
 80090ae:	4698      	mov	r8, r3
 80090b0:	4606      	mov	r6, r0
 80090b2:	b118      	cbz	r0, 80090bc <_vfiprintf_r+0x18>
 80090b4:	6a03      	ldr	r3, [r0, #32]
 80090b6:	b90b      	cbnz	r3, 80090bc <_vfiprintf_r+0x18>
 80090b8:	f7fc fda4 	bl	8005c04 <__sinit>
 80090bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090be:	07d9      	lsls	r1, r3, #31
 80090c0:	d405      	bmi.n	80090ce <_vfiprintf_r+0x2a>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	059a      	lsls	r2, r3, #22
 80090c6:	d402      	bmi.n	80090ce <_vfiprintf_r+0x2a>
 80090c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ca:	f7fc feb2 	bl	8005e32 <__retarget_lock_acquire_recursive>
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	071b      	lsls	r3, r3, #28
 80090d2:	d501      	bpl.n	80090d8 <_vfiprintf_r+0x34>
 80090d4:	692b      	ldr	r3, [r5, #16]
 80090d6:	b99b      	cbnz	r3, 8009100 <_vfiprintf_r+0x5c>
 80090d8:	4629      	mov	r1, r5
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f93a 	bl	8009354 <__swsetup_r>
 80090e0:	b170      	cbz	r0, 8009100 <_vfiprintf_r+0x5c>
 80090e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e4:	07dc      	lsls	r4, r3, #31
 80090e6:	d504      	bpl.n	80090f2 <_vfiprintf_r+0x4e>
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	b01d      	add	sp, #116	; 0x74
 80090ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	0598      	lsls	r0, r3, #22
 80090f6:	d4f7      	bmi.n	80090e8 <_vfiprintf_r+0x44>
 80090f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fa:	f7fc fe9b 	bl	8005e34 <__retarget_lock_release_recursive>
 80090fe:	e7f3      	b.n	80090e8 <_vfiprintf_r+0x44>
 8009100:	2300      	movs	r3, #0
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	2320      	movs	r3, #32
 8009106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800910a:	f8cd 800c 	str.w	r8, [sp, #12]
 800910e:	2330      	movs	r3, #48	; 0x30
 8009110:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092c4 <_vfiprintf_r+0x220>
 8009114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009118:	f04f 0901 	mov.w	r9, #1
 800911c:	4623      	mov	r3, r4
 800911e:	469a      	mov	sl, r3
 8009120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009124:	b10a      	cbz	r2, 800912a <_vfiprintf_r+0x86>
 8009126:	2a25      	cmp	r2, #37	; 0x25
 8009128:	d1f9      	bne.n	800911e <_vfiprintf_r+0x7a>
 800912a:	ebba 0b04 	subs.w	fp, sl, r4
 800912e:	d00b      	beq.n	8009148 <_vfiprintf_r+0xa4>
 8009130:	465b      	mov	r3, fp
 8009132:	4622      	mov	r2, r4
 8009134:	4629      	mov	r1, r5
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ffa2 	bl	8009080 <__sfputs_r>
 800913c:	3001      	adds	r0, #1
 800913e:	f000 80a9 	beq.w	8009294 <_vfiprintf_r+0x1f0>
 8009142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009144:	445a      	add	r2, fp
 8009146:	9209      	str	r2, [sp, #36]	; 0x24
 8009148:	f89a 3000 	ldrb.w	r3, [sl]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 80a1 	beq.w	8009294 <_vfiprintf_r+0x1f0>
 8009152:	2300      	movs	r3, #0
 8009154:	f04f 32ff 	mov.w	r2, #4294967295
 8009158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915c:	f10a 0a01 	add.w	sl, sl, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	9307      	str	r3, [sp, #28]
 8009164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009168:	931a      	str	r3, [sp, #104]	; 0x68
 800916a:	4654      	mov	r4, sl
 800916c:	2205      	movs	r2, #5
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	4854      	ldr	r0, [pc, #336]	; (80092c4 <_vfiprintf_r+0x220>)
 8009174:	f7f7 f834 	bl	80001e0 <memchr>
 8009178:	9a04      	ldr	r2, [sp, #16]
 800917a:	b9d8      	cbnz	r0, 80091b4 <_vfiprintf_r+0x110>
 800917c:	06d1      	lsls	r1, r2, #27
 800917e:	bf44      	itt	mi
 8009180:	2320      	movmi	r3, #32
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	0713      	lsls	r3, r2, #28
 8009188:	bf44      	itt	mi
 800918a:	232b      	movmi	r3, #43	; 0x2b
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009190:	f89a 3000 	ldrb.w	r3, [sl]
 8009194:	2b2a      	cmp	r3, #42	; 0x2a
 8009196:	d015      	beq.n	80091c4 <_vfiprintf_r+0x120>
 8009198:	9a07      	ldr	r2, [sp, #28]
 800919a:	4654      	mov	r4, sl
 800919c:	2000      	movs	r0, #0
 800919e:	f04f 0c0a 	mov.w	ip, #10
 80091a2:	4621      	mov	r1, r4
 80091a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a8:	3b30      	subs	r3, #48	; 0x30
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	d94d      	bls.n	800924a <_vfiprintf_r+0x1a6>
 80091ae:	b1b0      	cbz	r0, 80091de <_vfiprintf_r+0x13a>
 80091b0:	9207      	str	r2, [sp, #28]
 80091b2:	e014      	b.n	80091de <_vfiprintf_r+0x13a>
 80091b4:	eba0 0308 	sub.w	r3, r0, r8
 80091b8:	fa09 f303 	lsl.w	r3, r9, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	46a2      	mov	sl, r4
 80091c2:	e7d2      	b.n	800916a <_vfiprintf_r+0xc6>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1d19      	adds	r1, r3, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	9103      	str	r1, [sp, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfbb      	ittet	lt
 80091d0:	425b      	neglt	r3, r3
 80091d2:	f042 0202 	orrlt.w	r2, r2, #2
 80091d6:	9307      	strge	r3, [sp, #28]
 80091d8:	9307      	strlt	r3, [sp, #28]
 80091da:	bfb8      	it	lt
 80091dc:	9204      	strlt	r2, [sp, #16]
 80091de:	7823      	ldrb	r3, [r4, #0]
 80091e0:	2b2e      	cmp	r3, #46	; 0x2e
 80091e2:	d10c      	bne.n	80091fe <_vfiprintf_r+0x15a>
 80091e4:	7863      	ldrb	r3, [r4, #1]
 80091e6:	2b2a      	cmp	r3, #42	; 0x2a
 80091e8:	d134      	bne.n	8009254 <_vfiprintf_r+0x1b0>
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	1d1a      	adds	r2, r3, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	9203      	str	r2, [sp, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfb8      	it	lt
 80091f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091fa:	3402      	adds	r4, #2
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092d4 <_vfiprintf_r+0x230>
 8009202:	7821      	ldrb	r1, [r4, #0]
 8009204:	2203      	movs	r2, #3
 8009206:	4650      	mov	r0, sl
 8009208:	f7f6 ffea 	bl	80001e0 <memchr>
 800920c:	b138      	cbz	r0, 800921e <_vfiprintf_r+0x17a>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	eba0 000a 	sub.w	r0, r0, sl
 8009214:	2240      	movs	r2, #64	; 0x40
 8009216:	4082      	lsls	r2, r0
 8009218:	4313      	orrs	r3, r2
 800921a:	3401      	adds	r4, #1
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	4829      	ldr	r0, [pc, #164]	; (80092c8 <_vfiprintf_r+0x224>)
 8009224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009228:	2206      	movs	r2, #6
 800922a:	f7f6 ffd9 	bl	80001e0 <memchr>
 800922e:	2800      	cmp	r0, #0
 8009230:	d03f      	beq.n	80092b2 <_vfiprintf_r+0x20e>
 8009232:	4b26      	ldr	r3, [pc, #152]	; (80092cc <_vfiprintf_r+0x228>)
 8009234:	bb1b      	cbnz	r3, 800927e <_vfiprintf_r+0x1da>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	3307      	adds	r3, #7
 800923a:	f023 0307 	bic.w	r3, r3, #7
 800923e:	3308      	adds	r3, #8
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009244:	443b      	add	r3, r7
 8009246:	9309      	str	r3, [sp, #36]	; 0x24
 8009248:	e768      	b.n	800911c <_vfiprintf_r+0x78>
 800924a:	fb0c 3202 	mla	r2, ip, r2, r3
 800924e:	460c      	mov	r4, r1
 8009250:	2001      	movs	r0, #1
 8009252:	e7a6      	b.n	80091a2 <_vfiprintf_r+0xfe>
 8009254:	2300      	movs	r3, #0
 8009256:	3401      	adds	r4, #1
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	4619      	mov	r1, r3
 800925c:	f04f 0c0a 	mov.w	ip, #10
 8009260:	4620      	mov	r0, r4
 8009262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009266:	3a30      	subs	r2, #48	; 0x30
 8009268:	2a09      	cmp	r2, #9
 800926a:	d903      	bls.n	8009274 <_vfiprintf_r+0x1d0>
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0c6      	beq.n	80091fe <_vfiprintf_r+0x15a>
 8009270:	9105      	str	r1, [sp, #20]
 8009272:	e7c4      	b.n	80091fe <_vfiprintf_r+0x15a>
 8009274:	fb0c 2101 	mla	r1, ip, r1, r2
 8009278:	4604      	mov	r4, r0
 800927a:	2301      	movs	r3, #1
 800927c:	e7f0      	b.n	8009260 <_vfiprintf_r+0x1bc>
 800927e:	ab03      	add	r3, sp, #12
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	462a      	mov	r2, r5
 8009284:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <_vfiprintf_r+0x22c>)
 8009286:	a904      	add	r1, sp, #16
 8009288:	4630      	mov	r0, r6
 800928a:	f7fb fe59 	bl	8004f40 <_printf_float>
 800928e:	4607      	mov	r7, r0
 8009290:	1c78      	adds	r0, r7, #1
 8009292:	d1d6      	bne.n	8009242 <_vfiprintf_r+0x19e>
 8009294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009296:	07d9      	lsls	r1, r3, #31
 8009298:	d405      	bmi.n	80092a6 <_vfiprintf_r+0x202>
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	059a      	lsls	r2, r3, #22
 800929e:	d402      	bmi.n	80092a6 <_vfiprintf_r+0x202>
 80092a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092a2:	f7fc fdc7 	bl	8005e34 <__retarget_lock_release_recursive>
 80092a6:	89ab      	ldrh	r3, [r5, #12]
 80092a8:	065b      	lsls	r3, r3, #25
 80092aa:	f53f af1d 	bmi.w	80090e8 <_vfiprintf_r+0x44>
 80092ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b0:	e71c      	b.n	80090ec <_vfiprintf_r+0x48>
 80092b2:	ab03      	add	r3, sp, #12
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	462a      	mov	r2, r5
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <_vfiprintf_r+0x22c>)
 80092ba:	a904      	add	r1, sp, #16
 80092bc:	4630      	mov	r0, r6
 80092be:	f7fc f8e3 	bl	8005488 <_printf_i>
 80092c2:	e7e4      	b.n	800928e <_vfiprintf_r+0x1ea>
 80092c4:	08009a59 	.word	0x08009a59
 80092c8:	08009a63 	.word	0x08009a63
 80092cc:	08004f41 	.word	0x08004f41
 80092d0:	08009081 	.word	0x08009081
 80092d4:	08009a5f 	.word	0x08009a5f

080092d8 <__swbuf_r>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	460e      	mov	r6, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	4605      	mov	r5, r0
 80092e0:	b118      	cbz	r0, 80092ea <__swbuf_r+0x12>
 80092e2:	6a03      	ldr	r3, [r0, #32]
 80092e4:	b90b      	cbnz	r3, 80092ea <__swbuf_r+0x12>
 80092e6:	f7fc fc8d 	bl	8005c04 <__sinit>
 80092ea:	69a3      	ldr	r3, [r4, #24]
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	071a      	lsls	r2, r3, #28
 80092f2:	d525      	bpl.n	8009340 <__swbuf_r+0x68>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	b31b      	cbz	r3, 8009340 <__swbuf_r+0x68>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	6922      	ldr	r2, [r4, #16]
 80092fc:	1a98      	subs	r0, r3, r2
 80092fe:	6963      	ldr	r3, [r4, #20]
 8009300:	b2f6      	uxtb	r6, r6
 8009302:	4283      	cmp	r3, r0
 8009304:	4637      	mov	r7, r6
 8009306:	dc04      	bgt.n	8009312 <__swbuf_r+0x3a>
 8009308:	4621      	mov	r1, r4
 800930a:	4628      	mov	r0, r5
 800930c:	f7ff fa54 	bl	80087b8 <_fflush_r>
 8009310:	b9e0      	cbnz	r0, 800934c <__swbuf_r+0x74>
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	60a3      	str	r3, [r4, #8]
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	6022      	str	r2, [r4, #0]
 800931e:	701e      	strb	r6, [r3, #0]
 8009320:	6962      	ldr	r2, [r4, #20]
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	429a      	cmp	r2, r3
 8009326:	d004      	beq.n	8009332 <__swbuf_r+0x5a>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	07db      	lsls	r3, r3, #31
 800932c:	d506      	bpl.n	800933c <__swbuf_r+0x64>
 800932e:	2e0a      	cmp	r6, #10
 8009330:	d104      	bne.n	800933c <__swbuf_r+0x64>
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff fa3f 	bl	80087b8 <_fflush_r>
 800933a:	b938      	cbnz	r0, 800934c <__swbuf_r+0x74>
 800933c:	4638      	mov	r0, r7
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009340:	4621      	mov	r1, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f000 f806 	bl	8009354 <__swsetup_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0d5      	beq.n	80092f8 <__swbuf_r+0x20>
 800934c:	f04f 37ff 	mov.w	r7, #4294967295
 8009350:	e7f4      	b.n	800933c <__swbuf_r+0x64>
	...

08009354 <__swsetup_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <__swsetup_r+0xac>)
 8009358:	4605      	mov	r5, r0
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	460c      	mov	r4, r1
 800935e:	b118      	cbz	r0, 8009368 <__swsetup_r+0x14>
 8009360:	6a03      	ldr	r3, [r0, #32]
 8009362:	b90b      	cbnz	r3, 8009368 <__swsetup_r+0x14>
 8009364:	f7fc fc4e 	bl	8005c04 <__sinit>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800936e:	0718      	lsls	r0, r3, #28
 8009370:	d422      	bmi.n	80093b8 <__swsetup_r+0x64>
 8009372:	06d9      	lsls	r1, r3, #27
 8009374:	d407      	bmi.n	8009386 <__swsetup_r+0x32>
 8009376:	2309      	movs	r3, #9
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e034      	b.n	80093f0 <__swsetup_r+0x9c>
 8009386:	0758      	lsls	r0, r3, #29
 8009388:	d512      	bpl.n	80093b0 <__swsetup_r+0x5c>
 800938a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800938c:	b141      	cbz	r1, 80093a0 <__swsetup_r+0x4c>
 800938e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009392:	4299      	cmp	r1, r3
 8009394:	d002      	beq.n	800939c <__swsetup_r+0x48>
 8009396:	4628      	mov	r0, r5
 8009398:	f7fd fbec 	bl	8006b74 <_free_r>
 800939c:	2300      	movs	r3, #0
 800939e:	6363      	str	r3, [r4, #52]	; 0x34
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	2300      	movs	r3, #0
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f043 0308 	orr.w	r3, r3, #8
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	b94b      	cbnz	r3, 80093d0 <__swsetup_r+0x7c>
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c6:	d003      	beq.n	80093d0 <__swsetup_r+0x7c>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f88c 	bl	80094e8 <__smakebuf_r>
 80093d0:	89a0      	ldrh	r0, [r4, #12]
 80093d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093d6:	f010 0301 	ands.w	r3, r0, #1
 80093da:	d00a      	beq.n	80093f2 <__swsetup_r+0x9e>
 80093dc:	2300      	movs	r3, #0
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	6963      	ldr	r3, [r4, #20]
 80093e2:	425b      	negs	r3, r3
 80093e4:	61a3      	str	r3, [r4, #24]
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	b943      	cbnz	r3, 80093fc <__swsetup_r+0xa8>
 80093ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093ee:	d1c4      	bne.n	800937a <__swsetup_r+0x26>
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	0781      	lsls	r1, r0, #30
 80093f4:	bf58      	it	pl
 80093f6:	6963      	ldrpl	r3, [r4, #20]
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	e7f4      	b.n	80093e6 <__swsetup_r+0x92>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7f7      	b.n	80093f0 <__swsetup_r+0x9c>
 8009400:	20000070 	.word	0x20000070

08009404 <_raise_r>:
 8009404:	291f      	cmp	r1, #31
 8009406:	b538      	push	{r3, r4, r5, lr}
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	d904      	bls.n	8009418 <_raise_r+0x14>
 800940e:	2316      	movs	r3, #22
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800941a:	b112      	cbz	r2, 8009422 <_raise_r+0x1e>
 800941c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009420:	b94b      	cbnz	r3, 8009436 <_raise_r+0x32>
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f830 	bl	8009488 <_getpid_r>
 8009428:	462a      	mov	r2, r5
 800942a:	4601      	mov	r1, r0
 800942c:	4620      	mov	r0, r4
 800942e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009432:	f000 b817 	b.w	8009464 <_kill_r>
 8009436:	2b01      	cmp	r3, #1
 8009438:	d00a      	beq.n	8009450 <_raise_r+0x4c>
 800943a:	1c59      	adds	r1, r3, #1
 800943c:	d103      	bne.n	8009446 <_raise_r+0x42>
 800943e:	2316      	movs	r3, #22
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	2001      	movs	r0, #1
 8009444:	e7e7      	b.n	8009416 <_raise_r+0x12>
 8009446:	2400      	movs	r4, #0
 8009448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800944c:	4628      	mov	r0, r5
 800944e:	4798      	blx	r3
 8009450:	2000      	movs	r0, #0
 8009452:	e7e0      	b.n	8009416 <_raise_r+0x12>

08009454 <raise>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <raise+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f7ff bfd3 	b.w	8009404 <_raise_r>
 800945e:	bf00      	nop
 8009460:	20000070 	.word	0x20000070

08009464 <_kill_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_kill_r+0x20>)
 8009468:	2300      	movs	r3, #0
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	f7f8 fa41 	bl	80018f8 <_kill>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d102      	bne.n	8009480 <_kill_r+0x1c>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	b103      	cbz	r3, 8009480 <_kill_r+0x1c>
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	bf00      	nop
 8009484:	20000488 	.word	0x20000488

08009488 <_getpid_r>:
 8009488:	f7f8 ba2e 	b.w	80018e8 <_getpid>

0800948c <_malloc_usable_size_r>:
 800948c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009490:	1f18      	subs	r0, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfbc      	itt	lt
 8009496:	580b      	ldrlt	r3, [r1, r0]
 8009498:	18c0      	addlt	r0, r0, r3
 800949a:	4770      	bx	lr

0800949c <__swhatbuf_r>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	460c      	mov	r4, r1
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	2900      	cmp	r1, #0
 80094a6:	b096      	sub	sp, #88	; 0x58
 80094a8:	4615      	mov	r5, r2
 80094aa:	461e      	mov	r6, r3
 80094ac:	da0d      	bge.n	80094ca <__swhatbuf_r+0x2e>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094b4:	f04f 0100 	mov.w	r1, #0
 80094b8:	bf0c      	ite	eq
 80094ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094be:	2340      	movne	r3, #64	; 0x40
 80094c0:	2000      	movs	r0, #0
 80094c2:	6031      	str	r1, [r6, #0]
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	b016      	add	sp, #88	; 0x58
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	466a      	mov	r2, sp
 80094cc:	f000 f848 	bl	8009560 <_fstat_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dbec      	blt.n	80094ae <__swhatbuf_r+0x12>
 80094d4:	9901      	ldr	r1, [sp, #4]
 80094d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094de:	4259      	negs	r1, r3
 80094e0:	4159      	adcs	r1, r3
 80094e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e6:	e7eb      	b.n	80094c0 <__swhatbuf_r+0x24>

080094e8 <__smakebuf_r>:
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094ec:	079d      	lsls	r5, r3, #30
 80094ee:	4606      	mov	r6, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d507      	bpl.n	8009504 <__smakebuf_r+0x1c>
 80094f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	2301      	movs	r3, #1
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	b002      	add	sp, #8
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	ab01      	add	r3, sp, #4
 8009506:	466a      	mov	r2, sp
 8009508:	f7ff ffc8 	bl	800949c <__swhatbuf_r>
 800950c:	9900      	ldr	r1, [sp, #0]
 800950e:	4605      	mov	r5, r0
 8009510:	4630      	mov	r0, r6
 8009512:	f7fd fba3 	bl	8006c5c <_malloc_r>
 8009516:	b948      	cbnz	r0, 800952c <__smakebuf_r+0x44>
 8009518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d4ef      	bmi.n	8009500 <__smakebuf_r+0x18>
 8009520:	f023 0303 	bic.w	r3, r3, #3
 8009524:	f043 0302 	orr.w	r3, r3, #2
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	e7e3      	b.n	80094f4 <__smakebuf_r+0xc>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	6020      	str	r0, [r4, #0]
 8009530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	6163      	str	r3, [r4, #20]
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	6120      	str	r0, [r4, #16]
 800953e:	b15b      	cbz	r3, 8009558 <__smakebuf_r+0x70>
 8009540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009544:	4630      	mov	r0, r6
 8009546:	f000 f81d 	bl	8009584 <_isatty_r>
 800954a:	b128      	cbz	r0, 8009558 <__smakebuf_r+0x70>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	431d      	orrs	r5, r3
 800955c:	81a5      	strh	r5, [r4, #12]
 800955e:	e7cf      	b.n	8009500 <__smakebuf_r+0x18>

08009560 <_fstat_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_fstat_r+0x20>)
 8009564:	2300      	movs	r3, #0
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	f7f8 fa22 	bl	80019b6 <_fstat>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d102      	bne.n	800957c <_fstat_r+0x1c>
 8009576:	682b      	ldr	r3, [r5, #0]
 8009578:	b103      	cbz	r3, 800957c <_fstat_r+0x1c>
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	bf00      	nop
 8009580:	20000488 	.word	0x20000488

08009584 <_isatty_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d06      	ldr	r5, [pc, #24]	; (80095a0 <_isatty_r+0x1c>)
 8009588:	2300      	movs	r3, #0
 800958a:	4604      	mov	r4, r0
 800958c:	4608      	mov	r0, r1
 800958e:	602b      	str	r3, [r5, #0]
 8009590:	f7f8 fa21 	bl	80019d6 <_isatty>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_isatty_r+0x1a>
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	b103      	cbz	r3, 800959e <_isatty_r+0x1a>
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20000488 	.word	0x20000488

080095a4 <_init>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr

080095b0 <_fini>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr
