
Robot Phase 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006984  08006984  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006984  08006984  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006984  08006984  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006984  08006984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800698c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000001e4  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ddf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002426  00000000  00000000  00030e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b7a  00000000  00000000  00034e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012281  00000000  00000000  000569ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb94e  00000000  00000000  00068c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134599  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a8  00000000  00000000  001345ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066e8 	.word	0x080066e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080066e8 	.word	0x080066e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	Clocks_Init();
 8000bd2:	f000 fa9d 	bl	8001110 <Clocks_Init>
	Servos_Init();
 8000bd6:	f000 faab 	bl	8001130 <Servos_Init>
	Echo_Init();
 8000bda:	f000 fb2b 	bl	8001234 <Echo_Init>
	Trigger_Init();
 8000bde:	f000 fbbb 	bl	8001358 <Trigger_Init>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000be2:	f000 fed9 	bl	8001998 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be6:	f000 f8c9 	bl	8000d7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bea:	f000 f985 	bl	8000ef8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000bee:	f000 f923 	bl	8000e38 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000bf2:	f000 f951 	bl	8000e98 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	robotSpeed = 0;
 8000bf6:	4952      	ldr	r1, [pc, #328]	; (8000d40 <main+0x174>)
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_UART_Transmit(&huart2, (uint8_t*) testReceive, strlen(testReceive),
 8000c04:	484f      	ldr	r0, [pc, #316]	; (8000d44 <main+0x178>)
 8000c06:	f7ff faeb 	bl	80001e0 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	494c      	ldr	r1, [pc, #304]	; (8000d44 <main+0x178>)
 8000c12:	484d      	ldr	r0, [pc, #308]	; (8000d48 <main+0x17c>)
 8000c14:	f003 f9fc 	bl	8004010 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE BEGIN 3 */
		//setting USART1 register to read an input data.
		USART1->ICR |= USART_ICR_ORECF;
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <main+0x180>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <main+0x180>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6213      	str	r3, [r2, #32]
		status1 = (HAL_UART_Receive(&huart1, (uint8_t*) inputChar1, 1, 100));
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	4949      	ldr	r1, [pc, #292]	; (8000d50 <main+0x184>)
 8000c2a:	484a      	ldr	r0, [pc, #296]	; (8000d54 <main+0x188>)
 8000c2c:	f003 fa84 	bl	8004138 <HAL_UART_Receive>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b48      	ldr	r3, [pc, #288]	; (8000d58 <main+0x18c>)
 8000c36:	701a      	strb	r2, [r3, #0]
		if (status1 == HAL_OK) {
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <main+0x18c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <main+0x88>
			status2 = (HAL_UART_Receive(&huart1, (uint8_t*) inputChar2, 1, 100));
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	4945      	ldr	r1, [pc, #276]	; (8000d5c <main+0x190>)
 8000c46:	4843      	ldr	r0, [pc, #268]	; (8000d54 <main+0x188>)
 8000c48:	f003 fa76 	bl	8004138 <HAL_UART_Receive>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <main+0x194>)
 8000c52:	701a      	strb	r2, [r3, #0]
		}

		if (status1 == HAL_OK && status2 == HAL_OK) {
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <main+0x18c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d117      	bne.n	8000c8c <main+0xc0>
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <main+0x194>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d113      	bne.n	8000c8c <main+0xc0>
			int char1 = atoi(inputChar1);
 8000c64:	483a      	ldr	r0, [pc, #232]	; (8000d50 <main+0x184>)
 8000c66:	f004 fa69 	bl	800513c <atoi>
 8000c6a:	61f8      	str	r0, [r7, #28]
			int char2 = atoi(inputChar2);
 8000c6c:	483b      	ldr	r0, [pc, #236]	; (8000d5c <main+0x190>)
 8000c6e:	f004 fa65 	bl	800513c <atoi>
 8000c72:	61b8      	str	r0, [r7, #24]
			int result = (char1 * 10) + char2;				//store input char data as the distance result.
 8000c74:	69fa      	ldr	r2, [r7, #28]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	461a      	mov	r2, r3
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4413      	add	r3, r2
 8000c84:	617b      	str	r3, [r7, #20]
			setObstacleDistance = result;
 8000c86:	4a37      	ldr	r2, [pc, #220]	; (8000d64 <main+0x198>)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	6013      	str	r3, [r2, #0]
		}

		double measuredDistance = getDistance();
 8000c8c:	f000 fa2e 	bl	80010ec <getDistance>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc4e 	bl	8000534 <__aeabi_i2d>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		current_tick = HAL_GetTick(); 						//timer tick for millis with HAL_ functions.
 8000ca0:	f000 fea4 	bl	80019ec <HAL_GetTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <main+0x19c>)
 8000ca8:	6013      	str	r3, [r2, #0]
		if (current_tick - start_timer > receive_delay) {
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <main+0x19c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <main+0x1a0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad2      	subs	r2, r2, r3
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <main+0x1a4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d91c      	bls.n	8000cf6 <main+0x12a>
			memset(testOutput, 0, 15);
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	482c      	ldr	r0, [pc, #176]	; (8000d74 <main+0x1a8>)
 8000cc2:	f004 fa69 	bl	8005198 <memset>
			sprintf(testOutput, "%d", (int) measuredDistance);
 8000cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cca:	f7ff ff37 	bl	8000b3c <__aeabi_d2iz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4929      	ldr	r1, [pc, #164]	; (8000d78 <main+0x1ac>)
 8000cd4:	4827      	ldr	r0, [pc, #156]	; (8000d74 <main+0x1a8>)
 8000cd6:	f004 faa5 	bl	8005224 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) testOutput, strlen(testOutput), 0); // send dashboard the current distance to obstacle.
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <main+0x1a8>)
 8000cdc:	f7ff fa80 	bl	80001e0 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4923      	ldr	r1, [pc, #140]	; (8000d74 <main+0x1a8>)
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <main+0x188>)
 8000cea:	f003 f991 	bl	8004010 <HAL_UART_Transmit>
			start_timer = current_tick;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <main+0x19c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <main+0x1a0>)
 8000cf4:	6013      	str	r3, [r2, #0]
		}
		double error = measuredDistance - setObstacleDistance;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <main+0x198>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_i2d>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d08:	f7ff fac6 	bl	8000298 <__aeabi_dsub>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	e9c7 2300 	strd	r2, r3, [r7]
		robotSpeed = myPID((double) setObstacleDistance, error); //read PID value
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <main+0x198>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc0b 	bl	8000534 <__aeabi_i2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	ed97 1b00 	vldr	d1, [r7]
 8000d26:	ec43 2b10 	vmov	d0, r2, r3
 8000d2a:	f000 f909 	bl	8000f40 <myPID>
 8000d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8000d32:	eef0 7a60 	vmov.f32	s15, s1
 8000d36:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <main+0x174>)
 8000d38:	ed83 7b00 	vstr	d7, [r3]
	while (1) {
 8000d3c:	e76c      	b.n	8000c18 <main+0x4c>
 8000d3e:	bf00      	nop
 8000d40:	200001e8 	.word	0x200001e8
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000130 	.word	0x20000130
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	200001b8 	.word	0x200001b8
 8000d54:	200000ac 	.word	0x200000ac
 8000d58:	200001f8 	.word	0x200001f8
 8000d5c:	200001c8 	.word	0x200001c8
 8000d60:	200001f9 	.word	0x200001f9
 8000d64:	20000018 	.word	0x20000018
 8000d68:	200001f4 	.word	0x200001f4
 8000d6c:	200001f0 	.word	0x200001f0
 8000d70:	2000001c 	.word	0x2000001c
 8000d74:	200001d8 	.word	0x200001d8
 8000d78:	08006700 	.word	0x08006700

08000d7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a6      	sub	sp, #152	; 0x98
 8000d80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d86:	2228      	movs	r2, #40	; 0x28
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fa04 	bl	8005198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2258      	movs	r2, #88	; 0x58
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 f9f6 	bl	8005198 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db4:	2310      	movs	r3, #16
 8000db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f91b 	bl	8002014 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x6c>
		Error_Handler();
 8000de4:	f000 fb88 	bl	80014f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000dfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 f95a 	bl	80030bc <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x96>
		Error_Handler();
 8000e0e:	f000 fb73 	bl	80014f8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000e12:	2303      	movs	r3, #3
 8000e14:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fbb3 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xb4>
		Error_Handler();
 8000e2c:	f000 fb64 	bl	80014f8 <Error_Handler>
	}
}
 8000e30:	bf00      	nop
 8000e32:	3798      	adds	r7, #152	; 0x98
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_USART1_UART_Init+0x5c>)
 8000e40:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e7c:	f003 f87a 	bl	8003f74 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000e86:	f000 fb37 	bl	80014f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	40013800 	.word	0x40013800

08000e98 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <MX_USART2_UART_Init+0x5c>)
 8000ea0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART2_UART_Init+0x58>)
 8000edc:	f003 f84a 	bl	8003f74 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000ee6:	f000 fb07 	bl	80014f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000130 	.word	0x20000130
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <myPID>:

/* USER CODE BEGIN 4 */

double myPID(double setpoint, double err) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f4a:	ed87 1b00 	vstr	d1, [r7]
	static double integral = 0;
	static double prevErr = 0;

	if (err == 0 || err > setpoint) {
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f5a:	f7ff fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <myPID+0x36>
 8000f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6c:	f7ff fddc 	bl	8000b28 <__aeabi_dcmpgt>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <myPID+0x46>
		integral = 0;
 8000f76:	4954      	ldr	r1, [pc, #336]	; (80010c8 <myPID+0x188>)
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	e9c1 2300 	strd	r2, r3, [r1]
 8000f84:	e00b      	b.n	8000f9e <myPID+0x5e>
	} else {
		integral = integral + err;
 8000f86:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <myPID+0x188>)
 8000f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f90:	f7ff f984 	bl	800029c <__adddf3>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	494b      	ldr	r1, [pc, #300]	; (80010c8 <myPID+0x188>)
 8000f9a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	double derivative = err - prevErr;
 8000f9e:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <myPID+0x18c>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa8:	f7ff f976 	bl	8000298 <__aeabi_dsub>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	prevErr = err;
 8000fb4:	4945      	ldr	r1, [pc, #276]	; (80010cc <myPID+0x18c>)
 8000fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fba:	e9c1 2300 	strd	r2, r3, [r1]

	//PID Controller
	double percentPower = err * kP + integral * kI + derivative * kD;
 8000fbe:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <myPID+0x190>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fac8 	bl	8000558 <__aeabi_f2d>
 8000fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fcc:	f7ff fb1c 	bl	8000608 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <myPID+0x194>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fabb 	bl	8000558 <__aeabi_f2d>
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <myPID+0x188>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fb0e 	bl	8000608 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff f952 	bl	800029c <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	461d      	mov	r5, r3
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <myPID+0x198>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff faa7 	bl	8000558 <__aeabi_f2d>
 800100a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800100e:	f7ff fafb 	bl	8000608 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4620      	mov	r0, r4
 8001018:	4629      	mov	r1, r5
 800101a:	f7ff f93f 	bl	800029c <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//P controller
	//double percentPower = err*kP;

	if (percentPower > 200)	//overloading power
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <myPID+0x19c>)
 800102c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001030:	f7ff fd7a 	bl	8000b28 <__aeabi_dcmpgt>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <myPID+0x104>
			{
		percentPower = 200;
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <myPID+0x19c>)
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	if (percentPower > DEADZONE) {
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <myPID+0x1a0>)
 800104a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800104e:	f7ff fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d022      	beq.n	800109e <myPID+0x15e>
		TIM2->CCR3 = 1480 - percentPower;
 8001058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4920      	ldr	r1, [pc, #128]	; (80010e4 <myPID+0x1a4>)
 8001062:	f7ff f919 	bl	8000298 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fd8b 	bl	8000b8c <__aeabi_d2uiz>
 8001076:	4603      	mov	r3, r0
 8001078:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM2->CCR4 = 1520 + percentPower;
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <myPID+0x1a8>)
 8001080:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001084:	f7ff f90a 	bl	800029c <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd7a 	bl	8000b8c <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	6423      	str	r3, [r4, #64]	; 0x40
 800109c:	e001      	b.n	80010a2 <myPID+0x162>
	} else {
		resetRobot();
 800109e:	f000 f9b3 	bl	8001408 <resetRobot>
	}
	//TODO: remove systick
	return (percentPower / 2);
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010ba:	eeb0 0a47 	vmov.f32	s0, s14
 80010be:	eef0 0a67 	vmov.f32	s1, s15
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdb0      	pop	{r4, r5, r7, pc}
 80010c8:	20000200 	.word	0x20000200
 80010cc:	20000208 	.word	0x20000208
 80010d0:	20000000 	.word	0x20000000
 80010d4:	200001b4 	.word	0x200001b4
 80010d8:	20000004 	.word	0x20000004
 80010dc:	40690000 	.word	0x40690000
 80010e0:	40280000 	.word	0x40280000
 80010e4:	40972000 	.word	0x40972000
 80010e8:	4097c000 	.word	0x4097c000

080010ec <getDistance>:

int getDistance() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	return (TIM4->CCR2) / 58;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <getDistance+0x1c>)
 80010f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f4:	4a05      	ldr	r2, [pc, #20]	; (800110c <getDistance+0x20>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	095b      	lsrs	r3, r3, #5
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40000800 	.word	0x40000800
 800110c:	8d3dcb09 	.word	0x8d3dcb09

08001110 <Clocks_Init>:

void Clocks_Init() {
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	// enable port A, B & C clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <Clocks_Init+0x1c>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <Clocks_Init+0x1c>)
 800111a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800111e:	6153      	str	r3, [r2, #20]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <Servos_Init>:

void Servos_Init() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//PA9
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER9)
 8001134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800113e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (AF << GPIO_MODER_MODER9_Pos);	//AF10 - TIM2_CH3 D8 PA9
 8001142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER9)
 8001146:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH1)
 8001148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001152:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (AF10 << GPIO_AFRH_AFRH1_Pos);
 8001156:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH1)
 800115a:	6253      	str	r3, [r2, #36]	; 0x24

	//PA10
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER10)
 800115c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001166:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (AF << GPIO_MODER_MODER10_Pos);	//AF10 - TIM2_CH4 D2 PA10
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER10)
 800116e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH2)
 8001170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800117a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (AF10 << GPIO_AFRH_AFRH2_Pos);
 800117e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH2)
 8001182:	6253      	str	r3, [r2, #36]	; 0x24

	TIM2_Init();
 8001184:	f000 f802 	bl	800118c <TIM2_Init>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <TIM2_Init>:

void TIM2_Init() {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <TIM2_Init+0xa4>)
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <TIM2_Init+0xa4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 16 - 1;
 800119c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a0:	220f      	movs	r2, #15
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 20000;
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCER |= TIM_CCER_CC4E; //enable ch4 cc mode
 80011ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011bc:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4PE; //set output to toggle on match, Enable pre-load & set PWM mode 1; 110
 80011be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c8:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80011cc:	61d3      	str	r3, [r2, #28]

	TIM2->CCER |= TIM_CCER_CC3E; //enable ch3 cc mode
 80011ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3PE;
 80011de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e8:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80011ec:	61d3      	str	r3, [r2, #28]

	TIM2->CR1 |= TIM_CR1_ARPE;	//enable buffer for auto reload pre-load
 80011ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= TIM_EGR_UG; //Re-initializes the timer counter and generates an update of the registers
 80011fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6153      	str	r3, [r2, #20]
	TIM2->CNT = 0;	//reset counter
 800120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;	//enable up counter
 8001216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6013      	str	r3, [r2, #0]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <Echo_Init>:

void Echo_Init() {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER11)
 8001238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (0b10 << GPIO_MODER_MODER11_Pos);	// Set GPIO PA11 to alternate function.
 8001246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER11)
 800124a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH3)
 800124c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
			| (0b1010 << GPIO_AFRH_AFRH3_Pos);// Select alternate function AF10 (TIM4_CH1)
 800125a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~GPIO_AFRH_AFRH3)
 800125e:	6253      	str	r3, [r2, #36]	; 0x24
	TIM4_Init();
 8001260:	f000 f802 	bl	8001268 <TIM4_Init>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM4_Init>:

void TIM4_Init() {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <TIM4_Init+0xe8>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a37      	ldr	r2, [pc, #220]	; (8001350 <TIM4_Init+0xe8>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	61d3      	str	r3, [r2, #28]

	TIM4->PSC = 16 - 1;	//16Mhz timer scaled down to 1MHz
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <TIM4_Init+0xec>)
 800127a:	220f      	movs	r2, #15
 800127c:	629a      	str	r2, [r3, #40]	; 0x28

	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_CC1S)
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <TIM4_Init+0xec>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f023 0303 	bic.w	r3, r3, #3
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <TIM4_Init+0xec>)
			| (0b01 << TIM_CCMR1_CC1S_Pos);	//01: CC1 channel is configured as input, IC1 is mapped on TI1.
 8001288:	f043 0301 	orr.w	r3, r3, #1
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_CC1S)
 800128c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_IC1PSC);//no prescaler, capture is done each time an edge is detected on the capture input
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <TIM4_Init+0xec>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a30      	ldr	r2, [pc, #192]	; (8001354 <TIM4_Init+0xec>)
 8001294:	f023 030c 	bic.w	r3, r3, #12
 8001298:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_IC1F);//no filter, sampling is done at fDTS
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <TIM4_Init+0xec>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <TIM4_Init+0xec>)
 80012a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012a4:	6193      	str	r3, [r2, #24]

	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC1NP);
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <TIM4_Init+0xec>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <TIM4_Init+0xec>)
 80012ac:	f023 0308 	bic.w	r3, r3, #8
 80012b0:	6213      	str	r3, [r2, #32]
	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC1P);	//00: noninverted/rising edge
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <TIM4_Init+0xec>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <TIM4_Init+0xec>)
 80012b8:	f023 0302 	bic.w	r3, r3, #2
 80012bc:	6213      	str	r3, [r2, #32]
	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC1E) | TIM_CCER_CC1E;	//Enable capture/compare 1
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <TIM4_Init+0xec>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <TIM4_Init+0xec>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6213      	str	r3, [r2, #32]

	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_CC2S)
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <TIM4_Init+0xec>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <TIM4_Init+0xec>)
			| (0b10 << TIM_CCMR1_CC2S_Pos);	//10: CC2 channel is configured as input, IC2 is mapped on TI1.
 80012d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_CC2S)
 80012d8:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_IC2PSC);
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <TIM4_Init+0xec>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <TIM4_Init+0xec>)
 80012e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80012e4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 = (TIM4->CCMR1 & ~TIM_CCMR1_IC2F);
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <TIM4_Init+0xec>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <TIM4_Init+0xec>)
 80012ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80012f0:	6193      	str	r3, [r2, #24]

	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC2NP);
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <TIM4_Init+0xec>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <TIM4_Init+0xec>)
 80012f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012fc:	6213      	str	r3, [r2, #32]
	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC2P) | (0b1 << TIM_CCER_CC2P_Pos);//01: inverted/falling edge
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <TIM4_Init+0xec>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <TIM4_Init+0xec>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	6213      	str	r3, [r2, #32]
	TIM4->CCER = (TIM4->CCER & ~TIM_CCER_CC2E) | TIM_CCER_CC2E;	//Enable capture/compare 2
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <TIM4_Init+0xec>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <TIM4_Init+0xec>)
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	6213      	str	r3, [r2, #32]

	TIM4->SMCR = (TIM4->SMCR & ~TIM_SMCR_TS) | (0b101 << TIM_SMCR_TS_Pos);//Filtered Timer Input 1 (TI1FP1)
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <TIM4_Init+0xec>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <TIM4_Init+0xec>)
 8001320:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001324:	6093      	str	r3, [r2, #8]
	TIM4->SMCR = (TIM4->SMCR & ~TIM_SMCR_SMS) | (0b0100 << TIM_SMCR_SMS_Pos);//Reset Mode - Rising edge of the selected trigger input
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <TIM4_Init+0xec>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	f023 0307 	bic.w	r3, r3, #7
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <TIM4_Init+0xec>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6093      	str	r3, [r2, #8]

	TIM4->CR1 = (TIM4->CR1 & ~TIM_CR1_CEN) | TIM_CR1_CEN;//start TIM4 up counter
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <TIM4_Init+0xec>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <TIM4_Init+0xec>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40000800 	.word	0x40000800

08001358 <Trigger_Init>:

void Trigger_Init() {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	GPIOB->MODER = (GPIOB->MODER & ~GPIO_MODER_MODER5)
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <Trigger_Init+0x2c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <Trigger_Init+0x2c>)
			| (0b10 << GPIO_MODER_MODER5_Pos);// Set GPIO PB5 to alternate function.
 8001366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	GPIOB->MODER = (GPIOB->MODER & ~GPIO_MODER_MODER5)
 800136a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~GPIO_AFRL_AFRL5)
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <Trigger_Init+0x2c>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <Trigger_Init+0x2c>)
			| (0b0010 << GPIO_AFRL_AFRL5_Pos);// Select alternate function AF2 (TIM3_CH2)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~GPIO_AFRL_AFRL5)
 800137a:	6213      	str	r3, [r2, #32]
	TIM3_Init();
 800137c:	f000 f804 	bl	8001388 <TIM3_Init>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	48000400 	.word	0x48000400

08001388 <TIM3_Init>:

void TIM3_Init() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;		//enable TIM3
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <TIM3_Init+0x78>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <TIM3_Init+0x78>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 16 - 1; //Set pre-scaler value to 16
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <TIM3_Init+0x7c>)
 800139a:	220f      	movs	r2, #15
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 0xFFFF; //Set auto reload value to max
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <TIM3_Init+0x7c>)
 80013a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <TIM3_Init+0x7c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CCR2 = 10;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <TIM3_Init+0x7c>)
 80013ae:	220a      	movs	r2, #10
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

	TIM3->CCER = (TIM3->CCER & ~TIM_CCER_CC2E) | TIM_CCER_CC2E;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <TIM3_Init+0x7c>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <TIM3_Init+0x7c>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6213      	str	r3, [r2, #32]

	TIM3->CCMR1 = (TIM3->CCMR1 & ~TIM_CCMR1_CC2S);
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <TIM3_Init+0x7c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <TIM3_Init+0x7c>)
 80013c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c8:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 = (TIM3->CCMR1 & ~TIM_CCMR1_OC2M)
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <TIM3_Init+0x7c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <TIM3_Init+0x7c>)
			| (0b0110 << TIM_CCMR1_OC2M_Pos); //PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive.
 80013d8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
	TIM3->CCMR1 = (TIM3->CCMR1 & ~TIM_CCMR1_OC2M)
 80013dc:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 = (TIM3->CCMR1 & ~TIM_CCMR1_OC2PE) | TIM_CCMR1_OC2PE;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <TIM3_Init+0x7c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <TIM3_Init+0x7c>)
 80013e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e8:	6193      	str	r3, [r2, #24]

	TIM3->CR1 = (TIM3->CR1 & ~TIM_CR1_CEN) | TIM_CR1_CEN; //Enable timer 3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <TIM3_Init+0x7c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <TIM3_Init+0x7c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40000400 	.word	0x40000400

08001408 <resetRobot>:

void resetRobot(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	reverseRobot();
 800140c:	f000 f84f 	bl	80014ae <reverseRobot>
	stopRobot();
 8001410:	f000 f83c 	bl	800148c <stopRobot>

	if (rand() % 2) {
 8001414:	f003 fec8 	bl	80051a8 <rand>
 8001418:	4603      	mov	r3, r0
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <resetRobot+0x20>
		turnRight();
 8001422:	f000 f805 	bl	8001430 <turnRight>
	} else {
		turnLeft();
	}

}
 8001426:	e001      	b.n	800142c <resetRobot+0x24>
		turnLeft();
 8001428:	f000 f819 	bl	800145e <turnLeft>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <turnRight>:

void turnRight(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	TIM2->CCR4 = COUNTER;
 8001434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001438:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = STOP;
 800143e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001442:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(750);
 8001448:	f240 20ee 	movw	r0, #750	; 0x2ee
 800144c:	f000 fada 	bl	8001a04 <HAL_Delay>
	TIM2->CCR3 = STOP;
 8001450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001454:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <turnLeft>:

void turnLeft(void) {
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
	TIM2->CCR4 = CLOCKWISE;
 8001462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001466:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = STOP;
 800146c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001470:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001474:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(750);
 8001476:	f240 20ee 	movw	r0, #750	; 0x2ee
 800147a:	f000 fac3 	bl	8001a04 <HAL_Delay>
	TIM2->CCR4 = STOP;
 800147e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001482:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <stopRobot>:

void stopRobot() {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	TIM2->CCR4 = STOP;
 8001490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001494:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = STOP;
 800149a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <reverseRobot>:
void goRobotGo() {
	TIM2->CCR4 = COUNTER;		//left wheel
	TIM2->CCR3 = CLOCKWISE;		//right wheel
}

void reverseRobot() {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
	TIM2->CCR4 = CLOCKWISE;
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = COUNTER;
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c0:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f000 fa9b 	bl	8001a04 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80014e6:	f000 fa6d 	bl	80019c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40014800 	.word	0x40014800

080014f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x44>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_MspInit+0x44>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x44>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x44>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a36      	ldr	r2, [pc, #216]	; (8001644 <HAL_UART_MspInit+0xf8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d130      	bne.n	80015d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a35      	ldr	r2, [pc, #212]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_UART_MspInit+0xfc>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_UART_MspInit+0xfc>)
 800158c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800159e:	2330      	movs	r3, #48	; 0x30
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ae:	2307      	movs	r3, #7
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4824      	ldr	r0, [pc, #144]	; (800164c <HAL_UART_MspInit+0x100>)
 80015ba:	f000 fba1 	bl	8001d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2025      	movs	r0, #37	; 0x25
 80015c4:	f000 fafa 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015c8:	2025      	movs	r0, #37	; 0x25
 80015ca:	f000 fb13 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ce:	e035      	b.n	800163c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d130      	bne.n	800163c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160a:	230c      	movs	r3, #12
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f000 fb6a 	bl	8001d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2026      	movs	r0, #38	; 0x26
 8001632:	f000 fac3 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001636:	2026      	movs	r0, #38	; 0x26
 8001638:	f000 fadc 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013800 	.word	0x40013800
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800
 8001650:	40004400 	.word	0x40004400

08001654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	201a      	movs	r0, #26
 800166a:	f000 faa7 	bl	8001bbc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800166e:	201a      	movs	r0, #26
 8001670:	f000 fac0 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_InitTick+0x9c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_InitTick+0x9c>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_InitTick+0x9c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800168c:	f107 0210 	add.w	r2, r7, #16
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f001 ff46 	bl	8003528 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800169c:	f001 ff22 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80016a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_InitTick+0xa0>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	3b01      	subs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_InitTick+0xa4>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <HAL_InitTick+0xa8>)
 80016b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_InitTick+0xa4>)
 80016b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016bc:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_InitTick+0xa4>)
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_InitTick+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_InitTick+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_InitTick+0xa4>)
 80016d2:	f002 f979 	bl	80039c8 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80016dc:	4806      	ldr	r0, [pc, #24]	; (80016f8 <HAL_InitTick+0xa4>)
 80016de:	f002 f9d5 	bl	8003a8c <HAL_TIM_Base_Start_IT>
 80016e2:	4603      	mov	r3, r0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3730      	adds	r7, #48	; 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	20000210 	.word	0x20000210
 80016fc:	40014800 	.word	0x40014800

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800175e:	f002 fa05 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000210 	.word	0x20000210

0800176c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART1_IRQHandler+0x10>)
 8001772:	f002 fdb3 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000ac 	.word	0x200000ac

08001780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USART2_IRQHandler+0x10>)
 8001786:	f002 fda9 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000130 	.word	0x20000130

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ae:	f003 fcc9 	bl	8005144 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
	return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
	}
	return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f003 fc2e 	bl	8005144 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20010000 	.word	0x20010000
 8001914:	00000400 	.word	0x00000400
 8001918:	2000025c 	.word	0x2000025c
 800191c:	20000278 	.word	0x20000278

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f003 fbed 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff f929 	bl	8000bcc <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800197c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001988:	0800698c 	.word	0x0800698c
  ldr r2, =_sbss
 800198c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001990:	20000274 	.word	0x20000274

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x28>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x28>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f8fc 	bl	8001ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff fe50 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fda6 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000028 	.word	0x20000028
 80019e8:	20000260 	.word	0x20000260

080019ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000260 	.word	0x20000260

08001a04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000028 	.word	0x20000028

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff4c 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bce:	f7ff ff61 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	6978      	ldr	r0, [r7, #20]
 8001bda:	f7ff ffb1 	bl	8001b40 <NVIC_EncodePriority>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff80 	bl	8001aec <__NVIC_SetPriority>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff54 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d008      	beq.n	8001c34 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2204      	movs	r2, #4
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e020      	b.n	8001c76 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020e 	bic.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d005      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e027      	b.n	8001cf4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    } 
  }
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e160      	b.n	8001fd2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8152 	beq.w	8001fcc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d005      	beq.n	8001d40 <HAL_GPIO_Init+0x40>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d130      	bne.n	8001da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d76:	2201      	movs	r2, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f003 0201 	and.w	r2, r3, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d017      	beq.n	8001dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d123      	bne.n	8001e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	6939      	ldr	r1, [r7, #16]
 8001e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0203 	and.w	r2, r3, #3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80ac 	beq.w	8001fcc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e74:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a5d      	ldr	r2, [pc, #372]	; (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e8c:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eb6:	d025      	beq.n	8001f04 <HAL_GPIO_Init+0x204>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x2f8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d01f      	beq.n	8001f00 <HAL_GPIO_Init+0x200>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x2fc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d019      	beq.n	8001efc <HAL_GPIO_Init+0x1fc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_GPIO_Init+0x304>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_GPIO_Init+0x308>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_GPIO_Init+0x30c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_GPIO_Init+0x1ec>
 8001ee8:	2306      	movs	r3, #6
 8001eea:	e00c      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001eec:	2307      	movs	r3, #7
 8001eee:	e00a      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	e008      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001f04:	2300      	movs	r3, #0
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f16:	4937      	ldr	r1, [pc, #220]	; (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f ae97 	bne.w	8001d10 <HAL_GPIO_Init+0x10>
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	48000800 	.word	0x48000800
 8002000:	48000c00 	.word	0x48000c00
 8002004:	48001000 	.word	0x48001000
 8002008:	48001400 	.word	0x48001400
 800200c:	48001800 	.word	0x48001800
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800201a:	af00      	add	r7, sp, #0
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002024:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f001 b83a 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 816f 	beq.w	800232e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002050:	4bb5      	ldr	r3, [pc, #724]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800205c:	4bb2      	ldr	r3, [pc, #712]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d15c      	bne.n	8002122 <HAL_RCC_OscConfig+0x10e>
 8002068:	4baf      	ldr	r3, [pc, #700]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d155      	bne.n	8002122 <HAL_RCC_OscConfig+0x10e>
 8002076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800208a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0x94>
 80020a2:	4ba1      	ldr	r3, [pc, #644]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e015      	b.n	80020d4 <HAL_RCC_OscConfig+0xc0>
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80020bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020d0:	4b95      	ldr	r3, [pc, #596]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80020dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80020e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020ec:	fab2 f282 	clz	r2, r2
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f002 021f 	and.w	r2, r2, #31
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8111 	beq.w	800232c <HAL_RCC_OscConfig+0x318>
 800210a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8108 	bne.w	800232c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f000 bfc6 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x12e>
 8002134:	4b7c      	ldr	r3, [pc, #496]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7b      	ldr	r2, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e036      	b.n	80021b0 <HAL_RCC_OscConfig+0x19c>
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x158>
 8002152:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a74      	ldr	r2, [pc, #464]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a71      	ldr	r2, [pc, #452]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e021      	b.n	80021b0 <HAL_RCC_OscConfig+0x19c>
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x184>
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x19c>
 8002198:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b60      	ldr	r3, [pc, #384]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5f      	ldr	r2, [pc, #380]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d059      	beq.n	8002274 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc14 	bl	80019ec <HAL_GetTick>
 80021c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ca:	f7ff fc0f 	bl	80019ec <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d902      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	f000 bf67 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 80021e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80021f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_OscConfig+0x1fe>
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x22a>
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800222a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800222e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002242:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002246:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002252:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ab      	beq.n	80021ca <HAL_RCC_OscConfig+0x1b6>
 8002272:	e05c      	b.n	800232e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fbba 	bl	80019ec <HAL_GetTick>
 8002278:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227e:	f7ff fbb5 	bl	80019ec <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d902      	bls.n	8002294 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	f000 bf0d 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 8002294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002298:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80022a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2b2>
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x2de>
 80022c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80022da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_RCC_OscConfig+0x314>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80022fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002306:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ab      	bne.n	800227e <HAL_RCC_OscConfig+0x26a>
 8002326:	e002      	b.n	800232e <HAL_RCC_OscConfig+0x31a>
 8002328:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 817f 	beq.w	8002642 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002344:	4ba7      	ldr	r3, [pc, #668]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002350:	4ba4      	ldr	r3, [pc, #656]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d173      	bne.n	8002444 <HAL_RCC_OscConfig+0x430>
 800235c:	4ba1      	ldr	r3, [pc, #644]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002368:	d16c      	bne.n	8002444 <HAL_RCC_OscConfig+0x430>
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800237c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0x386>
 8002394:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e013      	b.n	80023c2 <HAL_RCC_OscConfig+0x3ae>
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2202      	movs	r2, #2
 80023c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80023c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80023d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f042 0220 	orr.w	r2, r2, #32
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f002 021f 	and.w	r2, r2, #31
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f202 	lsl.w	r2, r1, r2
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCC_OscConfig+0x3f6>
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f000 be52 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	21f8      	movs	r1, #248	; 0xf8
 8002420:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002428:	fa91 f1a1 	rbit	r1, r1
 800242c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002430:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002434:	fab1 f181 	clz	r1, r1
 8002438:	b2c9      	uxtb	r1, r1
 800243a:	408b      	lsls	r3, r1
 800243c:	4969      	ldr	r1, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	e0fe      	b.n	8002642 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8088 	beq.w	8002566 <HAL_RCC_OscConfig+0x552>
 8002456:	2301      	movs	r3, #1
 8002458:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002468:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002476:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	2301      	movs	r3, #1
 8002480:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fab3 	bl	80019ec <HAL_GetTick>
 8002486:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff faae 	bl	80019ec <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d902      	bls.n	80024a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	f000 be06 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80024b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4be>
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0x4e6>
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	2202      	movs	r2, #2
 80024fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002500:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800250c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0af      	beq.n	800248c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	21f8      	movs	r1, #248	; 0xf8
 8002542:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800254a:	fa91 f1a1 	rbit	r1, r1
 800254e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002552:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002556:	fab1 f181 	clz	r1, r1
 800255a:	b2c9      	uxtb	r1, r1
 800255c:	408b      	lsls	r3, r1
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
 8002564:	e06d      	b.n	8002642 <HAL_RCC_OscConfig+0x62e>
 8002566:	2301      	movs	r3, #1
 8002568:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002578:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002586:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fa2b 	bl	80019ec <HAL_GetTick>
 8002596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fa26 	bl	80019ec <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f000 bd7e 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80025c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5d4>
 80025dc:	4b01      	ldr	r3, [pc, #4]	; (80025e4 <HAL_RCC_OscConfig+0x5d0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	e016      	b.n	8002610 <HAL_RCC_OscConfig+0x5fc>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002600:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800260c:	4bbf      	ldr	r3, [pc, #764]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002616:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002622:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ac      	bne.n	800259c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8113 	beq.w	800287e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d07c      	beq.n	8002762 <HAL_RCC_OscConfig+0x74e>
 8002668:	2301      	movs	r3, #1
 800266a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800267a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	4ba2      	ldr	r3, [pc, #648]	; (8002910 <HAL_RCC_OscConfig+0x8fc>)
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	461a      	mov	r2, r3
 800268e:	2301      	movs	r3, #1
 8002690:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff f9ab 	bl	80019ec <HAL_GetTick>
 8002696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7ff f9a6 	bl	80019ec <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f000 bcfe 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f6:	2202      	movs	r2, #2
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002710:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b7e      	ldr	r3, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800271e:	2102      	movs	r1, #2
 8002720:	6019      	str	r1, [r3, #0]
 8002722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f1a3 	rbit	r1, r3
 8002730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002734:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002738:	6019      	str	r1, [r3, #0]
  return result;
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d09d      	beq.n	800269c <HAL_RCC_OscConfig+0x688>
 8002760:	e08d      	b.n	800287e <HAL_RCC_OscConfig+0x86a>
 8002762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002766:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002772:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002780:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002784:	601a      	str	r2, [r3, #0]
  return result;
 8002786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800278e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_RCC_OscConfig+0x8fc>)
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	461a      	mov	r2, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7ff f922 	bl	80019ec <HAL_GetTick>
 80027a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ae:	f7ff f91d 	bl	80019ec <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 bc75 	b.w	80030ae <HAL_RCC_OscConfig+0x109a>
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027cc:	2202      	movs	r2, #2
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002810:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800282e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800283c:	2102      	movs	r1, #2
 800283e:	6019      	str	r1, [r3, #0]
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f1a3 	rbit	r1, r3
 800284e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002852:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002856:	6019      	str	r1, [r3, #0]
  return result;
 8002858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d197      	bne.n	80027ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002882:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 81a5 	beq.w	8002bde <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCC_OscConfig+0x8f8>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCC_OscConfig+0x900>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_RCC_OscConfig+0x900>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x900>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7ff f87e 	bl	80019ec <HAL_GetTick>
 80028f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e010      	b.n	8002918 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7ff f879 	bl	80019ec <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d908      	bls.n	8002918 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e3d1      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	10908120 	.word	0x10908120
 8002914:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0xb3c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0e8      	beq.n	80028f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x92e>
 8002934:	4b87      	ldr	r3, [pc, #540]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a86      	ldr	r2, [pc, #536]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6213      	str	r3, [r2, #32]
 8002940:	e035      	b.n	80029ae <HAL_RCC_OscConfig+0x99a>
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x958>
 8002952:	4b80      	ldr	r3, [pc, #512]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a7f      	ldr	r2, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	e020      	b.n	80029ae <HAL_RCC_OscConfig+0x99a>
 800296c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002970:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x982>
 800297c:	4b75      	ldr	r3, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a74      	ldr	r2, [pc, #464]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	4b72      	ldr	r3, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a71      	ldr	r2, [pc, #452]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e00b      	b.n	80029ae <HAL_RCC_OscConfig+0x99a>
 8002996:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8081 	beq.w	8002ac2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7ff f814 	bl	80019ec <HAL_GetTick>
 80029c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7ff f80f 	bl	80019ec <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e365      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 80029e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a28:	601a      	str	r2, [r3, #0]
  return result;
 8002a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0xa3a>
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	e013      	b.n	8002a76 <HAL_RCC_OscConfig+0xa62>
 8002a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a56:	2202      	movs	r2, #2
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a7e:	2102      	movs	r1, #2
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	fa92 f1a2 	rbit	r1, r2
 8002a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a98:	6011      	str	r1, [r2, #0]
  return result;
 8002a9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d084      	beq.n	80029ca <HAL_RCC_OscConfig+0x9b6>
 8002ac0:	e083      	b.n	8002bca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe ff93 	bl	80019ec <HAL_GetTick>
 8002ac6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe ff8e 	bl	80019ec <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e2e4      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 8002ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0xb44>
 8002b4a:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_RCC_OscConfig+0xb40>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	e017      	b.n	8002b80 <HAL_RCC_OscConfig+0xb6c>
 8002b50:	40007000 	.word	0x40007000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4bb3      	ldr	r3, [pc, #716]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b88:	2102      	movs	r1, #2
 8002b8a:	6011      	str	r1, [r2, #0]
 8002b8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	fa92 f1a2 	rbit	r1, r2
 8002b9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ba2:	6011      	str	r1, [r2, #0]
  return result;
 8002ba4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ba8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f002 021f 	and.w	r2, r2, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d180      	bne.n	8002acc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b9e      	ldr	r3, [pc, #632]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a9d      	ldr	r2, [pc, #628]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 825e 	beq.w	80030ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b96      	ldr	r3, [pc, #600]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	f000 821f 	beq.w	800303c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	f040 8170 	bne.w	8002ef0 <HAL_RCC_OscConfig+0xedc>
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c34:	601a      	str	r2, [r3, #0]
  return result;
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fec9 	bl	80019ec <HAL_GetTick>
 8002c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fec4 	bl	80019ec <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e21c      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 8002c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c98:	601a      	str	r2, [r3, #0]
  return result;
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_OscConfig+0xcaa>
 8002cb8:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	e027      	b.n	8002d0e <HAL_RCC_OscConfig+0xcfa>
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d1a:	6011      	str	r1, [r2, #0]
 8002d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	fa92 f1a2 	rbit	r1, r2
 8002d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d32:	6011      	str	r1, [r2, #0]
  return result;
 8002d34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d182      	bne.n	8002c60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	4937      	ldr	r1, [pc, #220]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d74:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a19      	ldr	r1, [r3, #32]
 8002d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	492d      	ldr	r1, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dc0:	601a      	str	r2, [r3, #0]
  return result;
 8002dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2301      	movs	r3, #1
 8002de0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fe03 	bl	80019ec <HAL_GetTick>
 8002de6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dea:	e009      	b.n	8002e00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fdfe 	bl	80019ec <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e156      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 8002e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e24:	601a      	str	r2, [r3, #0]
  return result;
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe3c>
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_RCC_OscConfig+0xe38>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	e02a      	b.n	8002ea0 <HAL_RCC_OscConfig+0xe8c>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	4b86      	ldr	r3, [pc, #536]	; (80030b8 <HAL_RCC_OscConfig+0x10a4>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ea4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eac:	6011      	str	r1, [r2, #0]
 8002eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	fa92 f1a2 	rbit	r1, r2
 8002ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ec0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ec4:	6011      	str	r1, [r2, #0]
  return result;
 8002ec6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f43f af7f 	beq.w	8002dec <HAL_RCC_OscConfig+0xdd8>
 8002eee:	e0dd      	b.n	80030ac <HAL_RCC_OscConfig+0x1098>
 8002ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f14:	601a      	str	r2, [r3, #0]
  return result;
 8002f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7fe fd59 	bl	80019ec <HAL_GetTick>
 8002f3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3e:	e009      	b.n	8002f54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe fd54 	bl	80019ec <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0ac      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f78:	601a      	str	r2, [r3, #0]
  return result;
 8002f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d102      	bne.n	8002f9e <HAL_RCC_OscConfig+0xf8a>
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_OscConfig+0x10a4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	e027      	b.n	8002fee <HAL_RCC_OscConfig+0xfda>
 8002f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x10a4>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ff2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ff6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ffa:	6011      	str	r1, [r2, #0]
 8002ffc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003000:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	fa92 f1a2 	rbit	r1, r2
 800300a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800300e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003012:	6011      	str	r1, [r2, #0]
  return result;
 8003014:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003018:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	fab2 f282 	clz	r2, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f002 021f 	and.w	r2, r2, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d182      	bne.n	8002f40 <HAL_RCC_OscConfig+0xf2c>
 800303a:	e037      	b.n	80030ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003040:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02e      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x10a4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_RCC_OscConfig+0x10a4>)
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003064:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d117      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003078:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800307c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800308c:	429a      	cmp	r2, r3
 800308e:	d10b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b09e      	sub	sp, #120	; 0x78
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e162      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b90      	ldr	r3, [pc, #576]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b8d      	ldr	r3, [pc, #564]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	498b      	ldr	r1, [pc, #556]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e14a      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	497f      	ldr	r1, [pc, #508]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80dc 	beq.w	80032e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d13c      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xf6>
 8003138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <HAL_RCC_ClockConfig+0xa6>
 800315c:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	e00f      	b.n	8003182 <HAL_RCC_ClockConfig+0xc6>
 8003162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003166:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	667b      	str	r3, [r7, #100]	; 0x64
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	663b      	str	r3, [r7, #96]	; 0x60
 8003176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003186:	65ba      	str	r2, [r7, #88]	; 0x58
 8003188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800318a:	fa92 f2a2 	rbit	r2, r2
 800318e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f042 0220 	orr.w	r2, r2, #32
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f002 021f 	and.w	r2, r2, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d17b      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0f3      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d13c      	bne.n	8003234 <HAL_RCC_ClockConfig+0x178>
 80031ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x128>
 80031de:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	e00f      	b.n	8003204 <HAL_RCC_ClockConfig+0x148>
 80031e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
 80031f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f6:	643b      	str	r3, [r7, #64]	; 0x40
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	63ba      	str	r2, [r7, #56]	; 0x38
 800320a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320c:	fa92 f2a2 	rbit	r2, r2
 8003210:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003214:	fab2 f282 	clz	r2, r2
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f042 0220 	orr.w	r2, r2, #32
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f002 021f 	and.w	r2, r2, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d13a      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b2      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
 8003234:	2302      	movs	r3, #2
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_RCC_ClockConfig+0x1a0>
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	e00d      	b.n	8003278 <HAL_RCC_ClockConfig+0x1bc>
 800325c:	2302      	movs	r3, #2
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	2302      	movs	r3, #2
 800326a:	623b      	str	r3, [r7, #32]
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	61ba      	str	r2, [r7, #24]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	fa92 f2a2 	rbit	r2, r2
 8003282:	617a      	str	r2, [r7, #20]
  return result;
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	fab2 f282 	clz	r2, r2
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	f042 0220 	orr.w	r2, r2, #32
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f002 021f 	and.w	r2, r2, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e079      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	491a      	ldr	r1, [pc, #104]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fe fb98 	bl	80019ec <HAL_GetTick>
 80032bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fe fb94 	bl	80019ec <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e061      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d214      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4906      	ldr	r1, [pc, #24]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e040      	b.n	800339a <HAL_RCC_ClockConfig+0x2de>
 8003318:	40022000 	.word	0x40022000
 800331c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_RCC_ClockConfig+0x2e8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	491a      	ldr	r1, [pc, #104]	; (80033a4 <HAL_RCC_ClockConfig+0x2e8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCC_ClockConfig+0x2e8>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4912      	ldr	r1, [pc, #72]	; (80033a4 <HAL_RCC_ClockConfig+0x2e8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800335e:	f000 f829 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003362:	4601      	mov	r1, r0
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	22f0      	movs	r2, #240	; 0xf0
 800336e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	fa92 f2a2 	rbit	r2, r2
 8003376:	60fa      	str	r2, [r7, #12]
  return result;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	fab2 f282 	clz	r2, r2
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	40d3      	lsrs	r3, r2
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	fa21 f303 	lsr.w	r3, r1, r3
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_RCC_ClockConfig+0x2f0>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe f95e 	bl	8001654 <HAL_InitTick>
  
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3778      	adds	r7, #120	; 0x78
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08006704 	.word	0x08006704
 80033ac:	20000020 	.word	0x20000020
 80033b0:	20000024 	.word	0x20000024

080033b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b08b      	sub	sp, #44	; 0x2c
 80033b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x30>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x36>
 80033e2:	e03f      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033e6:	623b      	str	r3, [r7, #32]
      break;
 80033e8:	e03f      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	fa92 f2a2 	rbit	r2, r2
 80033fc:	607a      	str	r2, [r7, #4]
  return result;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	40d3      	lsrs	r3, r2
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_RCC_GetSysClockFreq+0xcc>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	220f      	movs	r2, #15
 8003418:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	60fa      	str	r2, [r7, #12]
  return result;
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_RCC_GetSysClockFreq+0xd0>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_RCC_GetSysClockFreq+0xc8>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
 800344c:	e007      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800344e:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fbb2 f2f3 	udiv	r2, r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	623b      	str	r3, [r7, #32]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003466:	623b      	str	r3, [r7, #32]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	6a3b      	ldr	r3, [r7, #32]
}
 800346c:	4618      	mov	r0, r3
 800346e:	372c      	adds	r7, #44	; 0x2c
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40021000 	.word	0x40021000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	0800671c 	.word	0x0800671c
 8003484:	0800672c 	.word	0x0800672c

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000020 	.word	0x20000020

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034a6:	f7ff ffef 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034aa:	4601      	mov	r1, r0
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	fa92 f2a2 	rbit	r2, r2
 80034c0:	603a      	str	r2, [r7, #0]
  return result;
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	40d3      	lsrs	r3, r2
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08006714 	.word	0x08006714

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034ea:	f7ff ffcd 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034ee:	4601      	mov	r1, r0
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	603a      	str	r2, [r7, #0]
  return result;
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	40d3      	lsrs	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	08006714 	.word	0x08006714

08003528 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	220f      	movs	r2, #15
 8003536:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_GetClockConfig+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0207 	and.w	r2, r3, #7
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40022000 	.word	0x40022000

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b092      	sub	sp, #72	; 0x48
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d4 	beq.w	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10e      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
 80035c8:	4b48      	ldr	r3, [pc, #288]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a41      	ldr	r2, [pc, #260]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe f9fb 	bl	80019ec <HAL_GetTick>
 80035f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fe f9f7 	bl	80019ec <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1d6      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8084 	beq.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003634:	429a      	cmp	r2, r3
 8003636:	d07c      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	461a      	mov	r2, r3
 8003662:	2301      	movs	r3, #1
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe f9a7 	bl	80019ec <HAL_GetTick>
 800369e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe f9a3 	bl	80019ec <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e180      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	2302      	movs	r3, #2
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	61fb      	str	r3, [r7, #28]
  return result;
 80036d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d108      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036e6:	4b01      	ldr	r3, [pc, #4]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	e00d      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
 80036f4:	10908100 	.word	0x10908100
 80036f8:	2302      	movs	r3, #2
 80036fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	4b9a      	ldr	r3, [pc, #616]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	613a      	str	r2, [r7, #16]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	60fa      	str	r2, [r7, #12]
  return result;
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0b7      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003732:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	498c      	ldr	r1, [pc, #560]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4a87      	ldr	r2, [pc, #540]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003764:	4b82      	ldr	r3, [pc, #520]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f023 0203 	bic.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	497f      	ldr	r1, [pc, #508]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003782:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4978      	ldr	r1, [pc, #480]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a0:	4b73      	ldr	r3, [pc, #460]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	4970      	ldr	r1, [pc, #448]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f023 0210 	bic.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4969      	ldr	r1, [pc, #420]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	4961      	ldr	r1, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f023 0220 	bic.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	495a      	ldr	r1, [pc, #360]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	4952      	ldr	r1, [pc, #328]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003836:	4b4e      	ldr	r3, [pc, #312]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	494b      	ldr	r1, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4943      	ldr	r1, [pc, #268]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	493c      	ldr	r1, [pc, #240]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003890:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038ae:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	492d      	ldr	r1, [pc, #180]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	4925      	ldr	r1, [pc, #148]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	491e      	ldr	r1, [pc, #120]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	490f      	ldr	r1, [pc, #60]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	4913      	ldr	r1, [pc, #76]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003978:	4313      	orrs	r3, r2
 800397a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	490b      	ldr	r1, [pc, #44]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003996:	4313      	orrs	r3, r2
 8003998:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3748      	adds	r7, #72	; 0x48
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e049      	b.n	8003a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f841 	bl	8003a76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 f9f8 	bl	8003dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e04f      	b.n	8003b44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d018      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIM_Base_Start_IT+0x76>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d115      	bne.n	8003b2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d015      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0xb4>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1a:	d011      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2c:	e008      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e000      	b.n	8003b42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40015000 	.word	0x40015000
 8003b68:	00010007 	.word	0x00010007

08003b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0202 	mvn.w	r2, #2
 8003b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f905 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8f7 	bl	8003daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f908 	bl	8003dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0204 	mvn.w	r2, #4
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8db 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8cd 	bl	8003daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8de 	bl	8003dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0208 	mvn.w	r2, #8
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2204      	movs	r2, #4
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8b1 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8a3 	bl	8003daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8b4 	bl	8003dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0210 	mvn.w	r2, #16
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f887 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f879 	bl	8003daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f88a 	bl	8003dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0201 	mvn.w	r2, #1
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fbf2 	bl	80014d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f918 	bl	8003f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d10e      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d107      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f90b 	bl	8003f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d10e      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f838 	bl	8003de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d10e      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0220 	mvn.w	r2, #32
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8cb 	bl	8003f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a42      	ldr	r2, [pc, #264]	; (8003f18 <TIM_Base_SetConfig+0x11c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d00f      	beq.n	8003e3c <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <TIM_Base_SetConfig+0x120>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3e      	ldr	r2, [pc, #248]	; (8003f20 <TIM_Base_SetConfig+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	; (8003f24 <TIM_Base_SetConfig+0x128>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <TIM_Base_SetConfig+0x12c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d108      	bne.n	8003e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <TIM_Base_SetConfig+0x11c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d01b      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <TIM_Base_SetConfig+0x120>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d017      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	; (8003f20 <TIM_Base_SetConfig+0x124>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <TIM_Base_SetConfig+0x128>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <TIM_Base_SetConfig+0x130>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <TIM_Base_SetConfig+0x134>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <TIM_Base_SetConfig+0x138>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_Base_SetConfig+0x12c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <TIM_Base_SetConfig+0x11c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_Base_SetConfig+0x100>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <TIM_Base_SetConfig+0x128>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x100>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <TIM_Base_SetConfig+0x130>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x100>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <TIM_Base_SetConfig+0x134>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x100>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <TIM_Base_SetConfig+0x138>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x100>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <TIM_Base_SetConfig+0x12c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d103      	bne.n	8003f04 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	615a      	str	r2, [r3, #20]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40015000 	.word	0x40015000
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800

08003f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e040      	b.n	8004008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fad8 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fc90 	bl	80048d8 <UART_SetConfig>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e022      	b.n	8004008 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fe5a 	bl	8004c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fee1 	bl	8004dc8 <UART_CheckIdleState>
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004024:	2b20      	cmp	r3, #32
 8004026:	f040 8082 	bne.w	800412e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Transmit+0x26>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07a      	b.n	8004130 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x38>
 8004044:	2302      	movs	r3, #2
 8004046:	e073      	b.n	8004130 <HAL_UART_Transmit+0x120>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2221      	movs	r2, #33	; 0x21
 800405c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405e:	f7fd fcc5 	bl	80019ec <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d108      	bne.n	8004090 <HAL_UART_Transmit+0x80>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040a0:	e02d      	b.n	80040fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fed4 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e039      	b.n	8004130 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ce:	b292      	uxth	r2, r2
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e008      	b.n	80040ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b292      	uxth	r2, r2
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1cb      	bne.n	80040a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	; 0x40
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fea0 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e005      	b.n	8004130 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	2b20      	cmp	r3, #32
 800414e:	f040 80bf 	bne.w	80042d0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_UART_Receive+0x26>
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0b7      	b.n	80042d2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_UART_Receive+0x38>
 800416c:	2302      	movs	r3, #2
 800416e:	e0b0      	b.n	80042d2 <HAL_UART_Receive+0x19a>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2222      	movs	r2, #34	; 0x22
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418c:	f7fd fc2e 	bl	80019ec <HAL_GetTick>
 8004190:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d10e      	bne.n	80041ca <HAL_UART_Receive+0x92>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <HAL_UART_Receive+0x88>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041be:	e02d      	b.n	800421c <HAL_UART_Receive+0xe4>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041c8:	e028      	b.n	800421c <HAL_UART_Receive+0xe4>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <HAL_UART_Receive+0xb6>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <HAL_UART_Receive+0xac>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041e2:	e01b      	b.n	800421c <HAL_UART_Receive+0xe4>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	227f      	movs	r2, #127	; 0x7f
 80041e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041ec:	e016      	b.n	800421c <HAL_UART_Receive+0xe4>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f6:	d10d      	bne.n	8004214 <HAL_UART_Receive+0xdc>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_UART_Receive+0xd2>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	227f      	movs	r2, #127	; 0x7f
 8004204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004208:	e008      	b.n	800421c <HAL_UART_Receive+0xe4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	223f      	movs	r2, #63	; 0x3f
 800420e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004212:	e003      	b.n	800421c <HAL_UART_Receive+0xe4>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004222:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422c:	d108      	bne.n	8004240 <HAL_UART_Receive+0x108>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e003      	b.n	8004248 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004250:	e033      	b.n	80042ba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	2120      	movs	r1, #32
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fdfc 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e032      	b.n	80042d2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004278:	b29a      	uxth	r2, r3
 800427a:	8a7b      	ldrh	r3, [r7, #18]
 800427c:	4013      	ands	r3, r2
 800427e:	b29a      	uxth	r2, r3
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3302      	adds	r3, #2
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	e00d      	b.n	80042a8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004292:	b29b      	uxth	r3, r3
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8a7b      	ldrh	r3, [r7, #18]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4013      	ands	r3, r2
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3301      	adds	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1c5      	bne.n	8004252 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0ba      	sub	sp, #232	; 0xe8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004302:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004306:	f640 030f 	movw	r3, #2063	; 0x80f
 800430a:	4013      	ands	r3, r2
 800430c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d115      	bne.n	8004344 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00f      	beq.n	8004344 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 82a3 	beq.w	8004880 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
      }
      return;
 8004342:	e29d      	b.n	8004880 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8117 	beq.w	800457c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800435a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800435e:	4b85      	ldr	r3, [pc, #532]	; (8004574 <HAL_UART_IRQHandler+0x298>)
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 810a 	beq.w	800457c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d011      	beq.n	8004398 <HAL_UART_IRQHandler+0xbc>
 8004374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d011      	beq.n	80043c8 <HAL_UART_IRQHandler+0xec>
 80043a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2202      	movs	r2, #2
 80043b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d011      	beq.n	80043f8 <HAL_UART_IRQHandler+0x11c>
 80043d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2204      	movs	r2, #4
 80043e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	f043 0202 	orr.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004414:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00b      	beq.n	8004434 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442a:	f043 0208 	orr.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <HAL_UART_IRQHandler+0x18a>
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8209 	beq.w	8004884 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d005      	beq.n	80044be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d04f      	beq.n	800455e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fd8f 	bl	8004fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d141      	bne.n	8004556 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800450a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1d9      	bne.n	80044d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	2b00      	cmp	r3, #0
 8004524:	d013      	beq.n	800454e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_UART_IRQHandler+0x29c>)
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fba5 	bl	8001c82 <HAL_DMA_Abort_IT>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d017      	beq.n	800456e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004548:	4610      	mov	r0, r2
 800454a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	e00f      	b.n	800456e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9ac 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00b      	b.n	800456e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9a8 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e007      	b.n	800456e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9a4 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800456c:	e18a      	b.n	8004884 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456e:	bf00      	nop
    return;
 8004570:	e188      	b.n	8004884 <HAL_UART_IRQHandler+0x5a8>
 8004572:	bf00      	nop
 8004574:	04000120 	.word	0x04000120
 8004578:	080050a9 	.word	0x080050a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2b01      	cmp	r3, #1
 8004582:	f040 8143 	bne.w	800480c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 813c 	beq.w	800480c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8135 	beq.w	800480c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2210      	movs	r2, #16
 80045a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	f040 80b1 	bne.w	800471c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 815c 	beq.w	8004888 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045da:	429a      	cmp	r2, r3
 80045dc:	f080 8154 	bcs.w	8004888 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	f000 8085 	beq.w	8004700 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800460a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800460e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004624:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800462c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1da      	bne.n	80045f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004664:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004668:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800466c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e1      	bne.n	8004640 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e3      	bne.n	800467c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e4      	bne.n	80046c0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fd fa88 	bl	8001c10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	b29b      	uxth	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8d3 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800471a:	e0b5      	b.n	8004888 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004728:	b29b      	uxth	r3, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a7 	beq.w	800488c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800473e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a2 	beq.w	800488c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
 800476c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e4      	bne.n	8004748 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	623b      	str	r3, [r7, #32]
   return(result);
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047a2:	633a      	str	r2, [r7, #48]	; 0x30
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0310 	bic.w	r3, r3, #16
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	617b      	str	r3, [r7, #20]
   return(result);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e4      	bne.n	80047c8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f85b 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800480a:	e03f      	b.n	800488c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_UART_IRQHandler+0x55a>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800482c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fc7a 	bl	8005128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004834:	e02d      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01c      	beq.n	8004890 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
    }
    return;
 800485e:	e017      	b.n	8004890 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <HAL_UART_IRQHandler+0x5b6>
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fc2b 	bl	80050d4 <UART_EndTransmit_IT>
    return;
 800487e:	e008      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004880:	bf00      	nop
 8004882:	e006      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004884:	bf00      	nop
 8004886:	e004      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004888:	bf00      	nop
 800488a:	e002      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
      return;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004890:	bf00      	nop
  }

}
 8004892:	37e8      	adds	r7, #232	; 0xe8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b92      	ldr	r3, [pc, #584]	; (8004b4c <UART_SetConfig+0x274>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	430b      	orrs	r3, r1
 800490e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a80      	ldr	r2, [pc, #512]	; (8004b50 <UART_SetConfig+0x278>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d120      	bne.n	8004996 <UART_SetConfig+0xbe>
 8004954:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <UART_SetConfig+0x27c>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b03      	cmp	r3, #3
 800495e:	d817      	bhi.n	8004990 <UART_SetConfig+0xb8>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x90>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	08004985 	.word	0x08004985
 8004970:	0800498b 	.word	0x0800498b
 8004974:	0800497f 	.word	0x0800497f
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e0b5      	b.n	8004aea <UART_SetConfig+0x212>
 800497e:	2302      	movs	r3, #2
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e0b2      	b.n	8004aea <UART_SetConfig+0x212>
 8004984:	2304      	movs	r3, #4
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e0af      	b.n	8004aea <UART_SetConfig+0x212>
 800498a:	2308      	movs	r3, #8
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e0ac      	b.n	8004aea <UART_SetConfig+0x212>
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e0a9      	b.n	8004aea <UART_SetConfig+0x212>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6f      	ldr	r2, [pc, #444]	; (8004b58 <UART_SetConfig+0x280>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d124      	bne.n	80049ea <UART_SetConfig+0x112>
 80049a0:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <UART_SetConfig+0x27c>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ac:	d011      	beq.n	80049d2 <UART_SetConfig+0xfa>
 80049ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049b2:	d817      	bhi.n	80049e4 <UART_SetConfig+0x10c>
 80049b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b8:	d011      	beq.n	80049de <UART_SetConfig+0x106>
 80049ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049be:	d811      	bhi.n	80049e4 <UART_SetConfig+0x10c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0xf4>
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d006      	beq.n	80049d8 <UART_SetConfig+0x100>
 80049ca:	e00b      	b.n	80049e4 <UART_SetConfig+0x10c>
 80049cc:	2300      	movs	r3, #0
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e08b      	b.n	8004aea <UART_SetConfig+0x212>
 80049d2:	2302      	movs	r3, #2
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e088      	b.n	8004aea <UART_SetConfig+0x212>
 80049d8:	2304      	movs	r3, #4
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e085      	b.n	8004aea <UART_SetConfig+0x212>
 80049de:	2308      	movs	r3, #8
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e082      	b.n	8004aea <UART_SetConfig+0x212>
 80049e4:	2310      	movs	r3, #16
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e07f      	b.n	8004aea <UART_SetConfig+0x212>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5b      	ldr	r2, [pc, #364]	; (8004b5c <UART_SetConfig+0x284>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d124      	bne.n	8004a3e <UART_SetConfig+0x166>
 80049f4:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <UART_SetConfig+0x27c>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80049fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a00:	d011      	beq.n	8004a26 <UART_SetConfig+0x14e>
 8004a02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a06:	d817      	bhi.n	8004a38 <UART_SetConfig+0x160>
 8004a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a0c:	d011      	beq.n	8004a32 <UART_SetConfig+0x15a>
 8004a0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a12:	d811      	bhi.n	8004a38 <UART_SetConfig+0x160>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <UART_SetConfig+0x148>
 8004a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x154>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x160>
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e061      	b.n	8004aea <UART_SetConfig+0x212>
 8004a26:	2302      	movs	r3, #2
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e05e      	b.n	8004aea <UART_SetConfig+0x212>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e05b      	b.n	8004aea <UART_SetConfig+0x212>
 8004a32:	2308      	movs	r3, #8
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e058      	b.n	8004aea <UART_SetConfig+0x212>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e055      	b.n	8004aea <UART_SetConfig+0x212>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <UART_SetConfig+0x288>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d124      	bne.n	8004a92 <UART_SetConfig+0x1ba>
 8004a48:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <UART_SetConfig+0x27c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a54:	d011      	beq.n	8004a7a <UART_SetConfig+0x1a2>
 8004a56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a5a:	d817      	bhi.n	8004a8c <UART_SetConfig+0x1b4>
 8004a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a60:	d011      	beq.n	8004a86 <UART_SetConfig+0x1ae>
 8004a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a66:	d811      	bhi.n	8004a8c <UART_SetConfig+0x1b4>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <UART_SetConfig+0x19c>
 8004a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a70:	d006      	beq.n	8004a80 <UART_SetConfig+0x1a8>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x1b4>
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e037      	b.n	8004aea <UART_SetConfig+0x212>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e034      	b.n	8004aea <UART_SetConfig+0x212>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e031      	b.n	8004aea <UART_SetConfig+0x212>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e02e      	b.n	8004aea <UART_SetConfig+0x212>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e02b      	b.n	8004aea <UART_SetConfig+0x212>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a33      	ldr	r2, [pc, #204]	; (8004b64 <UART_SetConfig+0x28c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d124      	bne.n	8004ae6 <UART_SetConfig+0x20e>
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <UART_SetConfig+0x27c>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aa8:	d011      	beq.n	8004ace <UART_SetConfig+0x1f6>
 8004aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aae:	d817      	bhi.n	8004ae0 <UART_SetConfig+0x208>
 8004ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ab4:	d011      	beq.n	8004ada <UART_SetConfig+0x202>
 8004ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aba:	d811      	bhi.n	8004ae0 <UART_SetConfig+0x208>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <UART_SetConfig+0x1f0>
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac4:	d006      	beq.n	8004ad4 <UART_SetConfig+0x1fc>
 8004ac6:	e00b      	b.n	8004ae0 <UART_SetConfig+0x208>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e00d      	b.n	8004aea <UART_SetConfig+0x212>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e00a      	b.n	8004aea <UART_SetConfig+0x212>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e007      	b.n	8004aea <UART_SetConfig+0x212>
 8004ada:	2308      	movs	r3, #8
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e004      	b.n	8004aea <UART_SetConfig+0x212>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e001      	b.n	8004aea <UART_SetConfig+0x212>
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af2:	d16c      	bne.n	8004bce <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d838      	bhi.n	8004b6c <UART_SetConfig+0x294>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x228>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b6d 	.word	0x08004b6d
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe fcbc 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004b28:	61b8      	str	r0, [r7, #24]
        break;
 8004b2a:	e024      	b.n	8004b76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe fcda 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004b30:	61b8      	str	r0, [r7, #24]
        break;
 8004b32:	e020      	b.n	8004b76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <UART_SetConfig+0x290>)
 8004b36:	61bb      	str	r3, [r7, #24]
        break;
 8004b38:	e01d      	b.n	8004b76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe fc3b 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8004b3e:	61b8      	str	r0, [r7, #24]
        break;
 8004b40:	e019      	b.n	8004b76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	61bb      	str	r3, [r7, #24]
        break;
 8004b48:	e015      	b.n	8004b76 <UART_SetConfig+0x29e>
 8004b4a:	bf00      	nop
 8004b4c:	efff69f3 	.word	0xefff69f3
 8004b50:	40013800 	.word	0x40013800
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40004400 	.word	0x40004400
 8004b5c:	40004800 	.word	0x40004800
 8004b60:	40004c00 	.word	0x40004c00
 8004b64:	40005000 	.word	0x40005000
 8004b68:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77bb      	strb	r3, [r7, #30]
        break;
 8004b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d075      	beq.n	8004c68 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	005a      	lsls	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d916      	bls.n	8004bc8 <UART_SetConfig+0x2f0>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d212      	bcs.n	8004bc8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f023 030f 	bic.w	r3, r3, #15
 8004baa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	89fa      	ldrh	r2, [r7, #14]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e04f      	b.n	8004c68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77bb      	strb	r3, [r7, #30]
 8004bcc:	e04c      	b.n	8004c68 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bce:	7ffb      	ldrb	r3, [r7, #31]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d828      	bhi.n	8004c26 <UART_SetConfig+0x34e>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x304>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c11 	.word	0x08004c11
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c17 	.word	0x08004c17
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c27 	.word	0x08004c27
 8004bf8:	08004c27 	.word	0x08004c27
 8004bfc:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe fc4e 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004c04:	61b8      	str	r0, [r7, #24]
        break;
 8004c06:	e013      	b.n	8004c30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe fc6c 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004c0c:	61b8      	str	r0, [r7, #24]
        break;
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <UART_SetConfig+0x3a8>)
 8004c12:	61bb      	str	r3, [r7, #24]
        break;
 8004c14:	e00c      	b.n	8004c30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe fbcd 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8004c1a:	61b8      	str	r0, [r7, #24]
        break;
 8004c1c:	e008      	b.n	8004c30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	61bb      	str	r3, [r7, #24]
        break;
 8004c24:	e004      	b.n	8004c30 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d018      	beq.n	8004c68 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085a      	lsrs	r2, r3, #1
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	441a      	add	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b0f      	cmp	r3, #15
 8004c50:	d908      	bls.n	8004c64 <UART_SetConfig+0x38c>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d204      	bcs.n	8004c64 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e001      	b.n	8004c68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	007a1200 	.word	0x007a1200

08004c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01a      	beq.n	8004d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d10a      	bne.n	8004d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd8:	f7fc fe08 	bl	80019ec <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d10e      	bne.n	8004e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f82d 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e023      	b.n	8004e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d10e      	bne.n	8004e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f817 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00d      	b.n	8004e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b09c      	sub	sp, #112	; 0x70
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6a:	e0a5      	b.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	f000 80a1 	beq.w	8004fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fc fdb9 	bl	80019ec <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d13e      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e067      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d04f      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d147      	bne.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
 8004f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e6      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f84:	623a      	str	r2, [r7, #32]
 8004f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e010      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69da      	ldr	r2, [r3, #28]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	f43f af4a 	beq.w	8004e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3770      	adds	r7, #112	; 0x70
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b095      	sub	sp, #84	; 0x54
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
 800500a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800500e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	61fb      	str	r3, [r7, #28]
   return(result);
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	2b01      	cmp	r3, #1
 8005056:	d118      	bne.n	800508a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800509c:	bf00      	nop
 800509e:	3754      	adds	r7, #84	; 0x54
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fbf0 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	613b      	str	r3, [r7, #16]
   return(result);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e6      	bne.n	80050dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fbbc 	bl	8004898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005120:	bf00      	nop
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <atoi>:
 800513c:	220a      	movs	r2, #10
 800513e:	2100      	movs	r1, #0
 8005140:	f000 b912 	b.w	8005368 <strtol>

08005144 <__errno>:
 8005144:	4b01      	ldr	r3, [pc, #4]	; (800514c <__errno+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	2000002c 	.word	0x2000002c

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4d0d      	ldr	r5, [pc, #52]	; (8005188 <__libc_init_array+0x38>)
 8005154:	4c0d      	ldr	r4, [pc, #52]	; (800518c <__libc_init_array+0x3c>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	2600      	movs	r6, #0
 800515c:	42a6      	cmp	r6, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	4d0b      	ldr	r5, [pc, #44]	; (8005190 <__libc_init_array+0x40>)
 8005162:	4c0c      	ldr	r4, [pc, #48]	; (8005194 <__libc_init_array+0x44>)
 8005164:	f001 fac0 	bl	80066e8 <_init>
 8005168:	1b64      	subs	r4, r4, r5
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	2600      	movs	r6, #0
 800516e:	42a6      	cmp	r6, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	f855 3b04 	ldr.w	r3, [r5], #4
 8005178:	4798      	blx	r3
 800517a:	3601      	adds	r6, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005182:	4798      	blx	r3
 8005184:	3601      	adds	r6, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	08006984 	.word	0x08006984
 800518c:	08006984 	.word	0x08006984
 8005190:	08006984 	.word	0x08006984
 8005194:	08006988 	.word	0x08006988

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <rand>:
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <rand+0x5c>)
 80051aa:	b510      	push	{r4, lr}
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b0:	b9b3      	cbnz	r3, 80051e0 <rand+0x38>
 80051b2:	2018      	movs	r0, #24
 80051b4:	f000 f912 	bl	80053dc <malloc>
 80051b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80051ba:	b928      	cbnz	r0, 80051c8 <rand+0x20>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <rand+0x60>)
 80051c0:	4812      	ldr	r0, [pc, #72]	; (800520c <rand+0x64>)
 80051c2:	214e      	movs	r1, #78	; 0x4e
 80051c4:	f000 f8da 	bl	800537c <__assert_func>
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <rand+0x68>)
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <rand+0x6c>)
 80051cc:	e9c0 2300 	strd	r2, r3, [r0]
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <rand+0x70>)
 80051d2:	6083      	str	r3, [r0, #8]
 80051d4:	230b      	movs	r3, #11
 80051d6:	8183      	strh	r3, [r0, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	2300      	movs	r3, #0
 80051dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80051e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <rand+0x74>)
 80051e4:	6920      	ldr	r0, [r4, #16]
 80051e6:	6963      	ldr	r3, [r4, #20]
 80051e8:	490d      	ldr	r1, [pc, #52]	; (8005220 <rand+0x78>)
 80051ea:	4342      	muls	r2, r0
 80051ec:	fb01 2203 	mla	r2, r1, r3, r2
 80051f0:	fba0 0101 	umull	r0, r1, r0, r1
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	eb42 0001 	adc.w	r0, r2, r1
 80051fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80051fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005202:	bd10      	pop	{r4, pc}
 8005204:	2000002c 	.word	0x2000002c
 8005208:	08006740 	.word	0x08006740
 800520c:	08006757 	.word	0x08006757
 8005210:	abcd330e 	.word	0xabcd330e
 8005214:	e66d1234 	.word	0xe66d1234
 8005218:	0005deec 	.word	0x0005deec
 800521c:	5851f42d 	.word	0x5851f42d
 8005220:	4c957f2d 	.word	0x4c957f2d

08005224 <siprintf>:
 8005224:	b40e      	push	{r1, r2, r3}
 8005226:	b500      	push	{lr}
 8005228:	b09c      	sub	sp, #112	; 0x70
 800522a:	ab1d      	add	r3, sp, #116	; 0x74
 800522c:	9002      	str	r0, [sp, #8]
 800522e:	9006      	str	r0, [sp, #24]
 8005230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005234:	4809      	ldr	r0, [pc, #36]	; (800525c <siprintf+0x38>)
 8005236:	9107      	str	r1, [sp, #28]
 8005238:	9104      	str	r1, [sp, #16]
 800523a:	4909      	ldr	r1, [pc, #36]	; (8005260 <siprintf+0x3c>)
 800523c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005240:	9105      	str	r1, [sp, #20]
 8005242:	6800      	ldr	r0, [r0, #0]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	a902      	add	r1, sp, #8
 8005248:	f000 fa0c 	bl	8005664 <_svfiprintf_r>
 800524c:	9b02      	ldr	r3, [sp, #8]
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	b01c      	add	sp, #112	; 0x70
 8005254:	f85d eb04 	ldr.w	lr, [sp], #4
 8005258:	b003      	add	sp, #12
 800525a:	4770      	bx	lr
 800525c:	2000002c 	.word	0x2000002c
 8005260:	ffff0208 	.word	0xffff0208

08005264 <_strtol_l.constprop.0>:
 8005264:	2b01      	cmp	r3, #1
 8005266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800526a:	d001      	beq.n	8005270 <_strtol_l.constprop.0+0xc>
 800526c:	2b24      	cmp	r3, #36	; 0x24
 800526e:	d906      	bls.n	800527e <_strtol_l.constprop.0+0x1a>
 8005270:	f7ff ff68 	bl	8005144 <__errno>
 8005274:	2316      	movs	r3, #22
 8005276:	6003      	str	r3, [r0, #0]
 8005278:	2000      	movs	r0, #0
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005364 <_strtol_l.constprop.0+0x100>
 8005282:	460d      	mov	r5, r1
 8005284:	462e      	mov	r6, r5
 8005286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800528a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800528e:	f017 0708 	ands.w	r7, r7, #8
 8005292:	d1f7      	bne.n	8005284 <_strtol_l.constprop.0+0x20>
 8005294:	2c2d      	cmp	r4, #45	; 0x2d
 8005296:	d132      	bne.n	80052fe <_strtol_l.constprop.0+0x9a>
 8005298:	782c      	ldrb	r4, [r5, #0]
 800529a:	2701      	movs	r7, #1
 800529c:	1cb5      	adds	r5, r6, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d05b      	beq.n	800535a <_strtol_l.constprop.0+0xf6>
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d109      	bne.n	80052ba <_strtol_l.constprop.0+0x56>
 80052a6:	2c30      	cmp	r4, #48	; 0x30
 80052a8:	d107      	bne.n	80052ba <_strtol_l.constprop.0+0x56>
 80052aa:	782c      	ldrb	r4, [r5, #0]
 80052ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052b0:	2c58      	cmp	r4, #88	; 0x58
 80052b2:	d14d      	bne.n	8005350 <_strtol_l.constprop.0+0xec>
 80052b4:	786c      	ldrb	r4, [r5, #1]
 80052b6:	2310      	movs	r3, #16
 80052b8:	3502      	adds	r5, #2
 80052ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80052be:	f108 38ff 	add.w	r8, r8, #4294967295
 80052c2:	f04f 0c00 	mov.w	ip, #0
 80052c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80052ca:	4666      	mov	r6, ip
 80052cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80052d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80052d4:	f1be 0f09 	cmp.w	lr, #9
 80052d8:	d816      	bhi.n	8005308 <_strtol_l.constprop.0+0xa4>
 80052da:	4674      	mov	r4, lr
 80052dc:	42a3      	cmp	r3, r4
 80052de:	dd24      	ble.n	800532a <_strtol_l.constprop.0+0xc6>
 80052e0:	f1bc 0f00 	cmp.w	ip, #0
 80052e4:	db1e      	blt.n	8005324 <_strtol_l.constprop.0+0xc0>
 80052e6:	45b1      	cmp	r9, r6
 80052e8:	d31c      	bcc.n	8005324 <_strtol_l.constprop.0+0xc0>
 80052ea:	d101      	bne.n	80052f0 <_strtol_l.constprop.0+0x8c>
 80052ec:	45a2      	cmp	sl, r4
 80052ee:	db19      	blt.n	8005324 <_strtol_l.constprop.0+0xc0>
 80052f0:	fb06 4603 	mla	r6, r6, r3, r4
 80052f4:	f04f 0c01 	mov.w	ip, #1
 80052f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052fc:	e7e8      	b.n	80052d0 <_strtol_l.constprop.0+0x6c>
 80052fe:	2c2b      	cmp	r4, #43	; 0x2b
 8005300:	bf04      	itt	eq
 8005302:	782c      	ldrbeq	r4, [r5, #0]
 8005304:	1cb5      	addeq	r5, r6, #2
 8005306:	e7ca      	b.n	800529e <_strtol_l.constprop.0+0x3a>
 8005308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800530c:	f1be 0f19 	cmp.w	lr, #25
 8005310:	d801      	bhi.n	8005316 <_strtol_l.constprop.0+0xb2>
 8005312:	3c37      	subs	r4, #55	; 0x37
 8005314:	e7e2      	b.n	80052dc <_strtol_l.constprop.0+0x78>
 8005316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800531a:	f1be 0f19 	cmp.w	lr, #25
 800531e:	d804      	bhi.n	800532a <_strtol_l.constprop.0+0xc6>
 8005320:	3c57      	subs	r4, #87	; 0x57
 8005322:	e7db      	b.n	80052dc <_strtol_l.constprop.0+0x78>
 8005324:	f04f 3cff 	mov.w	ip, #4294967295
 8005328:	e7e6      	b.n	80052f8 <_strtol_l.constprop.0+0x94>
 800532a:	f1bc 0f00 	cmp.w	ip, #0
 800532e:	da05      	bge.n	800533c <_strtol_l.constprop.0+0xd8>
 8005330:	2322      	movs	r3, #34	; 0x22
 8005332:	6003      	str	r3, [r0, #0]
 8005334:	4646      	mov	r6, r8
 8005336:	b942      	cbnz	r2, 800534a <_strtol_l.constprop.0+0xe6>
 8005338:	4630      	mov	r0, r6
 800533a:	e79e      	b.n	800527a <_strtol_l.constprop.0+0x16>
 800533c:	b107      	cbz	r7, 8005340 <_strtol_l.constprop.0+0xdc>
 800533e:	4276      	negs	r6, r6
 8005340:	2a00      	cmp	r2, #0
 8005342:	d0f9      	beq.n	8005338 <_strtol_l.constprop.0+0xd4>
 8005344:	f1bc 0f00 	cmp.w	ip, #0
 8005348:	d000      	beq.n	800534c <_strtol_l.constprop.0+0xe8>
 800534a:	1e69      	subs	r1, r5, #1
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	e7f3      	b.n	8005338 <_strtol_l.constprop.0+0xd4>
 8005350:	2430      	movs	r4, #48	; 0x30
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1b1      	bne.n	80052ba <_strtol_l.constprop.0+0x56>
 8005356:	2308      	movs	r3, #8
 8005358:	e7af      	b.n	80052ba <_strtol_l.constprop.0+0x56>
 800535a:	2c30      	cmp	r4, #48	; 0x30
 800535c:	d0a5      	beq.n	80052aa <_strtol_l.constprop.0+0x46>
 800535e:	230a      	movs	r3, #10
 8005360:	e7ab      	b.n	80052ba <_strtol_l.constprop.0+0x56>
 8005362:	bf00      	nop
 8005364:	080067ef 	.word	0x080067ef

08005368 <strtol>:
 8005368:	4613      	mov	r3, r2
 800536a:	460a      	mov	r2, r1
 800536c:	4601      	mov	r1, r0
 800536e:	4802      	ldr	r0, [pc, #8]	; (8005378 <strtol+0x10>)
 8005370:	6800      	ldr	r0, [r0, #0]
 8005372:	f7ff bf77 	b.w	8005264 <_strtol_l.constprop.0>
 8005376:	bf00      	nop
 8005378:	2000002c 	.word	0x2000002c

0800537c <__assert_func>:
 800537c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800537e:	4614      	mov	r4, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <__assert_func+0x2c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4605      	mov	r5, r0
 8005388:	68d8      	ldr	r0, [r3, #12]
 800538a:	b14c      	cbz	r4, 80053a0 <__assert_func+0x24>
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <__assert_func+0x30>)
 800538e:	9100      	str	r1, [sp, #0]
 8005390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <__assert_func+0x34>)
 8005396:	462b      	mov	r3, r5
 8005398:	f000 f80e 	bl	80053b8 <fiprintf>
 800539c:	f000 fe20 	bl	8005fe0 <abort>
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <__assert_func+0x38>)
 80053a2:	461c      	mov	r4, r3
 80053a4:	e7f3      	b.n	800538e <__assert_func+0x12>
 80053a6:	bf00      	nop
 80053a8:	2000002c 	.word	0x2000002c
 80053ac:	080067b2 	.word	0x080067b2
 80053b0:	080067bf 	.word	0x080067bf
 80053b4:	080067ed 	.word	0x080067ed

080053b8 <fiprintf>:
 80053b8:	b40e      	push	{r1, r2, r3}
 80053ba:	b503      	push	{r0, r1, lr}
 80053bc:	4601      	mov	r1, r0
 80053be:	ab03      	add	r3, sp, #12
 80053c0:	4805      	ldr	r0, [pc, #20]	; (80053d8 <fiprintf+0x20>)
 80053c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	f000 fa75 	bl	80058b8 <_vfiprintf_r>
 80053ce:	b002      	add	sp, #8
 80053d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d4:	b003      	add	sp, #12
 80053d6:	4770      	bx	lr
 80053d8:	2000002c 	.word	0x2000002c

080053dc <malloc>:
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <malloc+0xc>)
 80053de:	4601      	mov	r1, r0
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	f000 b86f 	b.w	80054c4 <_malloc_r>
 80053e6:	bf00      	nop
 80053e8:	2000002c 	.word	0x2000002c

080053ec <_free_r>:
 80053ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d044      	beq.n	800547c <_free_r+0x90>
 80053f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f6:	9001      	str	r0, [sp, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f1a1 0404 	sub.w	r4, r1, #4
 80053fe:	bfb8      	it	lt
 8005400:	18e4      	addlt	r4, r4, r3
 8005402:	f001 f83d 	bl	8006480 <__malloc_lock>
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <_free_r+0x94>)
 8005408:	9801      	ldr	r0, [sp, #4]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	b933      	cbnz	r3, 800541c <_free_r+0x30>
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6014      	str	r4, [r2, #0]
 8005412:	b003      	add	sp, #12
 8005414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005418:	f001 b838 	b.w	800648c <__malloc_unlock>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d908      	bls.n	8005432 <_free_r+0x46>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1961      	adds	r1, r4, r5
 8005424:	428b      	cmp	r3, r1
 8005426:	bf01      	itttt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	e7ed      	b.n	800540e <_free_r+0x22>
 8005432:	461a      	mov	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b10b      	cbz	r3, 800543c <_free_r+0x50>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d9fa      	bls.n	8005432 <_free_r+0x46>
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	1855      	adds	r5, r2, r1
 8005440:	42a5      	cmp	r5, r4
 8005442:	d10b      	bne.n	800545c <_free_r+0x70>
 8005444:	6824      	ldr	r4, [r4, #0]
 8005446:	4421      	add	r1, r4
 8005448:	1854      	adds	r4, r2, r1
 800544a:	42a3      	cmp	r3, r4
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	d1e0      	bne.n	8005412 <_free_r+0x26>
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	4421      	add	r1, r4
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	e7da      	b.n	8005412 <_free_r+0x26>
 800545c:	d902      	bls.n	8005464 <_free_r+0x78>
 800545e:	230c      	movs	r3, #12
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	e7d6      	b.n	8005412 <_free_r+0x26>
 8005464:	6825      	ldr	r5, [r4, #0]
 8005466:	1961      	adds	r1, r4, r5
 8005468:	428b      	cmp	r3, r1
 800546a:	bf04      	itt	eq
 800546c:	6819      	ldreq	r1, [r3, #0]
 800546e:	685b      	ldreq	r3, [r3, #4]
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	bf04      	itt	eq
 8005474:	1949      	addeq	r1, r1, r5
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	6054      	str	r4, [r2, #4]
 800547a:	e7ca      	b.n	8005412 <_free_r+0x26>
 800547c:	b003      	add	sp, #12
 800547e:	bd30      	pop	{r4, r5, pc}
 8005480:	20000264 	.word	0x20000264

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0e      	ldr	r6, [pc, #56]	; (80054c0 <sbrk_aligned+0x3c>)
 8005488:	460c      	mov	r4, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	4605      	mov	r5, r0
 800548e:	b911      	cbnz	r1, 8005496 <sbrk_aligned+0x12>
 8005490:	f000 fcd6 	bl	8005e40 <_sbrk_r>
 8005494:	6030      	str	r0, [r6, #0]
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fcd1 	bl	8005e40 <_sbrk_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d00a      	beq.n	80054b8 <sbrk_aligned+0x34>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d007      	beq.n	80054bc <sbrk_aligned+0x38>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fcc6 	bl	8005e40 <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d101      	bne.n	80054bc <sbrk_aligned+0x38>
 80054b8:	f04f 34ff 	mov.w	r4, #4294967295
 80054bc:	4620      	mov	r0, r4
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	20000268 	.word	0x20000268

080054c4 <_malloc_r>:
 80054c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	1ccd      	adds	r5, r1, #3
 80054ca:	f025 0503 	bic.w	r5, r5, #3
 80054ce:	3508      	adds	r5, #8
 80054d0:	2d0c      	cmp	r5, #12
 80054d2:	bf38      	it	cc
 80054d4:	250c      	movcc	r5, #12
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	4607      	mov	r7, r0
 80054da:	db01      	blt.n	80054e0 <_malloc_r+0x1c>
 80054dc:	42a9      	cmp	r1, r5
 80054de:	d905      	bls.n	80054ec <_malloc_r+0x28>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	2600      	movs	r6, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ec:	4e2e      	ldr	r6, [pc, #184]	; (80055a8 <_malloc_r+0xe4>)
 80054ee:	f000 ffc7 	bl	8006480 <__malloc_lock>
 80054f2:	6833      	ldr	r3, [r6, #0]
 80054f4:	461c      	mov	r4, r3
 80054f6:	bb34      	cbnz	r4, 8005546 <_malloc_r+0x82>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4638      	mov	r0, r7
 80054fc:	f7ff ffc2 	bl	8005484 <sbrk_aligned>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	4604      	mov	r4, r0
 8005504:	d14d      	bne.n	80055a2 <_malloc_r+0xde>
 8005506:	6834      	ldr	r4, [r6, #0]
 8005508:	4626      	mov	r6, r4
 800550a:	2e00      	cmp	r6, #0
 800550c:	d140      	bne.n	8005590 <_malloc_r+0xcc>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	4631      	mov	r1, r6
 8005512:	4638      	mov	r0, r7
 8005514:	eb04 0803 	add.w	r8, r4, r3
 8005518:	f000 fc92 	bl	8005e40 <_sbrk_r>
 800551c:	4580      	cmp	r8, r0
 800551e:	d13a      	bne.n	8005596 <_malloc_r+0xd2>
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	3503      	adds	r5, #3
 8005524:	1a6d      	subs	r5, r5, r1
 8005526:	f025 0503 	bic.w	r5, r5, #3
 800552a:	3508      	adds	r5, #8
 800552c:	2d0c      	cmp	r5, #12
 800552e:	bf38      	it	cc
 8005530:	250c      	movcc	r5, #12
 8005532:	4629      	mov	r1, r5
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ffa5 	bl	8005484 <sbrk_aligned>
 800553a:	3001      	adds	r0, #1
 800553c:	d02b      	beq.n	8005596 <_malloc_r+0xd2>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	442b      	add	r3, r5
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	e00e      	b.n	8005564 <_malloc_r+0xa0>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	1b52      	subs	r2, r2, r5
 800554a:	d41e      	bmi.n	800558a <_malloc_r+0xc6>
 800554c:	2a0b      	cmp	r2, #11
 800554e:	d916      	bls.n	800557e <_malloc_r+0xba>
 8005550:	1961      	adds	r1, r4, r5
 8005552:	42a3      	cmp	r3, r4
 8005554:	6025      	str	r5, [r4, #0]
 8005556:	bf18      	it	ne
 8005558:	6059      	strne	r1, [r3, #4]
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	bf08      	it	eq
 800555e:	6031      	streq	r1, [r6, #0]
 8005560:	5162      	str	r2, [r4, r5]
 8005562:	604b      	str	r3, [r1, #4]
 8005564:	4638      	mov	r0, r7
 8005566:	f104 060b 	add.w	r6, r4, #11
 800556a:	f000 ff8f 	bl	800648c <__malloc_unlock>
 800556e:	f026 0607 	bic.w	r6, r6, #7
 8005572:	1d23      	adds	r3, r4, #4
 8005574:	1af2      	subs	r2, r6, r3
 8005576:	d0b6      	beq.n	80054e6 <_malloc_r+0x22>
 8005578:	1b9b      	subs	r3, r3, r6
 800557a:	50a3      	str	r3, [r4, r2]
 800557c:	e7b3      	b.n	80054e6 <_malloc_r+0x22>
 800557e:	6862      	ldr	r2, [r4, #4]
 8005580:	42a3      	cmp	r3, r4
 8005582:	bf0c      	ite	eq
 8005584:	6032      	streq	r2, [r6, #0]
 8005586:	605a      	strne	r2, [r3, #4]
 8005588:	e7ec      	b.n	8005564 <_malloc_r+0xa0>
 800558a:	4623      	mov	r3, r4
 800558c:	6864      	ldr	r4, [r4, #4]
 800558e:	e7b2      	b.n	80054f6 <_malloc_r+0x32>
 8005590:	4634      	mov	r4, r6
 8005592:	6876      	ldr	r6, [r6, #4]
 8005594:	e7b9      	b.n	800550a <_malloc_r+0x46>
 8005596:	230c      	movs	r3, #12
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4638      	mov	r0, r7
 800559c:	f000 ff76 	bl	800648c <__malloc_unlock>
 80055a0:	e7a1      	b.n	80054e6 <_malloc_r+0x22>
 80055a2:	6025      	str	r5, [r4, #0]
 80055a4:	e7de      	b.n	8005564 <_malloc_r+0xa0>
 80055a6:	bf00      	nop
 80055a8:	20000264 	.word	0x20000264

080055ac <__ssputs_r>:
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	688e      	ldr	r6, [r1, #8]
 80055b2:	429e      	cmp	r6, r3
 80055b4:	4682      	mov	sl, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	4690      	mov	r8, r2
 80055ba:	461f      	mov	r7, r3
 80055bc:	d838      	bhi.n	8005630 <__ssputs_r+0x84>
 80055be:	898a      	ldrh	r2, [r1, #12]
 80055c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055c4:	d032      	beq.n	800562c <__ssputs_r+0x80>
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	6909      	ldr	r1, [r1, #16]
 80055ca:	eba5 0901 	sub.w	r9, r5, r1
 80055ce:	6965      	ldr	r5, [r4, #20]
 80055d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055d8:	3301      	adds	r3, #1
 80055da:	444b      	add	r3, r9
 80055dc:	106d      	asrs	r5, r5, #1
 80055de:	429d      	cmp	r5, r3
 80055e0:	bf38      	it	cc
 80055e2:	461d      	movcc	r5, r3
 80055e4:	0553      	lsls	r3, r2, #21
 80055e6:	d531      	bpl.n	800564c <__ssputs_r+0xa0>
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7ff ff6b 	bl	80054c4 <_malloc_r>
 80055ee:	4606      	mov	r6, r0
 80055f0:	b950      	cbnz	r0, 8005608 <__ssputs_r+0x5c>
 80055f2:	230c      	movs	r3, #12
 80055f4:	f8ca 3000 	str.w	r3, [sl]
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005608:	6921      	ldr	r1, [r4, #16]
 800560a:	464a      	mov	r2, r9
 800560c:	f000 ff10 	bl	8006430 <memcpy>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	6126      	str	r6, [r4, #16]
 800561e:	6165      	str	r5, [r4, #20]
 8005620:	444e      	add	r6, r9
 8005622:	eba5 0509 	sub.w	r5, r5, r9
 8005626:	6026      	str	r6, [r4, #0]
 8005628:	60a5      	str	r5, [r4, #8]
 800562a:	463e      	mov	r6, r7
 800562c:	42be      	cmp	r6, r7
 800562e:	d900      	bls.n	8005632 <__ssputs_r+0x86>
 8005630:	463e      	mov	r6, r7
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	4632      	mov	r2, r6
 8005636:	4641      	mov	r1, r8
 8005638:	f000 ff08 	bl	800644c <memmove>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	1b9b      	subs	r3, r3, r6
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	4433      	add	r3, r6
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	2000      	movs	r0, #0
 800564a:	e7db      	b.n	8005604 <__ssputs_r+0x58>
 800564c:	462a      	mov	r2, r5
 800564e:	f000 ff23 	bl	8006498 <_realloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	2800      	cmp	r0, #0
 8005656:	d1e1      	bne.n	800561c <__ssputs_r+0x70>
 8005658:	6921      	ldr	r1, [r4, #16]
 800565a:	4650      	mov	r0, sl
 800565c:	f7ff fec6 	bl	80053ec <_free_r>
 8005660:	e7c7      	b.n	80055f2 <__ssputs_r+0x46>
	...

08005664 <_svfiprintf_r>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	4698      	mov	r8, r3
 800566a:	898b      	ldrh	r3, [r1, #12]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	b09d      	sub	sp, #116	; 0x74
 8005670:	4607      	mov	r7, r0
 8005672:	460d      	mov	r5, r1
 8005674:	4614      	mov	r4, r2
 8005676:	d50e      	bpl.n	8005696 <_svfiprintf_r+0x32>
 8005678:	690b      	ldr	r3, [r1, #16]
 800567a:	b963      	cbnz	r3, 8005696 <_svfiprintf_r+0x32>
 800567c:	2140      	movs	r1, #64	; 0x40
 800567e:	f7ff ff21 	bl	80054c4 <_malloc_r>
 8005682:	6028      	str	r0, [r5, #0]
 8005684:	6128      	str	r0, [r5, #16]
 8005686:	b920      	cbnz	r0, 8005692 <_svfiprintf_r+0x2e>
 8005688:	230c      	movs	r3, #12
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e0d1      	b.n	8005836 <_svfiprintf_r+0x1d2>
 8005692:	2340      	movs	r3, #64	; 0x40
 8005694:	616b      	str	r3, [r5, #20]
 8005696:	2300      	movs	r3, #0
 8005698:	9309      	str	r3, [sp, #36]	; 0x24
 800569a:	2320      	movs	r3, #32
 800569c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a4:	2330      	movs	r3, #48	; 0x30
 80056a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005850 <_svfiprintf_r+0x1ec>
 80056aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056ae:	f04f 0901 	mov.w	r9, #1
 80056b2:	4623      	mov	r3, r4
 80056b4:	469a      	mov	sl, r3
 80056b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ba:	b10a      	cbz	r2, 80056c0 <_svfiprintf_r+0x5c>
 80056bc:	2a25      	cmp	r2, #37	; 0x25
 80056be:	d1f9      	bne.n	80056b4 <_svfiprintf_r+0x50>
 80056c0:	ebba 0b04 	subs.w	fp, sl, r4
 80056c4:	d00b      	beq.n	80056de <_svfiprintf_r+0x7a>
 80056c6:	465b      	mov	r3, fp
 80056c8:	4622      	mov	r2, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	4638      	mov	r0, r7
 80056ce:	f7ff ff6d 	bl	80055ac <__ssputs_r>
 80056d2:	3001      	adds	r0, #1
 80056d4:	f000 80aa 	beq.w	800582c <_svfiprintf_r+0x1c8>
 80056d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056da:	445a      	add	r2, fp
 80056dc:	9209      	str	r2, [sp, #36]	; 0x24
 80056de:	f89a 3000 	ldrb.w	r3, [sl]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80a2 	beq.w	800582c <_svfiprintf_r+0x1c8>
 80056e8:	2300      	movs	r3, #0
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f2:	f10a 0a01 	add.w	sl, sl, #1
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	9307      	str	r3, [sp, #28]
 80056fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005700:	4654      	mov	r4, sl
 8005702:	2205      	movs	r2, #5
 8005704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005708:	4851      	ldr	r0, [pc, #324]	; (8005850 <_svfiprintf_r+0x1ec>)
 800570a:	f7fa fd71 	bl	80001f0 <memchr>
 800570e:	9a04      	ldr	r2, [sp, #16]
 8005710:	b9d8      	cbnz	r0, 800574a <_svfiprintf_r+0xe6>
 8005712:	06d0      	lsls	r0, r2, #27
 8005714:	bf44      	itt	mi
 8005716:	2320      	movmi	r3, #32
 8005718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571c:	0711      	lsls	r1, r2, #28
 800571e:	bf44      	itt	mi
 8005720:	232b      	movmi	r3, #43	; 0x2b
 8005722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005726:	f89a 3000 	ldrb.w	r3, [sl]
 800572a:	2b2a      	cmp	r3, #42	; 0x2a
 800572c:	d015      	beq.n	800575a <_svfiprintf_r+0xf6>
 800572e:	9a07      	ldr	r2, [sp, #28]
 8005730:	4654      	mov	r4, sl
 8005732:	2000      	movs	r0, #0
 8005734:	f04f 0c0a 	mov.w	ip, #10
 8005738:	4621      	mov	r1, r4
 800573a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800573e:	3b30      	subs	r3, #48	; 0x30
 8005740:	2b09      	cmp	r3, #9
 8005742:	d94e      	bls.n	80057e2 <_svfiprintf_r+0x17e>
 8005744:	b1b0      	cbz	r0, 8005774 <_svfiprintf_r+0x110>
 8005746:	9207      	str	r2, [sp, #28]
 8005748:	e014      	b.n	8005774 <_svfiprintf_r+0x110>
 800574a:	eba0 0308 	sub.w	r3, r0, r8
 800574e:	fa09 f303 	lsl.w	r3, r9, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	9304      	str	r3, [sp, #16]
 8005756:	46a2      	mov	sl, r4
 8005758:	e7d2      	b.n	8005700 <_svfiprintf_r+0x9c>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	1d19      	adds	r1, r3, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	9103      	str	r1, [sp, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfbb      	ittet	lt
 8005766:	425b      	neglt	r3, r3
 8005768:	f042 0202 	orrlt.w	r2, r2, #2
 800576c:	9307      	strge	r3, [sp, #28]
 800576e:	9307      	strlt	r3, [sp, #28]
 8005770:	bfb8      	it	lt
 8005772:	9204      	strlt	r2, [sp, #16]
 8005774:	7823      	ldrb	r3, [r4, #0]
 8005776:	2b2e      	cmp	r3, #46	; 0x2e
 8005778:	d10c      	bne.n	8005794 <_svfiprintf_r+0x130>
 800577a:	7863      	ldrb	r3, [r4, #1]
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d135      	bne.n	80057ec <_svfiprintf_r+0x188>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9203      	str	r2, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfb8      	it	lt
 800578c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005790:	3402      	adds	r4, #2
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005860 <_svfiprintf_r+0x1fc>
 8005798:	7821      	ldrb	r1, [r4, #0]
 800579a:	2203      	movs	r2, #3
 800579c:	4650      	mov	r0, sl
 800579e:	f7fa fd27 	bl	80001f0 <memchr>
 80057a2:	b140      	cbz	r0, 80057b6 <_svfiprintf_r+0x152>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	eba0 000a 	sub.w	r0, r0, sl
 80057aa:	fa03 f000 	lsl.w	r0, r3, r0
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	4303      	orrs	r3, r0
 80057b2:	3401      	adds	r4, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ba:	4826      	ldr	r0, [pc, #152]	; (8005854 <_svfiprintf_r+0x1f0>)
 80057bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c0:	2206      	movs	r2, #6
 80057c2:	f7fa fd15 	bl	80001f0 <memchr>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d038      	beq.n	800583c <_svfiprintf_r+0x1d8>
 80057ca:	4b23      	ldr	r3, [pc, #140]	; (8005858 <_svfiprintf_r+0x1f4>)
 80057cc:	bb1b      	cbnz	r3, 8005816 <_svfiprintf_r+0x1b2>
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	3308      	adds	r3, #8
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	4433      	add	r3, r6
 80057de:	9309      	str	r3, [sp, #36]	; 0x24
 80057e0:	e767      	b.n	80056b2 <_svfiprintf_r+0x4e>
 80057e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e6:	460c      	mov	r4, r1
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7a5      	b.n	8005738 <_svfiprintf_r+0xd4>
 80057ec:	2300      	movs	r3, #0
 80057ee:	3401      	adds	r4, #1
 80057f0:	9305      	str	r3, [sp, #20]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	4620      	mov	r0, r4
 80057fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057fe:	3a30      	subs	r2, #48	; 0x30
 8005800:	2a09      	cmp	r2, #9
 8005802:	d903      	bls.n	800580c <_svfiprintf_r+0x1a8>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0c5      	beq.n	8005794 <_svfiprintf_r+0x130>
 8005808:	9105      	str	r1, [sp, #20]
 800580a:	e7c3      	b.n	8005794 <_svfiprintf_r+0x130>
 800580c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005810:	4604      	mov	r4, r0
 8005812:	2301      	movs	r3, #1
 8005814:	e7f0      	b.n	80057f8 <_svfiprintf_r+0x194>
 8005816:	ab03      	add	r3, sp, #12
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462a      	mov	r2, r5
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <_svfiprintf_r+0x1f8>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	4638      	mov	r0, r7
 8005822:	f3af 8000 	nop.w
 8005826:	1c42      	adds	r2, r0, #1
 8005828:	4606      	mov	r6, r0
 800582a:	d1d6      	bne.n	80057da <_svfiprintf_r+0x176>
 800582c:	89ab      	ldrh	r3, [r5, #12]
 800582e:	065b      	lsls	r3, r3, #25
 8005830:	f53f af2c 	bmi.w	800568c <_svfiprintf_r+0x28>
 8005834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005836:	b01d      	add	sp, #116	; 0x74
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	462a      	mov	r2, r5
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <_svfiprintf_r+0x1f8>)
 8005844:	a904      	add	r1, sp, #16
 8005846:	4638      	mov	r0, r7
 8005848:	f000 f9d4 	bl	8005bf4 <_printf_i>
 800584c:	e7eb      	b.n	8005826 <_svfiprintf_r+0x1c2>
 800584e:	bf00      	nop
 8005850:	080068ef 	.word	0x080068ef
 8005854:	080068f9 	.word	0x080068f9
 8005858:	00000000 	.word	0x00000000
 800585c:	080055ad 	.word	0x080055ad
 8005860:	080068f5 	.word	0x080068f5

08005864 <__sfputc_r>:
 8005864:	6893      	ldr	r3, [r2, #8]
 8005866:	3b01      	subs	r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	b410      	push	{r4}
 800586c:	6093      	str	r3, [r2, #8]
 800586e:	da08      	bge.n	8005882 <__sfputc_r+0x1e>
 8005870:	6994      	ldr	r4, [r2, #24]
 8005872:	42a3      	cmp	r3, r4
 8005874:	db01      	blt.n	800587a <__sfputc_r+0x16>
 8005876:	290a      	cmp	r1, #10
 8005878:	d103      	bne.n	8005882 <__sfputc_r+0x1e>
 800587a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800587e:	f000 baef 	b.w	8005e60 <__swbuf_r>
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	1c58      	adds	r0, r3, #1
 8005886:	6010      	str	r0, [r2, #0]
 8005888:	7019      	strb	r1, [r3, #0]
 800588a:	4608      	mov	r0, r1
 800588c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005890:	4770      	bx	lr

08005892 <__sfputs_r>:
 8005892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005894:	4606      	mov	r6, r0
 8005896:	460f      	mov	r7, r1
 8005898:	4614      	mov	r4, r2
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	42ac      	cmp	r4, r5
 800589e:	d101      	bne.n	80058a4 <__sfputs_r+0x12>
 80058a0:	2000      	movs	r0, #0
 80058a2:	e007      	b.n	80058b4 <__sfputs_r+0x22>
 80058a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a8:	463a      	mov	r2, r7
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ffda 	bl	8005864 <__sfputc_r>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d1f3      	bne.n	800589c <__sfputs_r+0xa>
 80058b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058b8 <_vfiprintf_r>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	460d      	mov	r5, r1
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4614      	mov	r4, r2
 80058c2:	4698      	mov	r8, r3
 80058c4:	4606      	mov	r6, r0
 80058c6:	b118      	cbz	r0, 80058d0 <_vfiprintf_r+0x18>
 80058c8:	6983      	ldr	r3, [r0, #24]
 80058ca:	b90b      	cbnz	r3, 80058d0 <_vfiprintf_r+0x18>
 80058cc:	f000 fcaa 	bl	8006224 <__sinit>
 80058d0:	4b89      	ldr	r3, [pc, #548]	; (8005af8 <_vfiprintf_r+0x240>)
 80058d2:	429d      	cmp	r5, r3
 80058d4:	d11b      	bne.n	800590e <_vfiprintf_r+0x56>
 80058d6:	6875      	ldr	r5, [r6, #4]
 80058d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058da:	07d9      	lsls	r1, r3, #31
 80058dc:	d405      	bmi.n	80058ea <_vfiprintf_r+0x32>
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	059a      	lsls	r2, r3, #22
 80058e2:	d402      	bmi.n	80058ea <_vfiprintf_r+0x32>
 80058e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e6:	f000 fd3b 	bl	8006360 <__retarget_lock_acquire_recursive>
 80058ea:	89ab      	ldrh	r3, [r5, #12]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	d501      	bpl.n	80058f4 <_vfiprintf_r+0x3c>
 80058f0:	692b      	ldr	r3, [r5, #16]
 80058f2:	b9eb      	cbnz	r3, 8005930 <_vfiprintf_r+0x78>
 80058f4:	4629      	mov	r1, r5
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 fb04 	bl	8005f04 <__swsetup_r>
 80058fc:	b1c0      	cbz	r0, 8005930 <_vfiprintf_r+0x78>
 80058fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005900:	07dc      	lsls	r4, r3, #31
 8005902:	d50e      	bpl.n	8005922 <_vfiprintf_r+0x6a>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	b01d      	add	sp, #116	; 0x74
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	4b7b      	ldr	r3, [pc, #492]	; (8005afc <_vfiprintf_r+0x244>)
 8005910:	429d      	cmp	r5, r3
 8005912:	d101      	bne.n	8005918 <_vfiprintf_r+0x60>
 8005914:	68b5      	ldr	r5, [r6, #8]
 8005916:	e7df      	b.n	80058d8 <_vfiprintf_r+0x20>
 8005918:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <_vfiprintf_r+0x248>)
 800591a:	429d      	cmp	r5, r3
 800591c:	bf08      	it	eq
 800591e:	68f5      	ldreq	r5, [r6, #12]
 8005920:	e7da      	b.n	80058d8 <_vfiprintf_r+0x20>
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	0598      	lsls	r0, r3, #22
 8005926:	d4ed      	bmi.n	8005904 <_vfiprintf_r+0x4c>
 8005928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800592a:	f000 fd1a 	bl	8006362 <__retarget_lock_release_recursive>
 800592e:	e7e9      	b.n	8005904 <_vfiprintf_r+0x4c>
 8005930:	2300      	movs	r3, #0
 8005932:	9309      	str	r3, [sp, #36]	; 0x24
 8005934:	2320      	movs	r3, #32
 8005936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800593a:	f8cd 800c 	str.w	r8, [sp, #12]
 800593e:	2330      	movs	r3, #48	; 0x30
 8005940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b04 <_vfiprintf_r+0x24c>
 8005944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005948:	f04f 0901 	mov.w	r9, #1
 800594c:	4623      	mov	r3, r4
 800594e:	469a      	mov	sl, r3
 8005950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005954:	b10a      	cbz	r2, 800595a <_vfiprintf_r+0xa2>
 8005956:	2a25      	cmp	r2, #37	; 0x25
 8005958:	d1f9      	bne.n	800594e <_vfiprintf_r+0x96>
 800595a:	ebba 0b04 	subs.w	fp, sl, r4
 800595e:	d00b      	beq.n	8005978 <_vfiprintf_r+0xc0>
 8005960:	465b      	mov	r3, fp
 8005962:	4622      	mov	r2, r4
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff ff93 	bl	8005892 <__sfputs_r>
 800596c:	3001      	adds	r0, #1
 800596e:	f000 80aa 	beq.w	8005ac6 <_vfiprintf_r+0x20e>
 8005972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005974:	445a      	add	r2, fp
 8005976:	9209      	str	r2, [sp, #36]	; 0x24
 8005978:	f89a 3000 	ldrb.w	r3, [sl]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a2 	beq.w	8005ac6 <_vfiprintf_r+0x20e>
 8005982:	2300      	movs	r3, #0
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800598c:	f10a 0a01 	add.w	sl, sl, #1
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	9307      	str	r3, [sp, #28]
 8005994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005998:	931a      	str	r3, [sp, #104]	; 0x68
 800599a:	4654      	mov	r4, sl
 800599c:	2205      	movs	r2, #5
 800599e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a2:	4858      	ldr	r0, [pc, #352]	; (8005b04 <_vfiprintf_r+0x24c>)
 80059a4:	f7fa fc24 	bl	80001f0 <memchr>
 80059a8:	9a04      	ldr	r2, [sp, #16]
 80059aa:	b9d8      	cbnz	r0, 80059e4 <_vfiprintf_r+0x12c>
 80059ac:	06d1      	lsls	r1, r2, #27
 80059ae:	bf44      	itt	mi
 80059b0:	2320      	movmi	r3, #32
 80059b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b6:	0713      	lsls	r3, r2, #28
 80059b8:	bf44      	itt	mi
 80059ba:	232b      	movmi	r3, #43	; 0x2b
 80059bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c0:	f89a 3000 	ldrb.w	r3, [sl]
 80059c4:	2b2a      	cmp	r3, #42	; 0x2a
 80059c6:	d015      	beq.n	80059f4 <_vfiprintf_r+0x13c>
 80059c8:	9a07      	ldr	r2, [sp, #28]
 80059ca:	4654      	mov	r4, sl
 80059cc:	2000      	movs	r0, #0
 80059ce:	f04f 0c0a 	mov.w	ip, #10
 80059d2:	4621      	mov	r1, r4
 80059d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059d8:	3b30      	subs	r3, #48	; 0x30
 80059da:	2b09      	cmp	r3, #9
 80059dc:	d94e      	bls.n	8005a7c <_vfiprintf_r+0x1c4>
 80059de:	b1b0      	cbz	r0, 8005a0e <_vfiprintf_r+0x156>
 80059e0:	9207      	str	r2, [sp, #28]
 80059e2:	e014      	b.n	8005a0e <_vfiprintf_r+0x156>
 80059e4:	eba0 0308 	sub.w	r3, r0, r8
 80059e8:	fa09 f303 	lsl.w	r3, r9, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	46a2      	mov	sl, r4
 80059f2:	e7d2      	b.n	800599a <_vfiprintf_r+0xe2>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	1d19      	adds	r1, r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	9103      	str	r1, [sp, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bfbb      	ittet	lt
 8005a00:	425b      	neglt	r3, r3
 8005a02:	f042 0202 	orrlt.w	r2, r2, #2
 8005a06:	9307      	strge	r3, [sp, #28]
 8005a08:	9307      	strlt	r3, [sp, #28]
 8005a0a:	bfb8      	it	lt
 8005a0c:	9204      	strlt	r2, [sp, #16]
 8005a0e:	7823      	ldrb	r3, [r4, #0]
 8005a10:	2b2e      	cmp	r3, #46	; 0x2e
 8005a12:	d10c      	bne.n	8005a2e <_vfiprintf_r+0x176>
 8005a14:	7863      	ldrb	r3, [r4, #1]
 8005a16:	2b2a      	cmp	r3, #42	; 0x2a
 8005a18:	d135      	bne.n	8005a86 <_vfiprintf_r+0x1ce>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	9203      	str	r2, [sp, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bfb8      	it	lt
 8005a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a2a:	3402      	adds	r4, #2
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b14 <_vfiprintf_r+0x25c>
 8005a32:	7821      	ldrb	r1, [r4, #0]
 8005a34:	2203      	movs	r2, #3
 8005a36:	4650      	mov	r0, sl
 8005a38:	f7fa fbda 	bl	80001f0 <memchr>
 8005a3c:	b140      	cbz	r0, 8005a50 <_vfiprintf_r+0x198>
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	eba0 000a 	sub.w	r0, r0, sl
 8005a44:	fa03 f000 	lsl.w	r0, r3, r0
 8005a48:	9b04      	ldr	r3, [sp, #16]
 8005a4a:	4303      	orrs	r3, r0
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a54:	482c      	ldr	r0, [pc, #176]	; (8005b08 <_vfiprintf_r+0x250>)
 8005a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a5a:	2206      	movs	r2, #6
 8005a5c:	f7fa fbc8 	bl	80001f0 <memchr>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d03f      	beq.n	8005ae4 <_vfiprintf_r+0x22c>
 8005a64:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <_vfiprintf_r+0x254>)
 8005a66:	bb1b      	cbnz	r3, 8005ab0 <_vfiprintf_r+0x1f8>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	9303      	str	r3, [sp, #12]
 8005a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a76:	443b      	add	r3, r7
 8005a78:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7a:	e767      	b.n	800594c <_vfiprintf_r+0x94>
 8005a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a80:	460c      	mov	r4, r1
 8005a82:	2001      	movs	r0, #1
 8005a84:	e7a5      	b.n	80059d2 <_vfiprintf_r+0x11a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	3401      	adds	r4, #1
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f04f 0c0a 	mov.w	ip, #10
 8005a92:	4620      	mov	r0, r4
 8005a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a98:	3a30      	subs	r2, #48	; 0x30
 8005a9a:	2a09      	cmp	r2, #9
 8005a9c:	d903      	bls.n	8005aa6 <_vfiprintf_r+0x1ee>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0c5      	beq.n	8005a2e <_vfiprintf_r+0x176>
 8005aa2:	9105      	str	r1, [sp, #20]
 8005aa4:	e7c3      	b.n	8005a2e <_vfiprintf_r+0x176>
 8005aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aaa:	4604      	mov	r4, r0
 8005aac:	2301      	movs	r3, #1
 8005aae:	e7f0      	b.n	8005a92 <_vfiprintf_r+0x1da>
 8005ab0:	ab03      	add	r3, sp, #12
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <_vfiprintf_r+0x258>)
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	4630      	mov	r0, r6
 8005abc:	f3af 8000 	nop.w
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	1c78      	adds	r0, r7, #1
 8005ac4:	d1d6      	bne.n	8005a74 <_vfiprintf_r+0x1bc>
 8005ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac8:	07d9      	lsls	r1, r3, #31
 8005aca:	d405      	bmi.n	8005ad8 <_vfiprintf_r+0x220>
 8005acc:	89ab      	ldrh	r3, [r5, #12]
 8005ace:	059a      	lsls	r2, r3, #22
 8005ad0:	d402      	bmi.n	8005ad8 <_vfiprintf_r+0x220>
 8005ad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad4:	f000 fc45 	bl	8006362 <__retarget_lock_release_recursive>
 8005ad8:	89ab      	ldrh	r3, [r5, #12]
 8005ada:	065b      	lsls	r3, r3, #25
 8005adc:	f53f af12 	bmi.w	8005904 <_vfiprintf_r+0x4c>
 8005ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae2:	e711      	b.n	8005908 <_vfiprintf_r+0x50>
 8005ae4:	ab03      	add	r3, sp, #12
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	462a      	mov	r2, r5
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <_vfiprintf_r+0x258>)
 8005aec:	a904      	add	r1, sp, #16
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 f880 	bl	8005bf4 <_printf_i>
 8005af4:	e7e4      	b.n	8005ac0 <_vfiprintf_r+0x208>
 8005af6:	bf00      	nop
 8005af8:	08006944 	.word	0x08006944
 8005afc:	08006964 	.word	0x08006964
 8005b00:	08006924 	.word	0x08006924
 8005b04:	080068ef 	.word	0x080068ef
 8005b08:	080068f9 	.word	0x080068f9
 8005b0c:	00000000 	.word	0x00000000
 8005b10:	08005893 	.word	0x08005893
 8005b14:	080068f5 	.word	0x080068f5

08005b18 <_printf_common>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	688a      	ldr	r2, [r1, #8]
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bfb8      	it	lt
 8005b2c:	4613      	movlt	r3, r2
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b10a      	cbz	r2, 8005b3e <_printf_common+0x26>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	0699      	lsls	r1, r3, #26
 8005b42:	bf42      	ittt	mi
 8005b44:	6833      	ldrmi	r3, [r6, #0]
 8005b46:	3302      	addmi	r3, #2
 8005b48:	6033      	strmi	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	f015 0506 	ands.w	r5, r5, #6
 8005b50:	d106      	bne.n	8005b60 <_printf_common+0x48>
 8005b52:	f104 0a19 	add.w	sl, r4, #25
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	6832      	ldr	r2, [r6, #0]
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dc26      	bgt.n	8005bae <_printf_common+0x96>
 8005b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b64:	1e13      	subs	r3, r2, #0
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	0692      	lsls	r2, r2, #26
 8005b6e:	d42b      	bmi.n	8005bc8 <_printf_common+0xb0>
 8005b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b74:	4649      	mov	r1, r9
 8005b76:	4638      	mov	r0, r7
 8005b78:	47c0      	blx	r8
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d01e      	beq.n	8005bbc <_printf_common+0xa4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	68e5      	ldr	r5, [r4, #12]
 8005b82:	6832      	ldr	r2, [r6, #0]
 8005b84:	f003 0306 	and.w	r3, r3, #6
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	bf08      	it	eq
 8005b8c:	1aad      	subeq	r5, r5, r2
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	6922      	ldr	r2, [r4, #16]
 8005b92:	bf0c      	ite	eq
 8005b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b98:	2500      	movne	r5, #0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	bfc4      	itt	gt
 8005b9e:	1a9b      	subgt	r3, r3, r2
 8005ba0:	18ed      	addgt	r5, r5, r3
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	341a      	adds	r4, #26
 8005ba6:	42b5      	cmp	r5, r6
 8005ba8:	d11a      	bne.n	8005be0 <_printf_common+0xc8>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e008      	b.n	8005bc0 <_printf_common+0xa8>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c0      	blx	r8
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d103      	bne.n	8005bc4 <_printf_common+0xac>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7c6      	b.n	8005b56 <_printf_common+0x3e>
 8005bc8:	18e1      	adds	r1, r4, r3
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	2030      	movs	r0, #48	; 0x30
 8005bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd2:	4422      	add	r2, r4
 8005bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bdc:	3302      	adds	r3, #2
 8005bde:	e7c7      	b.n	8005b70 <_printf_common+0x58>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d0e6      	beq.n	8005bbc <_printf_common+0xa4>
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_common+0x8e>
	...

08005bf4 <_printf_i>:
 8005bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	7e0f      	ldrb	r7, [r1, #24]
 8005bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bfc:	2f78      	cmp	r7, #120	; 0x78
 8005bfe:	4691      	mov	r9, r2
 8005c00:	4680      	mov	r8, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	469a      	mov	sl, r3
 8005c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0a:	d807      	bhi.n	8005c1c <_printf_i+0x28>
 8005c0c:	2f62      	cmp	r7, #98	; 0x62
 8005c0e:	d80a      	bhi.n	8005c26 <_printf_i+0x32>
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	f000 80d8 	beq.w	8005dc6 <_printf_i+0x1d2>
 8005c16:	2f58      	cmp	r7, #88	; 0x58
 8005c18:	f000 80a3 	beq.w	8005d62 <_printf_i+0x16e>
 8005c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c24:	e03a      	b.n	8005c9c <_printf_i+0xa8>
 8005c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2a:	2b15      	cmp	r3, #21
 8005c2c:	d8f6      	bhi.n	8005c1c <_printf_i+0x28>
 8005c2e:	a101      	add	r1, pc, #4	; (adr r1, 8005c34 <_printf_i+0x40>)
 8005c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005c1d 	.word	0x08005c1d
 8005c40:	08005c1d 	.word	0x08005c1d
 8005c44:	08005c1d 	.word	0x08005c1d
 8005c48:	08005c1d 	.word	0x08005c1d
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005c1d 	.word	0x08005c1d
 8005c54:	08005c1d 	.word	0x08005c1d
 8005c58:	08005c1d 	.word	0x08005c1d
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005dad 	.word	0x08005dad
 8005c64:	08005cd1 	.word	0x08005cd1
 8005c68:	08005d8f 	.word	0x08005d8f
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005c1d 	.word	0x08005c1d
 8005c74:	08005dcf 	.word	0x08005dcf
 8005c78:	08005c1d 	.word	0x08005c1d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c1d 	.word	0x08005c1d
 8005c84:	08005c1d 	.word	0x08005c1d
 8005c88:	08005d97 	.word	0x08005d97
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a3      	b.n	8005de8 <_printf_i+0x1f4>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	0606      	lsls	r6, r0, #24
 8005ca6:	f101 0304 	add.w	r3, r1, #4
 8005caa:	d50a      	bpl.n	8005cc2 <_printf_i+0xce>
 8005cac:	680e      	ldr	r6, [r1, #0]
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	da03      	bge.n	8005cbc <_printf_i+0xc8>
 8005cb4:	232d      	movs	r3, #45	; 0x2d
 8005cb6:	4276      	negs	r6, r6
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	485e      	ldr	r0, [pc, #376]	; (8005e38 <_printf_i+0x244>)
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e019      	b.n	8005cf6 <_printf_i+0x102>
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cca:	bf18      	it	ne
 8005ccc:	b236      	sxthne	r6, r6
 8005cce:	e7ef      	b.n	8005cb0 <_printf_i+0xbc>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	1d19      	adds	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	0601      	lsls	r1, r0, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0xec>
 8005cdc:	681e      	ldr	r6, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0xf2>
 8005ce0:	0646      	lsls	r6, r0, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0xe8>
 8005ce4:	881e      	ldrh	r6, [r3, #0]
 8005ce6:	4854      	ldr	r0, [pc, #336]	; (8005e38 <_printf_i+0x244>)
 8005ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cea:	bf0c      	ite	eq
 8005cec:	2308      	moveq	r3, #8
 8005cee:	230a      	movne	r3, #10
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf6:	6865      	ldr	r5, [r4, #4]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	bfa2      	ittt	ge
 8005cfe:	6821      	ldrge	r1, [r4, #0]
 8005d00:	f021 0104 	bicge.w	r1, r1, #4
 8005d04:	6021      	strge	r1, [r4, #0]
 8005d06:	b90e      	cbnz	r6, 8005d0c <_printf_i+0x118>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d04d      	beq.n	8005da8 <_printf_i+0x1b4>
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d12:	fb03 6711 	mls	r7, r3, r1, r6
 8005d16:	5dc7      	ldrb	r7, [r0, r7]
 8005d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d1c:	4637      	mov	r7, r6
 8005d1e:	42bb      	cmp	r3, r7
 8005d20:	460e      	mov	r6, r1
 8005d22:	d9f4      	bls.n	8005d0e <_printf_i+0x11a>
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d10b      	bne.n	8005d40 <_printf_i+0x14c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07de      	lsls	r6, r3, #31
 8005d2c:	d508      	bpl.n	8005d40 <_printf_i+0x14c>
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6861      	ldr	r1, [r4, #4]
 8005d32:	4299      	cmp	r1, r3
 8005d34:	bfde      	ittt	le
 8005d36:	2330      	movle	r3, #48	; 0x30
 8005d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d40:	1b52      	subs	r2, r2, r5
 8005d42:	6122      	str	r2, [r4, #16]
 8005d44:	f8cd a000 	str.w	sl, [sp]
 8005d48:	464b      	mov	r3, r9
 8005d4a:	aa03      	add	r2, sp, #12
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fee2 	bl	8005b18 <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d14c      	bne.n	8005df2 <_printf_i+0x1fe>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	b004      	add	sp, #16
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	4835      	ldr	r0, [pc, #212]	; (8005e38 <_printf_i+0x244>)
 8005d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d70:	6029      	str	r1, [r5, #0]
 8005d72:	061d      	lsls	r5, r3, #24
 8005d74:	d514      	bpl.n	8005da0 <_printf_i+0x1ac>
 8005d76:	07df      	lsls	r7, r3, #31
 8005d78:	bf44      	itt	mi
 8005d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7e:	6023      	strmi	r3, [r4, #0]
 8005d80:	b91e      	cbnz	r6, 8005d8a <_printf_i+0x196>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f023 0320 	bic.w	r3, r3, #32
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	e7b0      	b.n	8005cf0 <_printf_i+0xfc>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	2378      	movs	r3, #120	; 0x78
 8005d98:	4828      	ldr	r0, [pc, #160]	; (8005e3c <_printf_i+0x248>)
 8005d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d9e:	e7e3      	b.n	8005d68 <_printf_i+0x174>
 8005da0:	0659      	lsls	r1, r3, #25
 8005da2:	bf48      	it	mi
 8005da4:	b2b6      	uxthmi	r6, r6
 8005da6:	e7e6      	b.n	8005d76 <_printf_i+0x182>
 8005da8:	4615      	mov	r5, r2
 8005daa:	e7bb      	b.n	8005d24 <_printf_i+0x130>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6826      	ldr	r6, [r4, #0]
 8005db0:	6961      	ldr	r1, [r4, #20]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6028      	str	r0, [r5, #0]
 8005db6:	0635      	lsls	r5, r6, #24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0x1cc>
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0x1d2>
 8005dc0:	0670      	lsls	r0, r6, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0x1c8>
 8005dc4:	8019      	strh	r1, [r3, #0]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	4615      	mov	r5, r2
 8005dcc:	e7ba      	b.n	8005d44 <_printf_i+0x150>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	681d      	ldr	r5, [r3, #0]
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7fa fa08 	bl	80001f0 <memchr>
 8005de0:	b108      	cbz	r0, 8005de6 <_printf_i+0x1f2>
 8005de2:	1b40      	subs	r0, r0, r5
 8005de4:	6060      	str	r0, [r4, #4]
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	2300      	movs	r3, #0
 8005dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df0:	e7a8      	b.n	8005d44 <_printf_i+0x150>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	462a      	mov	r2, r5
 8005df6:	4649      	mov	r1, r9
 8005df8:	4640      	mov	r0, r8
 8005dfa:	47d0      	blx	sl
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d0ab      	beq.n	8005d58 <_printf_i+0x164>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	d413      	bmi.n	8005e2e <_printf_i+0x23a>
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bfb8      	it	lt
 8005e0e:	4618      	movlt	r0, r3
 8005e10:	e7a4      	b.n	8005d5c <_printf_i+0x168>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4632      	mov	r2, r6
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d09b      	beq.n	8005d58 <_printf_i+0x164>
 8005e20:	3501      	adds	r5, #1
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	9903      	ldr	r1, [sp, #12]
 8005e26:	1a5b      	subs	r3, r3, r1
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dcf2      	bgt.n	8005e12 <_printf_i+0x21e>
 8005e2c:	e7eb      	b.n	8005e06 <_printf_i+0x212>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	f104 0619 	add.w	r6, r4, #25
 8005e34:	e7f5      	b.n	8005e22 <_printf_i+0x22e>
 8005e36:	bf00      	nop
 8005e38:	08006900 	.word	0x08006900
 8005e3c:	08006911 	.word	0x08006911

08005e40 <_sbrk_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d06      	ldr	r5, [pc, #24]	; (8005e5c <_sbrk_r+0x1c>)
 8005e44:	2300      	movs	r3, #0
 8005e46:	4604      	mov	r4, r0
 8005e48:	4608      	mov	r0, r1
 8005e4a:	602b      	str	r3, [r5, #0]
 8005e4c:	f7fb fd32 	bl	80018b4 <_sbrk>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d102      	bne.n	8005e5a <_sbrk_r+0x1a>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b103      	cbz	r3, 8005e5a <_sbrk_r+0x1a>
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	20000270 	.word	0x20000270

08005e60 <__swbuf_r>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	460e      	mov	r6, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	4605      	mov	r5, r0
 8005e68:	b118      	cbz	r0, 8005e72 <__swbuf_r+0x12>
 8005e6a:	6983      	ldr	r3, [r0, #24]
 8005e6c:	b90b      	cbnz	r3, 8005e72 <__swbuf_r+0x12>
 8005e6e:	f000 f9d9 	bl	8006224 <__sinit>
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <__swbuf_r+0x98>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d12b      	bne.n	8005ed0 <__swbuf_r+0x70>
 8005e78:	686c      	ldr	r4, [r5, #4]
 8005e7a:	69a3      	ldr	r3, [r4, #24]
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	071a      	lsls	r2, r3, #28
 8005e82:	d52f      	bpl.n	8005ee4 <__swbuf_r+0x84>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b36b      	cbz	r3, 8005ee4 <__swbuf_r+0x84>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	1ac0      	subs	r0, r0, r3
 8005e8e:	6963      	ldr	r3, [r4, #20]
 8005e90:	b2f6      	uxtb	r6, r6
 8005e92:	4283      	cmp	r3, r0
 8005e94:	4637      	mov	r7, r6
 8005e96:	dc04      	bgt.n	8005ea2 <__swbuf_r+0x42>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 f92e 	bl	80060fc <_fflush_r>
 8005ea0:	bb30      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	60a3      	str	r3, [r4, #8]
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	701e      	strb	r6, [r3, #0]
 8005eb0:	6963      	ldr	r3, [r4, #20]
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	4283      	cmp	r3, r0
 8005eb6:	d004      	beq.n	8005ec2 <__swbuf_r+0x62>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	07db      	lsls	r3, r3, #31
 8005ebc:	d506      	bpl.n	8005ecc <__swbuf_r+0x6c>
 8005ebe:	2e0a      	cmp	r6, #10
 8005ec0:	d104      	bne.n	8005ecc <__swbuf_r+0x6c>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 f919 	bl	80060fc <_fflush_r>
 8005eca:	b988      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ecc:	4638      	mov	r0, r7
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <__swbuf_r+0x9c>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <__swbuf_r+0x7a>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7cf      	b.n	8005e7a <__swbuf_r+0x1a>
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <__swbuf_r+0xa0>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7ca      	b.n	8005e7a <__swbuf_r+0x1a>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f80c 	bl	8005f04 <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0cb      	beq.n	8005e88 <__swbuf_r+0x28>
 8005ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef4:	e7ea      	b.n	8005ecc <__swbuf_r+0x6c>
 8005ef6:	bf00      	nop
 8005ef8:	08006944 	.word	0x08006944
 8005efc:	08006964 	.word	0x08006964
 8005f00:	08006924 	.word	0x08006924

08005f04 <__swsetup_r>:
 8005f04:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <__swsetup_r+0xcc>)
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	681d      	ldr	r5, [r3, #0]
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	b125      	cbz	r5, 8005f1a <__swsetup_r+0x16>
 8005f10:	69ab      	ldr	r3, [r5, #24]
 8005f12:	b913      	cbnz	r3, 8005f1a <__swsetup_r+0x16>
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f985 	bl	8006224 <__sinit>
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <__swsetup_r+0xd0>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d10f      	bne.n	8005f40 <__swsetup_r+0x3c>
 8005f20:	686c      	ldr	r4, [r5, #4]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	d42c      	bmi.n	8005f86 <__swsetup_r+0x82>
 8005f2c:	06dd      	lsls	r5, r3, #27
 8005f2e:	d411      	bmi.n	8005f54 <__swsetup_r+0x50>
 8005f30:	2309      	movs	r3, #9
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e03e      	b.n	8005fbe <__swsetup_r+0xba>
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <__swsetup_r+0xd4>)
 8005f42:	429c      	cmp	r4, r3
 8005f44:	d101      	bne.n	8005f4a <__swsetup_r+0x46>
 8005f46:	68ac      	ldr	r4, [r5, #8]
 8005f48:	e7eb      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <__swsetup_r+0xd8>)
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	bf08      	it	eq
 8005f50:	68ec      	ldreq	r4, [r5, #12]
 8005f52:	e7e6      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f54:	0758      	lsls	r0, r3, #29
 8005f56:	d512      	bpl.n	8005f7e <__swsetup_r+0x7a>
 8005f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5a:	b141      	cbz	r1, 8005f6e <__swsetup_r+0x6a>
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d002      	beq.n	8005f6a <__swsetup_r+0x66>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fa41 	bl	80053ec <_free_r>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f043 0308 	orr.w	r3, r3, #8
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	b94b      	cbnz	r3, 8005f9e <__swsetup_r+0x9a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d003      	beq.n	8005f9e <__swsetup_r+0x9a>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 fa09 	bl	80063b0 <__smakebuf_r>
 8005f9e:	89a0      	ldrh	r0, [r4, #12]
 8005fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa4:	f010 0301 	ands.w	r3, r0, #1
 8005fa8:	d00a      	beq.n	8005fc0 <__swsetup_r+0xbc>
 8005faa:	2300      	movs	r3, #0
 8005fac:	60a3      	str	r3, [r4, #8]
 8005fae:	6963      	ldr	r3, [r4, #20]
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	61a3      	str	r3, [r4, #24]
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	b943      	cbnz	r3, 8005fca <__swsetup_r+0xc6>
 8005fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fbc:	d1ba      	bne.n	8005f34 <__swsetup_r+0x30>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	0781      	lsls	r1, r0, #30
 8005fc2:	bf58      	it	pl
 8005fc4:	6963      	ldrpl	r3, [r4, #20]
 8005fc6:	60a3      	str	r3, [r4, #8]
 8005fc8:	e7f4      	b.n	8005fb4 <__swsetup_r+0xb0>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7f7      	b.n	8005fbe <__swsetup_r+0xba>
 8005fce:	bf00      	nop
 8005fd0:	2000002c 	.word	0x2000002c
 8005fd4:	08006944 	.word	0x08006944
 8005fd8:	08006964 	.word	0x08006964
 8005fdc:	08006924 	.word	0x08006924

08005fe0 <abort>:
 8005fe0:	b508      	push	{r3, lr}
 8005fe2:	2006      	movs	r0, #6
 8005fe4:	f000 fab0 	bl	8006548 <raise>
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fb fbeb 	bl	80017c4 <_exit>
	...

08005ff0 <__sflush_r>:
 8005ff0:	898a      	ldrh	r2, [r1, #12]
 8005ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	0710      	lsls	r0, r2, #28
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	d458      	bmi.n	80060b0 <__sflush_r+0xc0>
 8005ffe:	684b      	ldr	r3, [r1, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dc05      	bgt.n	8006010 <__sflush_r+0x20>
 8006004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	dc02      	bgt.n	8006010 <__sflush_r+0x20>
 800600a:	2000      	movs	r0, #0
 800600c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006012:	2e00      	cmp	r6, #0
 8006014:	d0f9      	beq.n	800600a <__sflush_r+0x1a>
 8006016:	2300      	movs	r3, #0
 8006018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800601c:	682f      	ldr	r7, [r5, #0]
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	d032      	beq.n	8006088 <__sflush_r+0x98>
 8006022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	075a      	lsls	r2, r3, #29
 8006028:	d505      	bpl.n	8006036 <__sflush_r+0x46>
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	1ac0      	subs	r0, r0, r3
 800602e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006030:	b10b      	cbz	r3, 8006036 <__sflush_r+0x46>
 8006032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006034:	1ac0      	subs	r0, r0, r3
 8006036:	2300      	movs	r3, #0
 8006038:	4602      	mov	r2, r0
 800603a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800603c:	6a21      	ldr	r1, [r4, #32]
 800603e:	4628      	mov	r0, r5
 8006040:	47b0      	blx	r6
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	d106      	bne.n	8006056 <__sflush_r+0x66>
 8006048:	6829      	ldr	r1, [r5, #0]
 800604a:	291d      	cmp	r1, #29
 800604c:	d82c      	bhi.n	80060a8 <__sflush_r+0xb8>
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <__sflush_r+0x108>)
 8006050:	40ca      	lsrs	r2, r1
 8006052:	07d6      	lsls	r6, r2, #31
 8006054:	d528      	bpl.n	80060a8 <__sflush_r+0xb8>
 8006056:	2200      	movs	r2, #0
 8006058:	6062      	str	r2, [r4, #4]
 800605a:	04d9      	lsls	r1, r3, #19
 800605c:	6922      	ldr	r2, [r4, #16]
 800605e:	6022      	str	r2, [r4, #0]
 8006060:	d504      	bpl.n	800606c <__sflush_r+0x7c>
 8006062:	1c42      	adds	r2, r0, #1
 8006064:	d101      	bne.n	800606a <__sflush_r+0x7a>
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	b903      	cbnz	r3, 800606c <__sflush_r+0x7c>
 800606a:	6560      	str	r0, [r4, #84]	; 0x54
 800606c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800606e:	602f      	str	r7, [r5, #0]
 8006070:	2900      	cmp	r1, #0
 8006072:	d0ca      	beq.n	800600a <__sflush_r+0x1a>
 8006074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006078:	4299      	cmp	r1, r3
 800607a:	d002      	beq.n	8006082 <__sflush_r+0x92>
 800607c:	4628      	mov	r0, r5
 800607e:	f7ff f9b5 	bl	80053ec <_free_r>
 8006082:	2000      	movs	r0, #0
 8006084:	6360      	str	r0, [r4, #52]	; 0x34
 8006086:	e7c1      	b.n	800600c <__sflush_r+0x1c>
 8006088:	6a21      	ldr	r1, [r4, #32]
 800608a:	2301      	movs	r3, #1
 800608c:	4628      	mov	r0, r5
 800608e:	47b0      	blx	r6
 8006090:	1c41      	adds	r1, r0, #1
 8006092:	d1c7      	bne.n	8006024 <__sflush_r+0x34>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0c4      	beq.n	8006024 <__sflush_r+0x34>
 800609a:	2b1d      	cmp	r3, #29
 800609c:	d001      	beq.n	80060a2 <__sflush_r+0xb2>
 800609e:	2b16      	cmp	r3, #22
 80060a0:	d101      	bne.n	80060a6 <__sflush_r+0xb6>
 80060a2:	602f      	str	r7, [r5, #0]
 80060a4:	e7b1      	b.n	800600a <__sflush_r+0x1a>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	e7ad      	b.n	800600c <__sflush_r+0x1c>
 80060b0:	690f      	ldr	r7, [r1, #16]
 80060b2:	2f00      	cmp	r7, #0
 80060b4:	d0a9      	beq.n	800600a <__sflush_r+0x1a>
 80060b6:	0793      	lsls	r3, r2, #30
 80060b8:	680e      	ldr	r6, [r1, #0]
 80060ba:	bf08      	it	eq
 80060bc:	694b      	ldreq	r3, [r1, #20]
 80060be:	600f      	str	r7, [r1, #0]
 80060c0:	bf18      	it	ne
 80060c2:	2300      	movne	r3, #0
 80060c4:	eba6 0807 	sub.w	r8, r6, r7
 80060c8:	608b      	str	r3, [r1, #8]
 80060ca:	f1b8 0f00 	cmp.w	r8, #0
 80060ce:	dd9c      	ble.n	800600a <__sflush_r+0x1a>
 80060d0:	6a21      	ldr	r1, [r4, #32]
 80060d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060d4:	4643      	mov	r3, r8
 80060d6:	463a      	mov	r2, r7
 80060d8:	4628      	mov	r0, r5
 80060da:	47b0      	blx	r6
 80060dc:	2800      	cmp	r0, #0
 80060de:	dc06      	bgt.n	80060ee <__sflush_r+0xfe>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	e78e      	b.n	800600c <__sflush_r+0x1c>
 80060ee:	4407      	add	r7, r0
 80060f0:	eba8 0800 	sub.w	r8, r8, r0
 80060f4:	e7e9      	b.n	80060ca <__sflush_r+0xda>
 80060f6:	bf00      	nop
 80060f8:	20400001 	.word	0x20400001

080060fc <_fflush_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	b913      	cbnz	r3, 800610c <_fflush_r+0x10>
 8006106:	2500      	movs	r5, #0
 8006108:	4628      	mov	r0, r5
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	b118      	cbz	r0, 8006116 <_fflush_r+0x1a>
 800610e:	6983      	ldr	r3, [r0, #24]
 8006110:	b90b      	cbnz	r3, 8006116 <_fflush_r+0x1a>
 8006112:	f000 f887 	bl	8006224 <__sinit>
 8006116:	4b14      	ldr	r3, [pc, #80]	; (8006168 <_fflush_r+0x6c>)
 8006118:	429c      	cmp	r4, r3
 800611a:	d11b      	bne.n	8006154 <_fflush_r+0x58>
 800611c:	686c      	ldr	r4, [r5, #4]
 800611e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ef      	beq.n	8006106 <_fflush_r+0xa>
 8006126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006128:	07d0      	lsls	r0, r2, #31
 800612a:	d404      	bmi.n	8006136 <_fflush_r+0x3a>
 800612c:	0599      	lsls	r1, r3, #22
 800612e:	d402      	bmi.n	8006136 <_fflush_r+0x3a>
 8006130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006132:	f000 f915 	bl	8006360 <__retarget_lock_acquire_recursive>
 8006136:	4628      	mov	r0, r5
 8006138:	4621      	mov	r1, r4
 800613a:	f7ff ff59 	bl	8005ff0 <__sflush_r>
 800613e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006140:	07da      	lsls	r2, r3, #31
 8006142:	4605      	mov	r5, r0
 8006144:	d4e0      	bmi.n	8006108 <_fflush_r+0xc>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	059b      	lsls	r3, r3, #22
 800614a:	d4dd      	bmi.n	8006108 <_fflush_r+0xc>
 800614c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614e:	f000 f908 	bl	8006362 <__retarget_lock_release_recursive>
 8006152:	e7d9      	b.n	8006108 <_fflush_r+0xc>
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <_fflush_r+0x70>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d101      	bne.n	800615e <_fflush_r+0x62>
 800615a:	68ac      	ldr	r4, [r5, #8]
 800615c:	e7df      	b.n	800611e <_fflush_r+0x22>
 800615e:	4b04      	ldr	r3, [pc, #16]	; (8006170 <_fflush_r+0x74>)
 8006160:	429c      	cmp	r4, r3
 8006162:	bf08      	it	eq
 8006164:	68ec      	ldreq	r4, [r5, #12]
 8006166:	e7da      	b.n	800611e <_fflush_r+0x22>
 8006168:	08006944 	.word	0x08006944
 800616c:	08006964 	.word	0x08006964
 8006170:	08006924 	.word	0x08006924

08006174 <std>:
 8006174:	2300      	movs	r3, #0
 8006176:	b510      	push	{r4, lr}
 8006178:	4604      	mov	r4, r0
 800617a:	e9c0 3300 	strd	r3, r3, [r0]
 800617e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006182:	6083      	str	r3, [r0, #8]
 8006184:	8181      	strh	r1, [r0, #12]
 8006186:	6643      	str	r3, [r0, #100]	; 0x64
 8006188:	81c2      	strh	r2, [r0, #14]
 800618a:	6183      	str	r3, [r0, #24]
 800618c:	4619      	mov	r1, r3
 800618e:	2208      	movs	r2, #8
 8006190:	305c      	adds	r0, #92	; 0x5c
 8006192:	f7ff f801 	bl	8005198 <memset>
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <std+0x38>)
 8006198:	6263      	str	r3, [r4, #36]	; 0x24
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <std+0x3c>)
 800619c:	62a3      	str	r3, [r4, #40]	; 0x28
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <std+0x40>)
 80061a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <std+0x44>)
 80061a4:	6224      	str	r4, [r4, #32]
 80061a6:	6323      	str	r3, [r4, #48]	; 0x30
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	08006581 	.word	0x08006581
 80061b0:	080065a3 	.word	0x080065a3
 80061b4:	080065db 	.word	0x080065db
 80061b8:	080065ff 	.word	0x080065ff

080061bc <_cleanup_r>:
 80061bc:	4901      	ldr	r1, [pc, #4]	; (80061c4 <_cleanup_r+0x8>)
 80061be:	f000 b8af 	b.w	8006320 <_fwalk_reent>
 80061c2:	bf00      	nop
 80061c4:	080060fd 	.word	0x080060fd

080061c8 <__sfmoreglue>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	2268      	movs	r2, #104	; 0x68
 80061cc:	1e4d      	subs	r5, r1, #1
 80061ce:	4355      	muls	r5, r2
 80061d0:	460e      	mov	r6, r1
 80061d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061d6:	f7ff f975 	bl	80054c4 <_malloc_r>
 80061da:	4604      	mov	r4, r0
 80061dc:	b140      	cbz	r0, 80061f0 <__sfmoreglue+0x28>
 80061de:	2100      	movs	r1, #0
 80061e0:	e9c0 1600 	strd	r1, r6, [r0]
 80061e4:	300c      	adds	r0, #12
 80061e6:	60a0      	str	r0, [r4, #8]
 80061e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061ec:	f7fe ffd4 	bl	8005198 <memset>
 80061f0:	4620      	mov	r0, r4
 80061f2:	bd70      	pop	{r4, r5, r6, pc}

080061f4 <__sfp_lock_acquire>:
 80061f4:	4801      	ldr	r0, [pc, #4]	; (80061fc <__sfp_lock_acquire+0x8>)
 80061f6:	f000 b8b3 	b.w	8006360 <__retarget_lock_acquire_recursive>
 80061fa:	bf00      	nop
 80061fc:	2000026d 	.word	0x2000026d

08006200 <__sfp_lock_release>:
 8006200:	4801      	ldr	r0, [pc, #4]	; (8006208 <__sfp_lock_release+0x8>)
 8006202:	f000 b8ae 	b.w	8006362 <__retarget_lock_release_recursive>
 8006206:	bf00      	nop
 8006208:	2000026d 	.word	0x2000026d

0800620c <__sinit_lock_acquire>:
 800620c:	4801      	ldr	r0, [pc, #4]	; (8006214 <__sinit_lock_acquire+0x8>)
 800620e:	f000 b8a7 	b.w	8006360 <__retarget_lock_acquire_recursive>
 8006212:	bf00      	nop
 8006214:	2000026e 	.word	0x2000026e

08006218 <__sinit_lock_release>:
 8006218:	4801      	ldr	r0, [pc, #4]	; (8006220 <__sinit_lock_release+0x8>)
 800621a:	f000 b8a2 	b.w	8006362 <__retarget_lock_release_recursive>
 800621e:	bf00      	nop
 8006220:	2000026e 	.word	0x2000026e

08006224 <__sinit>:
 8006224:	b510      	push	{r4, lr}
 8006226:	4604      	mov	r4, r0
 8006228:	f7ff fff0 	bl	800620c <__sinit_lock_acquire>
 800622c:	69a3      	ldr	r3, [r4, #24]
 800622e:	b11b      	cbz	r3, 8006238 <__sinit+0x14>
 8006230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006234:	f7ff bff0 	b.w	8006218 <__sinit_lock_release>
 8006238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800623c:	6523      	str	r3, [r4, #80]	; 0x50
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <__sinit+0x68>)
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <__sinit+0x6c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	62a2      	str	r2, [r4, #40]	; 0x28
 8006246:	42a3      	cmp	r3, r4
 8006248:	bf04      	itt	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	61a3      	streq	r3, [r4, #24]
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f820 	bl	8006294 <__sfp>
 8006254:	6060      	str	r0, [r4, #4]
 8006256:	4620      	mov	r0, r4
 8006258:	f000 f81c 	bl	8006294 <__sfp>
 800625c:	60a0      	str	r0, [r4, #8]
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f818 	bl	8006294 <__sfp>
 8006264:	2200      	movs	r2, #0
 8006266:	60e0      	str	r0, [r4, #12]
 8006268:	2104      	movs	r1, #4
 800626a:	6860      	ldr	r0, [r4, #4]
 800626c:	f7ff ff82 	bl	8006174 <std>
 8006270:	68a0      	ldr	r0, [r4, #8]
 8006272:	2201      	movs	r2, #1
 8006274:	2109      	movs	r1, #9
 8006276:	f7ff ff7d 	bl	8006174 <std>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	2202      	movs	r2, #2
 800627e:	2112      	movs	r1, #18
 8006280:	f7ff ff78 	bl	8006174 <std>
 8006284:	2301      	movs	r3, #1
 8006286:	61a3      	str	r3, [r4, #24]
 8006288:	e7d2      	b.n	8006230 <__sinit+0xc>
 800628a:	bf00      	nop
 800628c:	0800673c 	.word	0x0800673c
 8006290:	080061bd 	.word	0x080061bd

08006294 <__sfp>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	4607      	mov	r7, r0
 8006298:	f7ff ffac 	bl	80061f4 <__sfp_lock_acquire>
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <__sfp+0x84>)
 800629e:	681e      	ldr	r6, [r3, #0]
 80062a0:	69b3      	ldr	r3, [r6, #24]
 80062a2:	b913      	cbnz	r3, 80062aa <__sfp+0x16>
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff ffbd 	bl	8006224 <__sinit>
 80062aa:	3648      	adds	r6, #72	; 0x48
 80062ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	d503      	bpl.n	80062bc <__sfp+0x28>
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	b30b      	cbz	r3, 80062fc <__sfp+0x68>
 80062b8:	6836      	ldr	r6, [r6, #0]
 80062ba:	e7f7      	b.n	80062ac <__sfp+0x18>
 80062bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062c0:	b9d5      	cbnz	r5, 80062f8 <__sfp+0x64>
 80062c2:	4b16      	ldr	r3, [pc, #88]	; (800631c <__sfp+0x88>)
 80062c4:	60e3      	str	r3, [r4, #12]
 80062c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062ca:	6665      	str	r5, [r4, #100]	; 0x64
 80062cc:	f000 f847 	bl	800635e <__retarget_lock_init_recursive>
 80062d0:	f7ff ff96 	bl	8006200 <__sfp_lock_release>
 80062d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062dc:	6025      	str	r5, [r4, #0]
 80062de:	61a5      	str	r5, [r4, #24]
 80062e0:	2208      	movs	r2, #8
 80062e2:	4629      	mov	r1, r5
 80062e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062e8:	f7fe ff56 	bl	8005198 <memset>
 80062ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062f4:	4620      	mov	r0, r4
 80062f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f8:	3468      	adds	r4, #104	; 0x68
 80062fa:	e7d9      	b.n	80062b0 <__sfp+0x1c>
 80062fc:	2104      	movs	r1, #4
 80062fe:	4638      	mov	r0, r7
 8006300:	f7ff ff62 	bl	80061c8 <__sfmoreglue>
 8006304:	4604      	mov	r4, r0
 8006306:	6030      	str	r0, [r6, #0]
 8006308:	2800      	cmp	r0, #0
 800630a:	d1d5      	bne.n	80062b8 <__sfp+0x24>
 800630c:	f7ff ff78 	bl	8006200 <__sfp_lock_release>
 8006310:	230c      	movs	r3, #12
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	e7ee      	b.n	80062f4 <__sfp+0x60>
 8006316:	bf00      	nop
 8006318:	0800673c 	.word	0x0800673c
 800631c:	ffff0001 	.word	0xffff0001

08006320 <_fwalk_reent>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	4606      	mov	r6, r0
 8006326:	4688      	mov	r8, r1
 8006328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800632c:	2700      	movs	r7, #0
 800632e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006332:	f1b9 0901 	subs.w	r9, r9, #1
 8006336:	d505      	bpl.n	8006344 <_fwalk_reent+0x24>
 8006338:	6824      	ldr	r4, [r4, #0]
 800633a:	2c00      	cmp	r4, #0
 800633c:	d1f7      	bne.n	800632e <_fwalk_reent+0xe>
 800633e:	4638      	mov	r0, r7
 8006340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006344:	89ab      	ldrh	r3, [r5, #12]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d907      	bls.n	800635a <_fwalk_reent+0x3a>
 800634a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800634e:	3301      	adds	r3, #1
 8006350:	d003      	beq.n	800635a <_fwalk_reent+0x3a>
 8006352:	4629      	mov	r1, r5
 8006354:	4630      	mov	r0, r6
 8006356:	47c0      	blx	r8
 8006358:	4307      	orrs	r7, r0
 800635a:	3568      	adds	r5, #104	; 0x68
 800635c:	e7e9      	b.n	8006332 <_fwalk_reent+0x12>

0800635e <__retarget_lock_init_recursive>:
 800635e:	4770      	bx	lr

08006360 <__retarget_lock_acquire_recursive>:
 8006360:	4770      	bx	lr

08006362 <__retarget_lock_release_recursive>:
 8006362:	4770      	bx	lr

08006364 <__swhatbuf_r>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	460e      	mov	r6, r1
 8006368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636c:	2900      	cmp	r1, #0
 800636e:	b096      	sub	sp, #88	; 0x58
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	da08      	bge.n	8006388 <__swhatbuf_r+0x24>
 8006376:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	061a      	lsls	r2, r3, #24
 8006380:	d410      	bmi.n	80063a4 <__swhatbuf_r+0x40>
 8006382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006386:	e00e      	b.n	80063a6 <__swhatbuf_r+0x42>
 8006388:	466a      	mov	r2, sp
 800638a:	f000 f95f 	bl	800664c <_fstat_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	dbf1      	blt.n	8006376 <__swhatbuf_r+0x12>
 8006392:	9a01      	ldr	r2, [sp, #4]
 8006394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800639c:	425a      	negs	r2, r3
 800639e:	415a      	adcs	r2, r3
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	e7ee      	b.n	8006382 <__swhatbuf_r+0x1e>
 80063a4:	2340      	movs	r3, #64	; 0x40
 80063a6:	2000      	movs	r0, #0
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	b016      	add	sp, #88	; 0x58
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080063b0 <__smakebuf_r>:
 80063b0:	898b      	ldrh	r3, [r1, #12]
 80063b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063b4:	079d      	lsls	r5, r3, #30
 80063b6:	4606      	mov	r6, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	d507      	bpl.n	80063cc <__smakebuf_r+0x1c>
 80063bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	2301      	movs	r3, #1
 80063c6:	6163      	str	r3, [r4, #20]
 80063c8:	b002      	add	sp, #8
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	ab01      	add	r3, sp, #4
 80063ce:	466a      	mov	r2, sp
 80063d0:	f7ff ffc8 	bl	8006364 <__swhatbuf_r>
 80063d4:	9900      	ldr	r1, [sp, #0]
 80063d6:	4605      	mov	r5, r0
 80063d8:	4630      	mov	r0, r6
 80063da:	f7ff f873 	bl	80054c4 <_malloc_r>
 80063de:	b948      	cbnz	r0, 80063f4 <__smakebuf_r+0x44>
 80063e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e4:	059a      	lsls	r2, r3, #22
 80063e6:	d4ef      	bmi.n	80063c8 <__smakebuf_r+0x18>
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	e7e3      	b.n	80063bc <__smakebuf_r+0xc>
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <__smakebuf_r+0x7c>)
 80063f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	6020      	str	r0, [r4, #0]
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	6163      	str	r3, [r4, #20]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	6120      	str	r0, [r4, #16]
 800640a:	b15b      	cbz	r3, 8006424 <__smakebuf_r+0x74>
 800640c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f92d 	bl	8006670 <_isatty_r>
 8006416:	b128      	cbz	r0, 8006424 <__smakebuf_r+0x74>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	89a0      	ldrh	r0, [r4, #12]
 8006426:	4305      	orrs	r5, r0
 8006428:	81a5      	strh	r5, [r4, #12]
 800642a:	e7cd      	b.n	80063c8 <__smakebuf_r+0x18>
 800642c:	080061bd 	.word	0x080061bd

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <memmove>:
 800644c:	4288      	cmp	r0, r1
 800644e:	b510      	push	{r4, lr}
 8006450:	eb01 0402 	add.w	r4, r1, r2
 8006454:	d902      	bls.n	800645c <memmove+0x10>
 8006456:	4284      	cmp	r4, r0
 8006458:	4623      	mov	r3, r4
 800645a:	d807      	bhi.n	800646c <memmove+0x20>
 800645c:	1e43      	subs	r3, r0, #1
 800645e:	42a1      	cmp	r1, r4
 8006460:	d008      	beq.n	8006474 <memmove+0x28>
 8006462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800646a:	e7f8      	b.n	800645e <memmove+0x12>
 800646c:	4402      	add	r2, r0
 800646e:	4601      	mov	r1, r0
 8006470:	428a      	cmp	r2, r1
 8006472:	d100      	bne.n	8006476 <memmove+0x2a>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800647a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647e:	e7f7      	b.n	8006470 <memmove+0x24>

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	; (8006488 <__malloc_lock+0x8>)
 8006482:	f7ff bf6d 	b.w	8006360 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	2000026c 	.word	0x2000026c

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_unlock+0x8>)
 800648e:	f7ff bf68 	b.w	8006362 <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	2000026c 	.word	0x2000026c

08006498 <_realloc_r>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	4680      	mov	r8, r0
 800649e:	4614      	mov	r4, r2
 80064a0:	460e      	mov	r6, r1
 80064a2:	b921      	cbnz	r1, 80064ae <_realloc_r+0x16>
 80064a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	4611      	mov	r1, r2
 80064aa:	f7ff b80b 	b.w	80054c4 <_malloc_r>
 80064ae:	b92a      	cbnz	r2, 80064bc <_realloc_r+0x24>
 80064b0:	f7fe ff9c 	bl	80053ec <_free_r>
 80064b4:	4625      	mov	r5, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	f000 f8fa 	bl	80066b4 <_malloc_usable_size_r>
 80064c0:	4284      	cmp	r4, r0
 80064c2:	4607      	mov	r7, r0
 80064c4:	d802      	bhi.n	80064cc <_realloc_r+0x34>
 80064c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064ca:	d812      	bhi.n	80064f2 <_realloc_r+0x5a>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7fe fff8 	bl	80054c4 <_malloc_r>
 80064d4:	4605      	mov	r5, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0ed      	beq.n	80064b6 <_realloc_r+0x1e>
 80064da:	42bc      	cmp	r4, r7
 80064dc:	4622      	mov	r2, r4
 80064de:	4631      	mov	r1, r6
 80064e0:	bf28      	it	cs
 80064e2:	463a      	movcs	r2, r7
 80064e4:	f7ff ffa4 	bl	8006430 <memcpy>
 80064e8:	4631      	mov	r1, r6
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7fe ff7e 	bl	80053ec <_free_r>
 80064f0:	e7e1      	b.n	80064b6 <_realloc_r+0x1e>
 80064f2:	4635      	mov	r5, r6
 80064f4:	e7df      	b.n	80064b6 <_realloc_r+0x1e>

080064f6 <_raise_r>:
 80064f6:	291f      	cmp	r1, #31
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	d904      	bls.n	800650a <_raise_r+0x14>
 8006500:	2316      	movs	r3, #22
 8006502:	6003      	str	r3, [r0, #0]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	bd38      	pop	{r3, r4, r5, pc}
 800650a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800650c:	b112      	cbz	r2, 8006514 <_raise_r+0x1e>
 800650e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006512:	b94b      	cbnz	r3, 8006528 <_raise_r+0x32>
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f831 	bl	800657c <_getpid_r>
 800651a:	462a      	mov	r2, r5
 800651c:	4601      	mov	r1, r0
 800651e:	4620      	mov	r0, r4
 8006520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006524:	f000 b818 	b.w	8006558 <_kill_r>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d00a      	beq.n	8006542 <_raise_r+0x4c>
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	d103      	bne.n	8006538 <_raise_r+0x42>
 8006530:	2316      	movs	r3, #22
 8006532:	6003      	str	r3, [r0, #0]
 8006534:	2001      	movs	r0, #1
 8006536:	e7e7      	b.n	8006508 <_raise_r+0x12>
 8006538:	2400      	movs	r4, #0
 800653a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800653e:	4628      	mov	r0, r5
 8006540:	4798      	blx	r3
 8006542:	2000      	movs	r0, #0
 8006544:	e7e0      	b.n	8006508 <_raise_r+0x12>
	...

08006548 <raise>:
 8006548:	4b02      	ldr	r3, [pc, #8]	; (8006554 <raise+0xc>)
 800654a:	4601      	mov	r1, r0
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	f7ff bfd2 	b.w	80064f6 <_raise_r>
 8006552:	bf00      	nop
 8006554:	2000002c 	.word	0x2000002c

08006558 <_kill_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	; (8006578 <_kill_r+0x20>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f7fb f91d 	bl	80017a4 <_kill>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d102      	bne.n	8006574 <_kill_r+0x1c>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	b103      	cbz	r3, 8006574 <_kill_r+0x1c>
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	bf00      	nop
 8006578:	20000270 	.word	0x20000270

0800657c <_getpid_r>:
 800657c:	f7fb b90a 	b.w	8001794 <_getpid>

08006580 <__sread>:
 8006580:	b510      	push	{r4, lr}
 8006582:	460c      	mov	r4, r1
 8006584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006588:	f000 f89c 	bl	80066c4 <_read_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	bfab      	itete	ge
 8006590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006592:	89a3      	ldrhlt	r3, [r4, #12]
 8006594:	181b      	addge	r3, r3, r0
 8006596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800659a:	bfac      	ite	ge
 800659c:	6563      	strge	r3, [r4, #84]	; 0x54
 800659e:	81a3      	strhlt	r3, [r4, #12]
 80065a0:	bd10      	pop	{r4, pc}

080065a2 <__swrite>:
 80065a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	461f      	mov	r7, r3
 80065a8:	898b      	ldrh	r3, [r1, #12]
 80065aa:	05db      	lsls	r3, r3, #23
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	4616      	mov	r6, r2
 80065b2:	d505      	bpl.n	80065c0 <__swrite+0x1e>
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	2302      	movs	r3, #2
 80065ba:	2200      	movs	r2, #0
 80065bc:	f000 f868 	bl	8006690 <_lseek_r>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	f000 b817 	b.w	8006608 <_write_r>

080065da <__sseek>:
 80065da:	b510      	push	{r4, lr}
 80065dc:	460c      	mov	r4, r1
 80065de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e2:	f000 f855 	bl	8006690 <_lseek_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	bf15      	itete	ne
 80065ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065f6:	81a3      	strheq	r3, [r4, #12]
 80065f8:	bf18      	it	ne
 80065fa:	81a3      	strhne	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__sclose>:
 80065fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006602:	f000 b813 	b.w	800662c <_close_r>
	...

08006608 <_write_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d07      	ldr	r5, [pc, #28]	; (8006628 <_write_r+0x20>)
 800660c:	4604      	mov	r4, r0
 800660e:	4608      	mov	r0, r1
 8006610:	4611      	mov	r1, r2
 8006612:	2200      	movs	r2, #0
 8006614:	602a      	str	r2, [r5, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	f7fb f8fb 	bl	8001812 <_write>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_write_r+0x1e>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_write_r+0x1e>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000270 	.word	0x20000270

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fb f907 	bl	800184a <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000270 	.word	0x20000270

0800664c <_fstat_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_fstat_r+0x20>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f7fb f902 	bl	8001862 <_fstat>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d102      	bne.n	8006668 <_fstat_r+0x1c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b103      	cbz	r3, 8006668 <_fstat_r+0x1c>
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	20000270 	.word	0x20000270

08006670 <_isatty_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	; (800668c <_isatty_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fb f901 	bl	8001882 <_isatty>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_isatty_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_isatty_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000270 	.word	0x20000270

08006690 <_lseek_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	; (80066b0 <_lseek_r+0x20>)
 8006694:	4604      	mov	r4, r0
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	2200      	movs	r2, #0
 800669c:	602a      	str	r2, [r5, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	f7fb f8fa 	bl	8001898 <_lseek>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_lseek_r+0x1e>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_lseek_r+0x1e>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20000270 	.word	0x20000270

080066b4 <_malloc_usable_size_r>:
 80066b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b8:	1f18      	subs	r0, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfbc      	itt	lt
 80066be:	580b      	ldrlt	r3, [r1, r0]
 80066c0:	18c0      	addlt	r0, r0, r3
 80066c2:	4770      	bx	lr

080066c4 <_read_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_read_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fb f880 	bl	80017d8 <_read>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_read_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_read_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000270 	.word	0x20000270

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
